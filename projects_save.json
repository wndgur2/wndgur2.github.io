{
  "algo": {
    "id": "algo",
    "category": "project",
    "title": "algo",
    "description": "This is an auto push repository for Baekjoon Online Judge created with [BaekjoonHub](https://github.com/BaekjoonHub/BaekjoonHub).",
    "tags": [],
    "date_started": "2024.08.21",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/algo",
    "content": "# algo\nThis is an auto push repository for Baekjoon Online Judge created with [BaekjoonHub](https://github.com/BaekjoonHub/BaekjoonHub).\n",
    "thumbnail": "/images/algo.jpeg"
  },
  "bee": {
    "id": "bee",
    "category": "project",
    "title": "bee",
    "description": "Bee is a tool for helping develop with beego app framework.",
    "tags": [],
    "date_started": "2025.05.16",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/bee",
    "content": "\nbee\n===\n\nBee is a command-line tool facilitating development of Beego-based application.\n\n[![Build Status](https://img.shields.io/travis/beego/bee.svg?branch=master&label=master)](https://travis-ci.org/beego/bee)\n[![Build Status](https://img.shields.io/travis/beego/bee.svg?branch=develop&label=develop)](https://travis-ci.org/beego/bee)\n\n## Requirements\n\n- Go version >= 1.13\n\n## Installation\n\nTo install or update `bee` use the `go install` command:\n\n```bash\ngo install github.com/beego/bee/v2@latest\n```\n\n## Then you can add `bee` binary to PATH environment variable in your `~/.bashrc` or `~/.bash_profile` file:\n\n```bash\nexport PATH=$PATH:<your_main_gopath>/bin\n```\n\n## Installing and updating bee prior Go version 1.17\n\nTo install `bee` use the `go get` command:\n\n```bash\ngo get github.com/beego/bee/v2\n```\n\n> If you already have `bee` installed, updating `bee` is simple:\n\n```bash\ngo get -u github.com/beego/bee/v2\n```\n\n## Basic commands\n\nBee provides a variety of commands which can be helpful at various stages of development. The top level commands include:\n\n```\n    version     Prints the current Bee version\n    migrate     Runs database migrations\n    api         Creates a Beego API application\n    bale        Transforms non-Go files to Go source files\n    fix         Fixes your application by making it compatible with newer versions of Beego\n    pro         Source code generator\n    dlv         Start a debugging session using Delve\n    dockerize   Generates a Dockerfile and docker-compose.yaml for your Beego application\n    generate    Source code generator\n    hprose      Creates an RPC application based on Hprose and Beego frameworks\n    new         Creates a Beego application\n    pack        Compresses a Beego application into a single file\n    rs          Run customized scripts\n    run         Run the application by starting a local development server\n    server      serving static content over HTTP on port\n    update      Update Bee\n```\n\n### bee version\n\nTo display the current version of `bee`, `beego` and `go` installed on your machine:\n\n```bash\n$ bee version\n______\n| ___ \\\n| |_/ /  ___   ___\n| ___ \\ / _ \\ / _ \\\n| |_/ /|  __/|  __/\n\\____/  \\___| \\___| v2.0.4\n\n├── Beego     : 2.0.4\n├── GoVersion : go1.14.1\n├── GOOS      : darwin\n├── GOARCH    : amd64\n├── NumCPU    : 4\n├── GOPATH    : /home/beeuser/.go\n├── GOROOT    : /usr/local/Cellar/go/1.14.1/libexec\n├── Compiler  : gc\n└── Published : 2020-09-13\n```\n\nYou can also change the output format using `-o` flag:\n\n```bash\n$ bee version -o json\n{\n    \"GoVersion\": \"go1.14.1\",\n    \"GOOS\": \"darwin\",\n    \"GOARCH\": \"amd64\",\n    \"NumCPU\": 4,\n    \"GOPATH\": \"/home/beeuser/.go\",\n    \"GOROOT\": \"/usr/local/Cellar/go/1.14.1/libexec\",\n    \"Compiler\": \"gc\",\n    \"BeeVersion\": \"2.0.4\",\n    \"BeegoVersion\": \"2.0.4\",\n    \"Published\": \"2020-09-13\"\n}\n```\n\nFor more information on the usage, run `bee help version`.\n\n### bee new\n\nTo create a new Beego web application:\n\n```bash\n$ bee new my-web-app\n2020/09/14 22:28:51 INFO     ▶ 0001 generate new project support go modules.\n2020/09/14 22:28:51 INFO     ▶ 0002 Creating application...\n\tcreate\t /Users/beeuser/learn/my-web-app/go.mod\n\tcreate\t /Users/beeuser/learn/my-web-app/\n\tcreate\t /Users/beeuser/learn/my-web-app/conf/\n\tcreate\t /Users/beeuser/learn/my-web-app/controllers/\n\tcreate\t /Users/beeuser/learn/my-web-app/models/\n\tcreate\t /Users/beeuser/learn/my-web-app/routers/\n\tcreate\t /Users/beeuser/learn/my-web-app/tests/\n\tcreate\t /Users/beeuser/learn/my-web-app/static/\n\tcreate\t /Users/beeuser/learn/my-web-app/static/js/\n\tcreate\t /Users/beeuser/learn/my-web-app/static/css/\n\tcreate\t /Users/beeuser/learn/my-web-app/static/img/\n\tcreate\t /Users/beeuser/learn/my-web-app/views/\n\tcreate\t /Users/beeuser/learn/my-web-app/conf/app.conf\n\tcreate\t /Users/beeuser/learn/my-web-app/controllers/default.go\n\tcreate\t /Users/beeuser/learn/my-web-app/views/index.tpl\n\tcreate\t /Users/beeuser/learn/my-web-app/routers/router.go\n\tcreate\t /Users/beeuser/learn/my-web-app/tests/default_test.go\n\tcreate\t /Users/beeuser/learn/my-web-app/main.go\n2020/09/14 22:28:51 SUCCESS  ▶ 0003 New application successfully created!\n```\n\nFor more information on the usage, run `bee help new`.\n\n### bee run\n\nTo run the application we just created, you can navigate to the application folder and execute:\n\n```bash\n$ cd my-web-app && bee run\n```\n\nFor more information on the usage, run `bee help run`.\n\n### bee pack\n\nTo compress a Beego application into a single deployable file:\n\n```bash\n$ bee pack\n______\n| ___ \\\n| |_/ /  ___   ___\n| ___ \\ / _ \\ / _ \\\n| |_/ /|  __/|  __/\n\\____/  \\___| \\___| v2.0.0\n2016/12/26 22:29:29 INFO     ▶ 0001 Packaging application on '/home/beeuser/.go/src/github.com/user/my-web-app'...\n2016/12/26 22:29:29 INFO     ▶ 0002 Building application...\n2016/12/26 22:29:29 INFO     ▶ 0003 Using: GOOS=linux GOARCH=amd64\n2016/12/26 22:29:31 SUCCESS  ▶ 0004 Build Successful!\n2016/12/26 22:29:31 INFO     ▶ 0005 Writing to output: /home/beeuser/.go/src/github.com/user/my-web-app/my-web-app.tar.gz\n2016/12/26 22:29:31 INFO     ▶ 0006 Excluding relpath prefix: .\n2016/12/26 22:29:31 INFO     ▶ 0007 Excluding relpath suffix: .go:.DS_Store:.tmp\n2016/12/26 22:29:32 SUCCESS  ▶ 0008 Application packed!\n```\n\nFor more information on the usage, run `bee help pack`.\n\n### bee rs \nInspired by makefile / npm scripts.\n  Run script allows you to run arbitrary commands using Bee.\n  Custom commands are provided from the \"scripts\" object inside bee.json or Beefile.\n\n  To run a custom command, use: $ bee rs mycmd ARGS\n\n```bash\n$ bee help rs\n\nUSAGE\n  bee rs\n\nDESCRIPTION\n  Run script allows you to run arbitrary commands using Bee.\n  Custom commands are provided from the \"scripts\" object inside bee.json or Beefile.\n\n  To run a custom command, use: $ bee rs mycmd ARGS\n  \nAVAILABLE SCRIPTS\n  gtest\n      APP_ENV=test APP_CONF_PATH=$(pwd)/conf go test -v -cover\n  gtestall\n      APP_ENV=test APP_CONF_PATH=$(pwd)/conf go test -v -cover $(go list ./... | grep -v /vendor/)\n\n```\n\n*Run your scripts with:*\n```$ bee rs gtest tests/*.go```\n```$ bee rs gtestall```\n\n\n### bee api\n\nTo create a Beego API application:\n\n```bash\n$ bee api my-api\n______\n| ___ \\\n| |_/ /  ___   ___\n| ___ \\ / _ \\ / _ \\\n| |_/ /|  __/|  __/\n\\____/  \\___| \\___| v2.0.0\n2020/09/14 22:35:11 INFO     ▶ 0001 generate api project support go modules.\n2020/09/14 22:35:11 INFO     ▶ 0002 Creating API...\n\tcreate\t /Users/beeuser/code/learn/my-api/go.mod\n\tcreate\t /Users/beeuser/code/learn/my-api\n\tcreate\t /Users/beeuser/code/learn/my-api/conf\n\tcreate\t /Users/beeuser/code/learn/my-api/controllers\n\tcreate\t /Users/beeuser/code/learn/my-api/tests\n\tcreate\t /Users/beeuser/code/learn/my-api/conf/app.conf\n\tcreate\t /Users/beeuser/code/learn/my-api/models\n\tcreate\t /Users/beeuser/code/learn/my-api/routers/\n\tcreate\t /Users/beeuser/code/learn/my-api/controllers/object.go\n\tcreate\t /Users/beeuser/code/learn/my-api/controllers/user.go\n\tcreate\t /Users/beeuser/code/learn/my-api/tests/default_test.go\n\tcreate\t /Users/beeuser/code/learn/my-api/routers/router.go\n\tcreate\t /Users/beeuser/code/learn/my-api/models/object.go\n\tcreate\t /Users/beeuser/code/learn/my-api/models/user.go\n\tcreate\t /Users/beeuser/code/learn/my-api/main.go\n2020/09/14 22:35:11 SUCCESS  ▶ 0003 New API successfully created!\n```\n\nFor more information on the usage, run `bee help api`.\n\n### bee hprose\n\nTo create an Hprose RPC application based on Beego:\n\n```bash\n$ bee hprose my-rpc-app\n______\n| ___ \\\n| |_/ /  ___   ___\n| ___ \\ / _ \\ / _ \\\n| |_/ /|  __/|  __/\n\\____/  \\___| \\___| v2.0.0\n2020/09/14 22:36:39 INFO     ▶ 0001 generate api project support go modules.\n2020/09/14 22:36:39 INFO     ▶ 0002 Creating Hprose application...\n\tcreate\t /Users/beeuser/code/learn/my-rpc-app/go.mod\n\tcreate\t /Users/beeuser/code/learn/my-rpc-app\n\tcreate\t /Users/beeuser/code/learn/my-rpc-app/conf\n\tcreate\t /Users/beeuser/code/learn/my-rpc-app/conf/app.conf\n\tcreate\t /Users/beeuser/code/learn/my-rpc-app/models\n\tcreate\t /Users/beeuser/code/learn/my-rpc-app/models/object.go\n\tcreate\t /Users/beeuser/code/learn/my-rpc-app/models/user.go\n\tcreate\t /Users/beeuser/code/learn/my-rpc-app/main.go\n2020/09/14 22:36:39 SUCCESS  ▶ 0003 New Hprose application successfully created!\n```\n\nFor more information on the usage, run `bee help hprose`.\n\n### bee bale\n\nTo pack all the static files into Go source files:\n\n```bash\n$ bee bale\n______\n| ___ \\\n| |_/ /  ___   ___\n| ___ \\ / _ \\ / _ \\\n| |_/ /|  __/|  __/\n\\____/  \\___| \\___| v2.0.0\n2020/09/14 22:37:56 SUCCESS  ▶ 0001 Baled resources successfully!\n```\n\nFor more information on the usage, run `bee help bale`.\n\n### bee migrate\n\nFor database migrations, use `bee migrate`.\n\nFor more information on the usage, run `bee help migrate`.\n\n### bee generate\n\nBee also comes with a source code generator which speeds up the development.\n\nFor example, to generate a new controller named `hello`:\n\n```bash\n$ bee generate controller hello\n______\n| ___ \\\n| |_/ /  ___   ___\n| ___ \\ / _ \\ / _ \\\n| |_/ /|  __/|  __/\n\\____/  \\___| \\___| v2.0.0\n2020/09/14 22:38:44 INFO     ▶ 0001 Using 'Hello' as controller name\n2020/09/14 22:38:44 INFO     ▶ 0002 Using 'controllers' as package name\n\tcreate\t /Users/beeuser/code/learn/my-api/controllers/hello.go\n2020/09/14 22:38:44 SUCCESS  ▶ 0003 Controller successfully generated!\n```\n\nFor more information on the usage, run `bee help generate`.\n\n### bee dockerize\n\nBee also helps you dockerize your Beego application by generating a Dockerfile and a docker-compose.yaml file.\n\nFor example, to generate a Dockerfile with `golang:1.20.1` baseimage and exposing port `9000`:\n\n```bash\n$ bee dockerize -baseimage=golang:1.20.1 -expose=9000\n______\n| ___ \\\n| |_/ /  ___   ___\n| ___ \\ / _ \\ / _ \\\n| |_/ /|  __/|  __/\n\\____/  \\___| \\___| v2.0.4\n2023/05/02 21:03:05 INFO     ▶ 0001 Generating Dockerfile and docker-compose.yaml...\n2023/05/02 21:03:05 SUCCESS  ▶ 0002 Dockerfile generated.\n2023/05/02 21:03:05 SUCCESS  ▶ 0003 docker-compose.yaml generated.\n```\n\nFor more information on the usage, run `bee help dockerize`.\n\n### bee dlv\n\nBee can also help with debugging your application. To start a debugging session:\n\n```bash\n______\n| ___ \\\n| |_/ /  ___   ___\n| ___ \\ / _ \\ / _ \\\n| |_/ /|  __/|  __/\n\\____/  \\___| \\___| v2.0.0\n2020/09/14 22:40:12 INFO     ▶ 0001 Starting Delve Debugger...\nType 'help' for list of commands.\n(dlv) break main.main\nBreakpoint 1 set at 0x40100f for main.main() ./main.go:8\n\n(dlv) continue\n> main.main() ./main.go:8 (hits goroutine(1):1 total:1) (PC: 0x40100f)\n     3:\timport (\n     4:\t\t_ \"github.com/user/myapp/routers\"\n     5:\t\tbeego \"github.com/beego/beego/v2/server/web\"\n     6:\t)\n     7:\t\n=>   8:\tfunc main() {\n     9:\t\tbeego.Run()\n    10:\t}\n    11:\n```\n\nFor more information on the usage, run `bee help dlv`.\n\n### bee pro \n\n#### bee pro toml\n\nTo create a beegopro.toml file\n\n```bash\n$ bee pro toml\n2020/09/14 22:51:18 SUCCESS  ▶ 0001 Successfully created file beegopro.toml\n2020/09/14 22:51:18 SUCCESS  ▶ 0002 Toml successfully generated!\n```\n\n#### bee pro gen\n\nSource code generator by beegopro.toml\n\n```bash\n$ bee pro gen\n2020/09/14 23:01:13 INFO     ▶ 0001 Create /Users/beeuser/.beego/beego-pro Success!\n2020/09/14 23:01:13 INFO     ▶ 0002 git pull /Users/beeuser/.beego/beego-pro\n2020/09/14 23:01:15 INFO     ▶ 0003 Using 'example' as name\n2020/09/14 23:01:15 INFO     ▶ 0004 Using 'example' as package name from controllers\n2020/09/14 23:01:15 INFO     ▶ 0005 create file '/Users/beeuser/code/learn/my-web-app/controllers/bee_default_controller.go' from controllers\n2020/09/14 23:01:15 INFO     ▶ 0006 Using 'example' as name\n2020/09/14 23:01:15 INFO     ▶ 0007 Using 'example' as package name from controllers\n2020/09/14 23:01:15 INFO     ▶ 0008 create file '/Users/beeuser/code/learn/my-web-app/controllers/example.go' from controllers\n2020/09/14 23:01:15 INFO     ▶ 0009 Using 'example' as name\n2020/09/14 23:01:15 INFO     ▶ 0010 Using 'example' as package name from models\n2020/09/14 23:01:15 INFO     ▶ 0011 create file '/Users/beeuser/code/learn/my-web-app/models/bee_default_model.go' from models\n2020/09/14 23:01:15 INFO     ▶ 0012 Using 'example' as name\n2020/09/14 23:01:15 INFO     ▶ 0013 Using 'example' as package name from models\n2020/09/14 23:01:15 INFO     ▶ 0014 create file '/Users/beeuser/code/learn/my-web-app/models/example.go' from models\n2020/09/14 23:01:15 INFO     ▶ 0015 Using 'example' as name\n2020/09/14 23:01:15 INFO     ▶ 0016 Using 'example' as package name from routers\n2020/09/14 23:01:15 INFO     ▶ 0017 create file '/Users/beeuser/code/learn/my-web-app/routers/example.go' from routers\n2020/09/14 23:01:15 INFO     ▶ 0018 Using 'example' as name\n2020/09/14 23:01:15 INFO     ▶ 0019 Using 'example' as package name from example\n2020/09/14 23:01:15 INFO     ▶ 0020 create file '/Users/beeuser/code/learn/my-web-app/ant/src/pages/example/list.tsx' from example\n2020/09/14 23:01:15 INFO     ▶ 0021 Using 'example' as name\n2020/09/14 23:01:15 INFO     ▶ 0022 Using 'example' as package name from example\n2020/09/14 23:01:15 INFO     ▶ 0023 create file '/Users/beeuser/code/learn/my-web-app/ant/src/pages/example/formconfig.tsx' from example\n2020/09/14 23:01:15 INFO     ▶ 0024 Using 'example' as name\n2020/09/14 23:01:15 INFO     ▶ 0025 Using 'example' as package name from example\n2020/09/14 23:01:15 INFO     ▶ 0026 create file '/Users/beeuser/code/learn/my-web-app/ant/src/pages/example/create.tsx' from example\n2020/09/14 23:01:15 INFO     ▶ 0027 Using 'example' as name\n2020/09/14 23:01:15 INFO     ▶ 0028 Using 'example' as package name from example\n2020/09/14 23:01:15 INFO     ▶ 0029 create file '/Users/beeuser/code/learn/my-web-app/ant/src/pages/example/update.tsx' from example\n2020/09/14 23:01:15 INFO     ▶ 0030 Using 'example' as name\n2020/09/14 23:01:15 INFO     ▶ 0031 Using 'example' as package name from example\n2020/09/14 23:01:15 INFO     ▶ 0032 create file '/Users/beeuser/code/learn/my-web-app/ant/src/pages/example/info.tsx' from example\n2020/09/14 23:01:15 INFO     ▶ 0033 Using 'example' as name\n2020/09/14 23:01:15 INFO     ▶ 0034 Using 'example' as package name from sql\n2020/09/14 23:01:15 INFO     ▶ 0035 create file '/Users/beeuser/code/learn/my-web-app/sql/example_up.sql' from sql\n2020/09/14 23:01:15 INFO     ▶ 0036 2020/09/14 23:01:15 INFO     ▶ 0001 db exec info ./sql/example_up.sql\n2020/09/14 23:01:15 SUCCESS  ▶ 0002 Migration successfully generated!\n2020/09/14 23:01:15 INFO     ▶ 0037 Using 'example' as name\n2020/09/14 23:01:15 INFO     ▶ 0038 Using 'example' as package name from sql\n2020/09/14 23:01:15 INFO     ▶ 0039 create file '/Users/beeuser/code/learn/my-web-app/sql/example_down.sql' from sql\n2020/09/14 23:01:15 SUCCESS  ▶ 0040 Gen successfully generated!\n```\n\n#### \n## Shortcuts\n\nBecause you'll likely type these generator commands over and over, it makes sense to create aliases:\n\n```bash\n# Generator Stuff\nalias g:a=\"bee generate appcode\"\nalias g:m=\"bee generate model\"\nalias g:c=\"bee generate controller\"\nalias g:v=\"bee generate view\"\nalias g:mi=\"bee generate migration\"\n```\n\nThese can be stored , for example, in your `~/.bash_profile` or `~/.bashrc` files.\n\n## Help\n\nTo print more information on the usage of a particular command, use `bee help <command>`.\n\nFor instance, to get more information about the `run` command:\n\n```bash\n$ bee help run\nUSAGE\n  bee run [appname] [watchall] [-main=*.go] [-downdoc=true]  [-gendoc=true] [-vendor=true] [-e=folderToExclude]  [-tags=goBuildTags] [-runmode=BEEGO_RUNMODE]\n\nOPTIONS\n  -downdoc\n      Enable auto-download of the swagger file if it does not exist.\n\n  -e=[]\n      List of paths to exclude.\n\n  -gendoc\n      Enable auto-generate the docs.\n\n  -main=[]\n      Specify main go files.\n\n  -runmode\n      Set the Beego run mode.\n\n  -tags\n      Set the build tags. See: https://golang.org/pkg/go/build/\n\n  -vendor=false\n      Enable watch vendor folder.\n\nDESCRIPTION\n  Run command will supervise the filesystem of the application for any changes, and recompile/restart it.\n```\n\n## Contributing\nBug reports, feature requests and pull requests are always welcome.\n\nWe work on two branches: `master` for stable, released code and `develop`, a development branch.\nIt might be important to distinguish them when you are reading the commit history searching for a feature or a bugfix,\nor when you are unsure of where to base your work from when contributing.\n\n### Found a bug?\n\nPlease [submit an issue][new-issue] on GitHub and we will follow up.\nEven better, we would appreciate a [Pull Request][new-pr] with a fix for it!\n\n- If the bug was found in a release, it is best to base your work on `master` and submit your PR against it.\n- If the bug was found on `develop` (the development branch), base your work on `develop` and submit your PR against it.\n\nPlease follow the [Pull Request Guidelines][new-pr].\n\n### Want a feature?\n\nFeel free to request a feature by [submitting an issue][new-issue] on GitHub and open the discussion.\n\nIf you'd like to implement a new feature, please consider opening an issue first to talk about it.\nIt may be that somebody is already working on it, or that there are particular issues that you should be aware of\nbefore implementing the change. If you are about to open a Pull Request, please make sure to follow the [submissions guidelines][new-pr].\n\n## Submission Guidelines\n\n### Submitting an issue\n\nBefore you submit an issue, search the archive, maybe you will find that a similar one already exists.\n\nIf you are submitting an issue for a bug, please include the following:\n\n- An overview of the issue\n- Your use case (why is this a bug for you?)\n- The version of `bee` you are running (include the output of `bee version`)\n- Steps to reproduce the issue\n- Eventually, logs from your application.\n- Ideally, a suggested fix\n\nThe more information you give us, the more able to help we will be!\n\n### Submitting a Pull Request\n\n- First of all, make sure to base your work on the `develop` branch (the development branch):\n\n```\n  # a bugfix branch for develop would be prefixed by fix/\n  # a bugfix branch for master would be prefixed by hotfix/\n  $ git checkout -b feature/my-feature develop\n```\n\n- Please create commits containing **related changes**. For example, two different bugfixes should produce two separate commits.\nA feature should be made of commits splitted by **logical chunks** (no half-done changes). Use your best judgement as to\nhow many commits your changes require.\n\n- Write insightful and descriptive commit messages. It lets us and future contributors quickly understand your changes\nwithout having to read your changes. Please provide a summary in the first line (50-72 characters) and eventually,\ngo to greater lengths in your message's body. A good example can be found in [Angular commit message format](https://github.com/angular/angular.js/blob/master/DEVELOPERS.md#commit-message-format).\n\n- Please **include the appropriate test cases** for your patch.\n\n- Make sure all tests pass before submitting your changes.\n\n- Rebase your commits. It may be that new commits have been introduced on `develop`.\nRebasing will update your branch with the most recent code and make your changes easier to review:\n\n  ```\n  $ git fetch\n  $ git rebase origin/develop\n  ```\n\n- Push your changes:\n\n  ```\n  $ git push origin -u feature/my-feature\n  ```\n\n- Open a pull request against the `develop` branch.\n\n- If we suggest changes:\n  - Please make the required updates (after discussion if any)\n  - Only create new commits if it makes sense. Generally, you will want to amend your latest commit or rebase your branch after the new changes:\n\n    ```\n    $ git rebase -i develop\n    # choose which commits to edit and perform the updates\n    ```\n\n  - Re-run the tests\n  - Force push to your branch:\n\n    ```\n    $ git push origin feature/my-feature -f\n    ```\n\n[new-issue]: #submitting-an-issue\n[new-pr]: #submitting-a-pull-request\n\n## Licence\n\n```text\nCopyright 2020 bee authors\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n",
    "thumbnail": "/images/bee.jpeg"
  },
  "CatChess": {
    "id": "CatChess",
    "category": "project",
    "title": "CatChess",
    "description": "Autochess on web, with cats!",
    "tags": [
      "express",
      "game",
      "javascript",
      "threejs",
      "web",
      "webgame"
    ],
    "date_started": "2023.12.01",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/CatChess",
    "content": "## 실시간 3D 웹 대전 게임\n\n### Cat Chess home [링크](http://catchess.ap-northeast-2.elasticbeanstalk.com/)\n\n![image](https://github.com/wndgur2/CatChess/assets/65120311/127f7c91-6917-416a-accb-38428a96945a)\n\n![image](https://github.com/wndgur2/CatChess/assets/65120311/2dedbbe7-e11c-4fd4-885e-4791b6e3b3cb)\n\n### 0.2.9 Demo video [링크](https://www.youtube.com/watch?v=07bcqwNsibg&t=314s)\n\n![0:2:8capt](https://github.com/wndgur2/CatChess/assets/65120311/713951bb-b64e-4fb0-92ce-ae3a41c3149b)\n\n### 0.3.4 스크린샷\n\n<img width=\"1440\" alt=\"Screenshot 2024-12-12 at 13 53 38\" src=\"https://github.com/user-attachments/assets/c83d8e9c-acf6-47d8-bd14-163b70201edd\" />\n\n### 0.3.2 스크린샷\n\n![Screenshot 2024-04-13 at 0 48 39 Large](https://github.com/wndgur2/CatChess/assets/65120311/eb590ed3-3648-44cf-9023-5c222df2dde4)\n\n### Figma: 기획, 화면 설계 [링크](https://www.figma.com/file/UTLu1K2qiGxK4XhZFt7q1h/catChess?type=design&node-id=0%3A1&mode=design&t=4keMP4w5z6JixYat-1)\n\n![image](https://github.com/wndgur2/CatChess/assets/65120311/32380036-5096-427a-83c6-a50344274caa)\n\n### Drawio: 로직 설계 [링크](https://drive.google.com/file/d/1AHRsH_nBJkpwJ-txst1yUMQeNCm4xSDl/view?usp=drive_link)\n\n![image](https://github.com/wndgur2/CatChess/assets/65120311/26d4e8b4-8e0a-4c7e-8c68-ebda08d2b904)\n\n### 주요 스택: Nodejs, Express, Three.js\n\n### 서버측 주요 모듈\n\n- Player.js: 세션 정보, 체력, 돈, 보유 유닛 등 게임 데이터와 유저 데이터를 관리\n- Game.js: 매칭된 플레이어 2명의 정보, 해당 게임의 stage, state(준비, 전투, 결과, 대기) flow 담당\n- Unit.js: 각 유닛의 스탯, 스킬 등 관리\n- Battle.js: 전투 로직 수행\n\n### 클라이언트측 주요 모듈\n\n- UI.js: event listeners, element 변화 관리\n- Painter.js: 3D display/interface 담당\n- User.js: authentication 관리\n\n### 페이지 구조\n\n- page.pug: google auth를 제외한 모든 어플리케이션 기능을 담당\n- # home/#game 으로 게임 시작 전/후를 나눔\n\n## 기록\n\n### ~ 2024.12.09\n\nDONE\n\n- 접속 log 남기기\n- 3D models 추가\n\nTODO\n\n- 3D models preloading\n\n### 2024.1.14\n\nDONE\n\n- socket 세션 관리를 통해 실시간 온라인 로직 구현\n- Player, Game, Unit 모듈을 중심으로 게임 로직 구현\n- 1인 개발 시작\n- react에서 express로 프레임워크 변경\n\n## 1.15 ~ 1.28\n\n- 3D display 구현 시작\n- socket message type 세분화(update board/queue)\n\n- 3d display(boards, units)\n\n- 유닛 이동, 체력바 구현\n\n- 드래그 이벤트 리스너 구현\n- 서버 로직 개선\n\n- 아이템 부여 구현\n\n- blood effect 적용\n\n- 아이템 팝업 설명, 유닛 판매, 유닛 움직임 애니메이션 구현\n\n- unit info UI 개선\n\n- giveItem bug fix\n\n- UI 개선\n\n- 시너지 구현\n\n- 단축키 구현\n\n- 스킬 구현\n\n### 1.29 서버-클라이언트 통신 방식 개선 시도\n\n## 1.29 ~ 2.2\n\n- Unit 참조 시, 좌표 참조형 방식에서 unit.uid 참조형 방식으로 변경을 시도함.<br>\n  -> client 측에서 game state에 따라 같은 Unit을 다양한 목적으로 활용하고 있었다는 것을 간과함. (목적이 모호했음)<br>\n  -> 한 인스턴스를 참조하게 되면서 다양한 목적을 하나의 인스턴스가 해결해야 하기 때문에 복잡한 코드가 마구 생겨버림.<br>\n  -> 결국 처음에 의도한 간결한 알고리즘이 되지 않아 개선을 철회함.<br>\n  -> 이후, client에서 같은 uid의 여러 Unit을 다루면서 서버와 클라이언트가 uid로 소통할 수 있게 개선\n\n배운 점: 많은 코드에 손이 가는, 통신 구조 변경과 같은 수정 사항은 그 여파를 고려해보고, 이 시스템을 처음 설계한 의도와 걸맞는지 판단한 후에 적용하기\n\n- uid 적용\n- 테스트\n\n### 2.11\n\nDONE\n\n- aws beanstalk(ec2) 배포.\n\nTODO\n\n- 기획, mesh, UI, sound\n\n## ~ commit history 참고 ~\n\n### 2.26\n\n로직은 웬만큼 다 한 것 같다. 스킬 제외\n\nDONE\n\n- AWS 지역 스톡홀롬에서 서울로 변경: 응답 속도 개선(1초 이상 -> 거의 실시간)\n- Home 화면 UI 개선: frame, footer, \"CAT CHESS\" logo 등\n\nTODO\n\n- modal UI 개선\n- in Game UI 개선\n\n### 2.27\n\nDONE\n\n- home UI 개선 ![0 1 0](https://github.com/wndgur2/CatChess/assets/65120311/0d7e2329-f187-4da7-bcf2-18816215912b)\n\n- modal UI 개선\n\n- modal close callback 구현\n\nTODO\n\n- ingame UI 개선 (inventory)\n- ~~surrender 구현~~\n\n### 2.29\n\nDONE\n\n- ingame UI 설계 figma\n- inventory UI 개선\n\nTODO\n\n- ingame UI 설계 확정 및 구현\n\n### 3.1\n\nDONE\n\n- ingame time, inventory UI 구현\n\n  ![game_0 1 5](https://github.com/wndgur2/CatChess/assets/65120311/4ab1ff4d-096e-41be-90a5-580d4c829940) ![home_modal_0 1 5](https://github.com/wndgur2/CatChess/assets/65120311/ae3e7135-5780-4260-920a-3cd58a25a09e) ![home2_0 1 5](https://github.com/wndgur2/CatChess/assets/65120311/8793fbc5-0ecc-47bb-8235-5f38a97912c4)\n\nTODO\n\n- ingame UI 개선(damage stastics, bottomWrapper, system btns)\n- Queens Gambit과 같은 Chess UX 구현 고민하기 (sound, visuality, functionality)\n\n### 3.2\n\nsound from pixaby?\n\nTODO\n\n- 홈 화면 ambient sound\n\n### 3.9\n\nDONE\n\n- shopList UI 개선\n\n![game_0 1 5_2](https://github.com/wndgur2/CatChess/assets/65120311/61045a95-1877-4126-bd05-22ccf3d26ca4)\n\n- source (coin / Poeir) 추가\n\nTODO(big)\n\n- 기획(item/cats)\n- 스킬 구현\n- 사운드 소스\n- 메인 페이지 이미지 소스\n\n### 3.10\n\nDONE\n\n- home Card elements 초안\n- synergy UI\n- synergy 소스 변경\n- NODE_ENV 활용\n\nTODO(big)\n\n- home 페이지 구현: Card Opener, 개요, Synergy 별 설명\n- Unit 기획\n- 스킬 구현\n- 사운드 소스\n\n### 3.11\n\nhome Card opener 구현 중, cat img와 desc를 불러오기 위해서, 모든 CATS를 받아와야 함.<br>\n이렇게 받아왔다면, Unit 인스턴스를 생성할 때, cat preset을 가져올 필요가 없음. (skill, synergies 등)\n\n아니면 현재 방식을 유지하는 방법으로, Unit 인스턴스를 활용해서 Card Opener를 구현하는 방법이 있다.\n\nDONE\n\n- Card opener 구현\n\n![0 1 7rec](https://github.com/wndgur2/CatChess/assets/65120311/5596ad44-7198-48ee-b8a2-9a2f274ac720)\n\nTODO\n\n- home 페이지 구현: 개요, Synergy 별 설명\n\n### 3.12\n\nDONE\n\n- Card opener 마무리, home content( country desciption ) 아웃라인\n\nTODO\n\n- 시작 시, 모든 유닛 desc 받아오기\n\n### 3.13\n\nDONE\n\n- data fetching 단계 추가\n\n### 3.14\n\nTODO\n\n- description에 Unit cards 추가\n- Creep 설명 추가 (Other creatures?)\n\n### 3.18\n\nTODO\n\n- unit design\n- KOREAN\n\n### 3.20\n\nTODO\n\n- Source fetch loading\n- Therme Units\n- Item\n- Skill\n\n### 3.21\n\nTO LEARN in free time\n\n- js document\n\nTODO\n\n- Threme Units << spellai coin 쌓이면\n- Unit detail design\n\nDONE\n\n- Source fetch loading\n- 인게임 UI 개선\n- 게임 튜토리얼 작성\n\n### 3.22\n\nTODO\n\n- 세계관 작성\n\n- MP bar\n\n- KOREAN\n- Push alarm\n- intersection observer\n- beacon\n\nDONE\n\n- 세계관 개요, Pado 도입부 작성\n- DB 연결\n\nNOTE\n\n- 시간에 쫓기는 게 좀.\n\n### 3.23\n\n```\nNOTE\n\nencryption\nhttps route5s DNS\nwindow.crypto.subtle\nAES symmetric, RSA asymmetric\n\n로그인 안전에 대한 내용\nclient-암호화 -> server-복호화/해싱 -> db\n==>> google open authentication\n\nCat editor : 정형화된 변수들로 만드는 cat img/render\n```\n\nDONE\n\n- Sign in UI\n\n### 3.25\n\nDONE\n\n- google OAuth. token handling\n- KST. log configuartion in .ebextensions\n\n### 3.26\n\nDONE\n\n- 디렉토리 구조 변경\n- packaging for AWS 자동화\n- 0.2.4 배포\n- User schema 작성\n- Supported Device check logic\n\n### 3.27\n\nDONE\n\n- User Info UI\n- Google email로 User 조회/생성\n- Therme Units source 입력\n- body-parser middleware\n\n  NOTE understanding of history & religion\n\nTODO\n\n- Painter 완성도 손보기\n- threejs(text display, cat model, range attack motion ...)\n- Skills\n- logging browser info in database.\n\n### 3.28\n\n### 3.29\n\nTODO\n\n- 게임 종료 화면\n- 첫 로그인이라면 greeting, local 기록 저장할지\n\nDONE\n\n- 로그인했다면, Player id를 email address로.\n- 게임 종료 시 결과 User DB에 저장\n- surrender 구현\n\n![image](https://github.com/wndgur2/CatChess/assets/65120311/13147a8f-1c7e-4dc6-a6dc-8920535836b8) ![Screenshot 2024-03-31 at 16 29 58](https://github.com/wndgur2/CatChess/assets/65120311/e84ca6e8-b0a2-45bf-ade5-d3f8b2b2c843)\n\n### 3.30\n\nDONE\n\n- db에 접속 log 남기기 (device info)\n\nTODO\n\n- 유저 순위, 시너지별 순위?\n\n### 4.4\n\nenhancements\n\n- consts (images, text): item image korean\n\n- UI home/ingame ingame button styles language detection, setting level visibility item combination unitInfo UI winning, losing streak skill effect(text: like WOW)\n\n- home 제국 wrapper 높이 지정 후 배경 다르게\n\n### 4.5\n\n언어 설정 시도\n\nDONE\n\n- home setting UI\n- server rendering language\n\n- app.js middleware 설정\n\nclient 측 언어 설정 실패 data fetch api 수정해야 -> data 구조를 바꿔야할 수도 있음. units 테이블에서 desc를 분리해서 언어별로 불러올 수 있도록\n\n### 4.6\n\nTODO\n\n- 서버측에서 언어별 데이터 보내기\n\n방법 1\\. 컨트롤러에서 랜더링된 페이지를 클라이언트한테 보낼 때, 언어 정보를 쿠키에 넣어 보낸다. 후에 클라이언트에서 서버에 언어에 맞는 데이터를 요청\n\n방법 2\\. 서버에서 각 클라이언트의 언어 정보를 관리한다. 해당 클라이언트로부터 데이터 요청이 왔을 때 해당 언어에 해당하는 데이터를 보낸다. ==> 관리하기가 복잡\n\n방법 3\\. 데이터 패치는 모든 언어를 진행하고, 클라이언트 내부에서 조건문으로 처리한다. -> 네트워크 비효율, 코딩 비효율\n\n- 어제 한거처럼 하되, 데이터 패치를 언어별로 나누어서, 쿠키 관리 잘 해서 재시도\n\nDONE\n\n- 언어 설정\n\n> 브라우저 관리 인터페이스의 필요성 UI에서 해야하나?\n\nTODO\n\n- 규빈 피드백: 메인 페이지 card opener 개선 -> 공간의 중요도에 비해 정보량이나 보는 즐거움이 적음\n- mobile UI 개선\n- 글이 아직도 너무 많다.\n\n-! ingame 언어 불러오기 설정 안함: Error\n\n### 4.7\n\nDONE\n\n- 인게임 언어 설정 반영, 한글 추가\n- 튜토리얼 UI, 영어\n- 인게임 버튼 배경 개선\n\n### 4.8\n\n자잘한 것만 건드리고, 큰 개선을 미루고 있었다.\n\n```\n큰 개선\n\n- 3d model\n- 스킬 텍스트\n```\n\nTODO\n\n- threejs 개선\n\nDOING\n\n- cat modeling function\n\nDONE\n\n- OutlineEffect\n\n### 4.9\n\nDONE\n\n- 고양이 모델 적용\n\nTODO\n\n- 고양이 모델 rotation/position 정상화\n- skill text display\n- mana bar\n\n### 4.10\n\nON\n\n- cat texture\n\nDONE\n\n- rotation bugfix\n- mana bar\n- item bug fix\n\n### 4.11\n\nDONE\n\n- 이미지 경량화\n\nTODO\n\n- 리팩토링\n- cat texture\n\n### 4.12\n\nDONE\n\n- language 별 text 가져오는 함수, text constants\n- load background models\n\nTODO\n\n- orbit control\n- Cat Animation\n- more skills\n- show Unit Info UI 개선\n- background textures size 경량화\n\n### 4.13\n\nTODO\n\n- cat texture\n- 게임 진행 안내 시의성\n\nDONE\n\n- dynamic mana gen\n\n### 4.16\n\n게임 시작 후 크롬 안 꺼지는 버그\n\n### 4.17\n\n시너지 description 언어 설정\n",
    "thumbnail": "/images/catchess.jpeg"
  },
  "cheese": {
    "id": "cheese",
    "category": "project",
    "title": "cheese",
    "description": "야외 포토 부스 서비스",
    "tags": [
      "mysql",
      "nextjs",
      "spring",
      "tensorflow",
      "vercel",
      "webrtc"
    ],
    "date_started": "2023.02.20",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/cheese",
    "content": "# [🧀 치즈한장](https://cheesee.vercel.app/)  \n* 서버 배포가 중단되었습니다. (api 작동하지 않음)  \n### 모바일 웹을 활용한 야외 포토 부스 서비스  \nNextjs, Java Spring, FastAPI, MySQL, Redis, Tensorflow, WebRTC  \n\n<img width=\"673\" alt=\"치즈한장 패널\" src=\"https://github.com/wndgur2/cheese/assets/65120311/614beae2-f2bb-4e31-8ae4-9e786b37f6a9\">\n\n## 서비스 개요도\n\n<img width=\"1029\" alt=\"image\" src=\"https://github.com/wndgur2/cheese/assets/65120311/a3dd91c5-5950-4cdb-91e6-e186e530798c\">\n\n## 시스템 구성도\n\n<img width=\"1214\" alt=\"image\" src=\"https://github.com/wndgur2/cheese/assets/65120311/d20a5c2e-e8e6-4de4-a848-55491c992dc6\">\n\n## [Demo video](https://www.youtube.com/watch?v=r800Of946go&t=201s)\n\n<img width=\"1440\" alt=\"image\" src=\"https://github.com/wndgur2/cheese/assets/65120311/c4041c34-6f92-4829-9f5f-19da8c8e5b4d\">\n\n## [Figma 화면설계](https://www.figma.com/file/UQmLtpMRRX1n2vbjDFNDNM/CHEESE?type=design&node-id=0%3A1&mode=design&t=XcYpFvnlMULj78eG-1)\n\n<img width=\"75%\" alt=\"Screenshot 2024-04-12 at 23 46 10\" src=\"https://github.com/wndgur2/cheese/assets/65120311/974f3957-cd20-4315-8db0-93c31aee44d0\">\n<img width=\"75%\" alt=\"Screenshot 2024-04-12 at 23 46 02\" src=\"https://github.com/wndgur2/cheese/assets/65120311/d2e8fcc4-c170-480e-a72a-0adb0935f28a\">\n<img width=\"75%\" alt=\"Screenshot 2024-04-12 at 23 46 16\" src=\"https://github.com/wndgur2/cheese/assets/65120311/7dc88432-a075-474f-8f0a-ce070dc14d09\">\n\n## [REST API 설계](https://docs.google.com/document/d/11c5ff5nQKbCjvw7g00swTiHJU6qSiivBfIiWF2CWOoc/edit?usp=sharing)\n\n<img width=\"683\" alt=\"image\" src=\"https://github.com/wndgur2/cheese/assets/65120311/67f50ae5-4e51-4678-a7f5-4baf9bc62078\">\n\n## [ERD](https://drive.google.com/file/d/1OM6V3gv4ZvNzaFMMej9JU_6k1JO8n7Eh/view?usp=sharing)\n\n<img width=\"961\" alt=\"Screenshot 2024-04-20 at 14 35 41\" src=\"https://github.com/wndgur2/cheese/assets/65120311/5b7b9fc7-a013-4dd5-bb82-9fd2d4e39caa\">\n\n## [CD](https://drive.google.com/file/d/1ErVFMeV1rfW0me8juUYVYhiNe4JGESD8/view?usp=sharing)\n\n<img width=\"1104\" alt=\"image\" src=\"https://github.com/wndgur2/cheese/assets/65120311/803f3cf4-8845-4060-87af-b92701bb10d0\">\n",
    "thumbnail": "/images/cheese.jpeg"
  },
  "cheese_branch_device": {
    "id": "cheese_branch_device",
    "category": "project",
    "title": "cheese_branch_device",
    "description": "",
    "tags": [],
    "date_started": "2023.11.12",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/cheese_branch_device",
    "content": "# cheese_branch_device\n\n치즈한장 지점 디바이스를 위한 정적 웹사이트.  \n  \nbranch_id가 2인 지점의 디바이스 코드.  \n",
    "thumbnail": "/images/cheese_branch_device.jpeg"
  },
  "Cheese_Client": {
    "id": "Cheese_Client",
    "category": "project",
    "title": "Cheese_Client",
    "description": "치즈한장 nextjs",
    "tags": [
      "nextjs",
      "vercel"
    ],
    "date_started": "2024.04.24",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/Cheese_Client",
    "content": "# 🧀 치즈한장 프론트엔드\n\n![Next JS](https://img.shields.io/badge/Next-black?style=for-the-badge&logo=next.js&logoColor=white)\n\n[치즈한장 통합 레포지토리](https://github.com/wndgur2/cheese/)\n",
    "thumbnail": "/images/cheese_client.jpeg"
  },
  "Cheese_Server": {
    "id": "Cheese_Server",
    "category": "project",
    "title": "Cheese_Server",
    "description": "Java spring server for Cheese project",
    "tags": [
      "aws-ec2",
      "aws-rds-mysql",
      "docker",
      "spring"
    ],
    "date_started": "2024.04.21",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/Cheese_Server",
    "content": "<h1 align=\"center\">\n  🧀 치즈한장 백엔드\n</h1>\n<h3 align=\"center\">\n  Java Spring, Docker, AWS EC2(elastic beanstalk), RDS(MySQL), Tomcat\n</h3>\n\n<p align='center'>\n  Public Docker Image: leejunghyeok/cheese-redis:1.2\n</p>\n\n## 서버, DB 배포 기록\n\n<details>\n  <summary><em>Cloudtype 배포 (중지됨)</em></summary>\n\n### 4.23 cloudtype 백엔드 배포\n\n-   mvn package: ROOT.war 생성\n\n-   pull tomcat 9.0.88 image with docker\n\n-   build new docker image with ROOT.war in tomcat/webapps\n\n-   Error에 따라 cheese image의 config/properties files 수정\n\n-   linux/amd64 platform으로 docker hub에 push\n\n-   Cloudtype에 image tag명 (leejunghyeok/cheese:1.4)으로 Conatiner 구동\n\n</br>\n\n### 4.24 cloudtype MariaDB 배포, 연동\n\n-   Mysql Workbench에서 기존 local database의 structure/data export\n\n-   Cloudtype mariaDB template 생성 및 외부 TCP 접근 허용\n\n-   Mysql Workbench에서 Cloudtype mariaDB 연결\n\n-   Cloudtype mariaDB 연결된 Workbench에서 export했던 .sql import\n\n-   leejunghyeok/cheese:1.4의 application.properties 파일에 DB 주소, password 등 수정\n\n</br>\n</details>\n\n### 4.25 Cloudtype에서 AWS로\n\nCloudtype 가동 제한: 1일 1회 정지  \n-> AWS에 배포하기로 함\n\n### elastic beanstalk으로 docker container 가동하기\n\n-   새로운 환경 생성\n-   운영체제에 맞는 docker image build 및 hub에 push\n-   플랫폼 docker, 로컬 코드 Dockerrunner.aws.json 업로드\n\n</br>\n\nDockerrunner.aws.json\n\n```json\n{\n    \"AWSEBDockerrunVersion\": \"1\",\n    \"Image\": {\n        \"Name\": \"leejunghyeok/cheese:1.4\"\n    },\n    \"Ports\": [{ \"ContainerPort\": \"8080\" }]\n}\n```\n\nhttp://cheese.ap-northeast-2.elasticbeanstalk.com\n\n### AWS RDS 인스턴스 생성 (중지됨)\n\n-   보안 그룹 인바운드, 아웃바운드 설정\n\n-   로컬 Workbench에서 연결\n\n-   cheese db structure/data import\n\n-   Cheese/src/resource/application.properties DB url 수정\n\n-> 2024.04.28 비용 문제로 DB 배포 중지\n",
    "thumbnail": "/images/cheese_server.jpeg"
  },
  "client": {
    "id": "client",
    "category": "project",
    "title": "client",
    "description": "",
    "tags": [],
    "date_started": "2025.01.14",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/client",
    "content": "# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in your browser.\n\nThe page will reload when you make changes.\\\nYou may also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can't go back!**\n\nIf you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.\n\nYou don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `npm run build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)\n",
    "thumbnail": "/images/client.jpeg"
  },
  "fcm-test-client": {
    "id": "fcm-test-client",
    "category": "project",
    "title": "fcm-test-client",
    "description": "",
    "tags": [],
    "date_started": "2025.01.13",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/fcm-test-client",
    "content": "# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in your browser.\n\nThe page will reload when you make changes.\\\nYou may also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can't go back!**\n\nIf you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.\n\nYou don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `npm run build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)\n",
    "thumbnail": "/images/fcm-test-client.jpeg"
  },
  "goQuality-dev-contents": {
    "id": "goQuality-dev-contents",
    "category": "project",
    "title": "goQuality-dev-contents",
    "description": "{ 고퀄리티 :zap: 개발 컨텐츠 모음 }",
    "tags": [],
    "date_started": "2024.10.31",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/goQuality-dev-contents",
    "content": "\n\n[![author](https://img.shields.io/badge/author-Integerous-lightgray.svg?style=flat-square)](https://ryan-han.com)\n[![LICENSE](https://img.shields.io/dub/l/vibe-d.svg?style=flat-square)](https://github.com/Integerous/goQuality-dev-contents/blob/master/LICENSE)\n# { 고퀄리티 ⚡ 개발 컨텐츠 모음 }\n\n<div align=center>\n<a href=\"https://github.com/Integerous/goQuality-dev-contents/graphs/contributors\"><img src=\"https://opencollective.com/goquality-dev-contents/contributors.svg?width=720\"></a>\n</div>\n\n\n\n</br>\n\n## :mega: 소개\n>**유익한 개발 컨텐츠를 비추는 카메라** 입니다.  \n>좋은 컨텐츠를 널리 알리면 더 많이 소비되고, 더 많이 소비되면 더 많이 생산된다는 생각으로  \n>컨텐츠 생산자와 소비자 모두에게 유익한 선순환을 만들고자 합니다.  \n\n--------------------------------------\n### :family: 누구나 Contributor가 될 수 있습니다!\n>유익한 개발 관련 **글/영상/슬라이드**의 링크를 공유해주세요.\n\n방법 1 - 아래 :mailbox:**Queue** 최하단에 링크 추가하고 **Pull Request**  \n방법 2 - 카톡 오픈채팅방에 링크 공유 (참여코드: 1007)\n- [오픈채팅방 1](https://open.kakao.com/o/gx89mP0)\n- [오픈채팅방 2](https://open.kakao.com/o/gwCKgrOb)\n- [오픈채팅방 3](https://open.kakao.com/o/gz7Kiz3c)\n\n>단순 기사, 저작권법 위반 컨텐츠는 공유 금지!\n\n--------------------------------------\n</br>\n\n# :mag_right: 카테고리\n\n### 1. 개발 일반\n- [개발 문화/철학/방법론](https://github.com/Integerous/goQuality-dev-contents/tree/master/1.%20%EA%B0%9C%EB%B0%9C%20%EC%9D%BC%EB%B0%98#%EA%B0%9C%EB%B0%9C-%EB%AC%B8%ED%99%94%EC%B2%A0%ED%95%99%EB%B0%A9%EB%B2%95%EB%A1%A0)\n- [TDD & 테스트 관련](https://github.com/Integerous/goQuality-dev-contents/tree/master/1.%20%EA%B0%9C%EB%B0%9C%20%EC%9D%BC%EB%B0%98#tdd--%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B4%80%EB%A0%A8)\n- [DDD & CQRS](https://github.com/Integerous/goQuality-dev-contents/tree/master/1.%20%EA%B0%9C%EB%B0%9C%20%EC%9D%BC%EB%B0%98#ddd--cqrs)\n- [개발자 성장](https://github.com/Integerous/goQuality-dev-contents/tree/master/1.%20%EA%B0%9C%EB%B0%9C%20%EC%9D%BC%EB%B0%98#%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%84%B1%EC%9E%A5)\n- [비전공자 & 신입](https://github.com/Integerous/goQuality-dev-contents/tree/master/1.%20%EA%B0%9C%EB%B0%9C%20%EC%9D%BC%EB%B0%98#%EB%B9%84%EC%A0%84%EA%B3%B5%EC%9E%90--%EC%8B%A0%EC%9E%85)\n- [세미나/컨퍼런스 후기 및 발표자료](https://github.com/Integerous/goQuality-dev-contents/tree/master/1.%20%EA%B0%9C%EB%B0%9C%20%EC%9D%BC%EB%B0%98#%EC%84%B8%EB%AF%B8%EB%82%98%EC%BB%A8%ED%8D%BC%EB%9F%B0%EC%8A%A4-%ED%9B%84%EA%B8%B0-%EB%B0%8F-%EB%B0%9C%ED%91%9C%EC%9E%90%EB%A3%8C)\n- [취업 & 이직 & 면접 & 코딩테스트](https://github.com/Integerous/goQuality-dev-contents/tree/master/1.%20%EA%B0%9C%EB%B0%9C%20%EC%9D%BC%EB%B0%98#%EC%B7%A8%EC%97%85--%EC%9D%B4%EC%A7%81--%EB%A9%B4%EC%A0%91--%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8)\n\n### 2. 언어 & 프레임워크\n- [Java](https://github.com/Integerous/goQuality-dev-contents/tree/master/2.%20%EC%96%B8%EC%96%B4%20%26%20%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC#java)\n  - [JVM](https://github.com/Integerous/goQuality-dev-contents/tree/master/2.%20%EC%96%B8%EC%96%B4%20%26%20%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC#jvm)\n- [Kotlin](https://github.com/Integerous/goQuality-dev-contents/tree/master/2.%20%EC%96%B8%EC%96%B4%20%26%20%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC#kotlin)\n- [Spring framework](https://github.com/Integerous/goQuality-dev-contents/tree/master/2.%20%EC%96%B8%EC%96%B4%20%26%20%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC#spring-framework)\n  - [JPA & Hibernate](https://github.com/Integerous/goQuality-dev-contents/tree/master/2.%20%EC%96%B8%EC%96%B4%20%26%20%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC#jpa--hibernate)\n- [Javascript](https://github.com/Integerous/goQuality-dev-contents/tree/master/4.%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C#javascript-%EA%B4%80%EB%A0%A8)\n- [Python](https://github.com/Integerous/goQuality-dev-contents/tree/master/2.%20%EC%96%B8%EC%96%B4%20%26%20%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC#python)\n- [Go](https://github.com/Integerous/goQuality-dev-contents/tree/master/2.%20%EC%96%B8%EC%96%B4%20%26%20%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC#go)\n- [Rust](https://github.com/Integerous/goQuality-dev-contents/tree/master/2.%20%EC%96%B8%EC%96%B4%20%26%20%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC#rust)\n- [PHP](https://github.com/Integerous/goQuality-dev-contents/tree/master/2.%20%EC%96%B8%EC%96%B4%20%26%20%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC#php)\n\n### 3. 백엔드\n- [서버 & 클라우드 & 아키텍쳐](https://github.com/Integerous/goQuality-dev-contents/tree/master/3.%20%EB%B0%B1%EC%97%94%EB%93%9C#%EC%84%9C%EB%B2%84--%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C--%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90)\n  - [마이크로서비스 MSA](https://github.com/Integerous/goQuality-dev-contents/tree/master/3.%20%EB%B0%B1%EC%97%94%EB%93%9C#%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-msa)\n  - [레디스 Redis](https://github.com/Integerous/goQuality-dev-contents/tree/master/3.%20%EB%B0%B1%EC%97%94%EB%93%9C#%EB%A0%88%EB%94%94%EC%8A%A4-redis)\n  - [카프카 Kafka](https://github.com/Integerous/goQuality-dev-contents/tree/master/3.%20%EB%B0%B1%EC%97%94%EB%93%9C#%EC%B9%B4%ED%94%84%EC%B9%B4-kafka)\n- [데이터베이스 & SQL](https://github.com/Integerous/goQuality-dev-contents/tree/master/3.%20%EB%B0%B1%EC%97%94%EB%93%9C#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4--sql)\n- [운영체제 (리눅스, MacOS, 윈도우)](https://github.com/Integerous/goQuality-dev-contents/tree/master/3.%20%EB%B0%B1%EC%97%94%EB%93%9C#%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EB%A6%AC%EB%88%85%EC%8A%A4-macos-%EC%9C%88%EB%8F%84%EC%9A%B0)\n- [네트워크](https://github.com/Integerous/goQuality-dev-contents/tree/master/3.%20%EB%B0%B1%EC%97%94%EB%93%9C#%EB%84%A4%ED%8A%B8%EC%9B%8C%ED%81%AC)\n\n### 4. 프론트엔드\n- [프론트엔드 일반](https://github.com/Integerous/goQuality-dev-contents/tree/master/4.%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%9D%BC%EB%B0%98)\n- [Javascript 관련](https://github.com/Integerous/goQuality-dev-contents/tree/master/4.%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C#javascript-%EA%B4%80%EB%A0%A8)\n  - [Node.js & Deno](https://github.com/Integerous/goQuality-dev-contents/tree/master/4.%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C#nodejs--deno)\n  - [React.js](https://github.com/Integerous/goQuality-dev-contents/tree/master/4.%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C#reactjs)\n  - [Vue.js](https://github.com/Integerous/goQuality-dev-contents/tree/master/4.%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C#vuejs)\n  - [TypeScript](https://github.com/Integerous/goQuality-dev-contents/tree/master/4.%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C#typescript)\n- [디자인 & UI/UX & CSS](https://github.com/Integerous/goQuality-dev-contents/tree/master/4.%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C#%EB%94%94%EC%9E%90%EC%9D%B8--uiux--css)\n- [모바일 & iOS & 안드로이드](https://github.com/Integerous/goQuality-dev-contents/tree/master/4.%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C#%EB%AA%A8%EB%B0%94%EC%9D%BC--ios--%EC%95%88%EB%93%9C%EB%A1%9C%EC%9D%B4%EB%93%9C)\n\n### 5. 인프라 & DevOps\n- [도커 Docker](https://github.com/Integerous/goQuality-dev-contents/tree/master/5.%20%EC%9D%B8%ED%94%84%EB%9D%BC%20%26%20DevOps#%EB%8F%84%EC%BB%A4-docker)\n- [쿠버네티스 Kubernetes](https://github.com/Integerous/goQuality-dev-contents/tree/master/5.%20%EC%9D%B8%ED%94%84%EB%9D%BC%20%26%20DevOps#%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-kubernetes)\n\n### 6. 기타\n- [Git](https://github.com/Integerous/goQuality-dev-contents/tree/master/6.%20%EA%B8%B0%ED%83%80#git)\n- [웹 관련](https://github.com/Integerous/goQuality-dev-contents/tree/master/6.%20%EA%B8%B0%ED%83%80#%EC%9B%B9-%EA%B4%80%EB%A0%A8)\n- [REST & GraphQL](https://github.com/Integerous/goQuality-dev-contents/tree/master/6.%20%EA%B8%B0%ED%83%80#rest--graphql)\n- [알고리즘 & 자료구조](https://github.com/Integerous/goQuality-dev-contents/tree/master/6.%20%EA%B8%B0%ED%83%80#%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98--%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0)\n- [머신러닝 & 딥러닝 & AI](https://github.com/Integerous/goQuality-dev-contents/tree/master/6.%20%EA%B8%B0%ED%83%80#%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D--%EB%94%A5%EB%9F%AC%EB%8B%9D--ai)\n- [데이터 사이언스 & 데이터 엔지니어링](https://github.com/Integerous/goQuality-dev-contents/tree/master/6.%20%EA%B8%B0%ED%83%80#%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%82%AC%EC%9D%B4%EC%96%B8%EC%8A%A4--%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%97%94%EC%A7%80%EB%8B%88%EC%96%B4%EB%A7%81)\n- [블록체인](https://github.com/Integerous/goQuality-dev-contents/tree/master/6.%20%EA%B8%B0%ED%83%80#%EB%B8%94%EB%A1%9D%EC%B2%B4%EC%9D%B8)\n- [보안](https://github.com/Integerous/goQuality-dev-contents/tree/master/6.%20%EA%B8%B0%ED%83%80#%EB%B3%B4%EC%95%88)\n- [Vim](https://github.com/Integerous/goQuality-dev-contents/tree/master/6.%20%EA%B8%B0%ED%83%80#vim)\n- [기타](https://github.com/Integerous/goQuality-dev-contents/tree/master/6.%20%EA%B8%B0%ED%83%80#%EA%B8%B0%ED%83%80)\n\n\n--------------------------------------\n</br>\n\n# :mailbox: Queue\n>컨텐츠 링크를 가장 아래부터 추가해주세요. (이 곳에서 검증을 거친 후에 해당 카테고리로 이동됩니다!)\n\n- [쏘카 예약을 효율적으로 - 수학적 모델링을 활용한 쏘카 예약 테트리스](https://tech.socarcorp.kr/data/2022/06/10/reservation-tetris.html?)\n- [간단하지만 까다로운 언리얼 엔진 개발 환경 구축](https://netmarble.engineering/unreal-engine-dev-build-setting/)\n- [내가 프론트엔드를 학습한 방법](https://miryang.dev/blog/how-studied-frontend)\n- [Airbridge API 개발팀의 Monorepo 도입기](https://yozm.wishket.com/magazine/detail/1487)\n- [React, Express, Spring로 File과 JSON 동시에 주고 받기](https://velog.io/@huewilliams/%ED%8C%8C%EC%9D%BC%EA%B3%BC-JSON-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EB%8F%99%EC%8B%9C%EC%97%90-%EB%B3%B4%EB%82%B4%EA%B8%B0-2%ED%8E%B8-feat.-React-Express-Spring)\n- [AWS Serverless 웹서비스 구축 경험 후기 - 1탄](https://devocean.sk.com/blog/techBoardDetail.do?ID=163934)\n- [Sleuth 분산 환경 트래킹 With Fuel](https://cheese10yun.github.io/slueth-fuel/)\n- [프론트엔드 개발자에게도 알고리즘 공부가 중요할까?](https://wormwlrm.github.io/2022/05/28/Should-a-front-end-developer-learn-the-algorithm.html)\n- [서로 성장하는 기술 면접 만들기](https://hiddenest.dev/good-tech-interview)\n- [Shape Up: B2B SaaS 스타트업 Relate 팀의 제품 개발 프로세스](https://blog.relate.kr/shape-up-relate/)\n- [학생 때 아무도 가르쳐주지 않았는데 현업와보니 중요한 것들](https://velog.io/@mowinckel/%EC%95%84%EB%AC%B4%EB%8F%84-%EA%B0%80%EB%A5%B4%EC%B3%90-%EC%A3%BC%EC%A7%80-%EC%95%8A%EB%8A%94-%EA%B2%83)\n- [정적 팩토리 메서드(Static Factory Method)는 왜 사용할까?](https://tecoble.techcourse.co.kr/post/2020-05-26-static-factory-method/)\n- [서버 언어 전환 이야기](https://spoqa.github.io/2022/04/15/all-new-server.html)\n- [깃 눈으로 보고 배우기](https://learngitbranching.js.org/?locale=ko)\n- [TypeScript는 어떻게 공부해야 하나요?](https://yozm.wishket.com/magazine/detail/1376)\n- [제목없음](https://yozm.wishket.com/magazine/detail/1458/)\n- [IntelliJ IDEA Pro Tips: Debugging Java Streams](https://www.youtube.com/watch?v=BeJu9bMPLGU)\n- [28살 비전공자가 7개월 만에 개발자로 취업한 방법은?](https://www.youtube.com/watch?v=U2K7IKASrlE)\n- [Delta: A highly available, strongly consistent storage service using chain replication - Engineering at Meta](https://engineering.fb.com/2022/05/04/data-infrastructure/delta/)\n- [오픈소스 기웃대기](https://nookpi.tistory.com/140)\n- [좋은 회사가 보여주는 면접 모습, 나도 회사를 고를 수 있다!](https://blog.naver.com/sparkplusofficial/222719757257)\n- [임금님 귀는 당나귀 귀! 대나무숲 슬랙 앱 만들기](https://wormwlrm.github.io/2022/05/07/Bamboo-Forest-Slack-App.html)\n- [GraphQL 기본개념, 탄생 배경 10분 정리…! REST API 와의 비교까지!](https://www.youtube.com/watch?v=N-81mS2vldI)\n- [MSA로 백엔드 개발을 한다는 것](https://velog.io/@whitebear/MSA-%EB%AA%A8%EB%A5%B4%EB%A9%B4-%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C-%ED%95%98%EC%A7%80-%EB%A7%88%EC%84%B8%EC%9A%94)\n- [서버리스와 서버의 비용 비교](https://brunch.co.kr/@cebi750/22)\n- [Thoughts on Impact](https://textslashplain.com/2022/05/18/thoughts-on-impact/)\n- [sha 1 - How easy is it in 2022 to find a SHA1 collision? - Cryptography Stack Exchange](https://crypto.stackexchange.com/questions/99767/how-easy-is-it-in-2022-to-find-a-sha1-collision)\n- [일본 1위 배달 앱, 바닥부터 다시 짠다 – Recode 프로젝트](https://engineering.linecorp.com/ko/blog/about-demaecan-recode-project/)\n- [CircuitBreaker를 이용한 외부 API 장애 관리](https://velog.io/@hgs-study/CircuitBreaker)\n- [golang을 이용한 구독 커머스 아키텍처 설계](https://funes-days.com/dev/backend-architecture-with-golang)\n- [변하지 않는 상태를 유지하는 방법, 불변성(Immutable)](https://evan-moon.github.io/2020/01/05/what-is-immutable/)\n- [이동욱님 : 엔지니어의 세심함](https://jojoldu.tistory.com/667)\n- [CloudFront 모니터링 하기](https://jojoldu.tistory.com/666)\n- [2022년 테크 업계 번아웃 실태 보고](https://soojin.ro/blog/burnout)\n- [프론트엔드 학습 로드맵 - 2022년에 프론트엔드 배우기](https://euncho.medium.com/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%ED%95%99%EC%8A%B5-%EB%A1%9C%EB%93%9C%EB%A7%B5-91c3bc11dec0)\n- [Spring Batch HTTP Page Item Reader](https://cheese10yun.github.io/spring-batch-)\n- [Kotlin JDSL: Kotlin을 이용해 좀 더 쉽게 JPA Criteria API를 작성해 봅시다](https://engineering.linecorp.com/ko/blog/kotlinjdsl-jpa-criteria-api-with-kotlin/)\n- [Turborepo로 모노레포 개발 경험 향상하기](https://engineering.linecorp.com/ko/blog/monorepo-with-turborepo/)\n- [GitHub Actions에서 도커 캐시를 적용해 이미지 빌드하기](https://fe-developers.kakaoent.com/2022/220414-docker-cache/)\n- [Kotlin으로 DSL 만들기: 반복적이고 지루한 REST Docs 벗어나기](https://toss.tech/article/kotlin-dsl-restdocs)\n- [회원시스템 이벤트기반 아키텍처 구축하기](https://techblog.woowahan.com/7835)\n- [Clean Architecture in a Spring Application](https://medium.com/geekculture/clean-architecture-in-a-spring-application-312e119ee8ec)\n- [타입스크립트에서 unknown 타입에 대한 설명](https://betterprogramming.pub/secrets-of-unknown-types-in-typescript-2987cd1263f0)\n- [1인분을 해내기 위한 신입 서버 개발자의 좌충우돌 1년](https://netmarble.engineering/past-1year-to-be-server-programmer-as-one-developer/)\n- [3 Design Patterns Every Developer Should Learn](https://medium.com/interviewnoodle/3-design-patterns-every-developer-should-learn-71a51568ac9d)\n- [효과적인 코드 리뷰를 위한 리뷰어의 자세](https://tech.kakao.com/2022/04/03/2022-newkrew-onboarding-codereview/)\n- [아 엑셀다운로드 개발,,, 쉽고 빠르게 하고 싶다 (feat. 엑셀 다운로드 모듈 개발기)](https://techblog.woowahan.com/2698)\n- [Git에서 다수의 워킹 디렉토리를 관리하는 worktree](https://blog.outsider.ne.kr/1588)\n- [대량 데이터 조회와 유지보수는 어떻게 해야될까?](https://hyune-c.tistory.com/entry/%EB%8C%80%EB%9F%89-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%9A%8C%EC%9C%A0%EC%A7%80%EB%B3%B4%EC%88%98%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%B4%EC%95%BC%EB%90%A0%EA%B9%8C)\n- [DevOps 안내서](https://subicura.com/devops)\n- [Why we switched to GoLang](https://medium.com/@samuellaroche/why-we-switched-to-golang-53cb15868eef)\n- [AI의 모든 것 : A에서 Z까지](https://atozofai.withgoogle.com/intl/ko/)\n- [문과도 이해하는 객체지향 프로그래밍](https://youtu.be/cg1xvFy1JQQ)\n- [[React] 반응형UI에 대처하는 테스트의 자세](https://nookpi.tistory.com/139)\n- [엔라이즈 데이터 분석가의 A 부터 Z 까지](https://nrise.github.io/posts/data-analytist-blog/)\n- [단일 프로세스에서 NUMA가 야기한 성능 저하](https://netmarble.engineering/single-process-programming-numa-effect/)\n- [OS를 레스토랑에 비유해서쉽고 재미있게 설명한 글](https://wormwlrm.github.io/2021/10/04/OS-Restaurant.html)\n- [Android) 테스트 코드 왜 작성 해야 할까? 예제로 알아보자](https://yoon-dailylife.tistory.com/m/114)\n- [Performance Optimization in Web Applications and APIs](https://piyugupt.medium.com/performance-optimization-in-web-applications-and-apis-f726577da13)\n- [TFX와 함께 머신러닝 파이프라인 개발하기](https://medium.com/daangn/tfx%EC%99%80-%ED%95%A8%EA%BB%98-%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0-4578f030a9c1)\n- [주니어 개발자의 학습 목표 달성 리뷰 (2022년 1분기 회고록)](https://dataportal.kr/76)\n- [온라인 트리를 만든 산타들의 이야기](https://www.inflearn.com/pages/weekly-inflearn-45-20220330)\n- [A급 인재를 떠나게 하는 7가지 방법](https://brunch.co.kr/@hyungsukkim/20)\n- [How To Debug Java Streams Using Intellij Idea](https://mohd-tanveer.medium.com/how-to-debug-java-streams-using-intellij-idea-56a2473b1009)\n- [쏘카 QA는 무슨 일을 하고 어떻게 일하나요?](https://tech.socarcorp.kr/qa/2022/03/18/probationary-period_QA.html)\n- [검색 데이터 서빙 플랫폼 구축](https://zuminternet.github.io/SearchPilotProject)\n- [웹 워커를 통해 이미지 색상 수집기 성능 개선하기](https://fe-developers.kakaoent.com/2022/220324-web-worker-image/)\n- [Bad Kotlin Extensions](https://medium.com/@wisemuji/%EB%B2%88%EC%97%AD-bad-kotlin-extensions-36363a69b7bf)\n- [개발 과제를 준비하는 팁 10가지](https://medium.com/@gojbpark/%EA%B0%9C%EB%B0%9C-%EA%B3%BC%EC%A0%9C%EB%A5%BC-%EC%A4%80%EB%B9%84%ED%95%98%EB%8A%94-%ED%8C%81-10%EA%B0%80%EC%A7%80-372d00c3db8)\n- [API Architecture - Design Best Practices for REST APIs](https://abdulrwahab.medium.com/api-architecture-best-practices-for-designing-rest-apis-bf907025f5f)\n- [Java에서의 Emoji처리에 대해](https://meetup.toast.com/posts/317)\n- [React VAC Pattern - View 로직과 JSX의 의존성을 최소화 하자!](https://tv.naver.com/v/23162062)\n- [기술 부채를 갚기 위한 첫 발을 떼기까지](https://engineering.linecorp.com/ko/blog/about-messaging-hub-1)\n- [ClientAbortException은 왜 발생할까? (Part 1)](https://perfectacle.github.io/2022/03/20/client-abort-exception-deep-dive-part-01)\n- [DynamoDB를 사용하는 Go 서비스의 응답 시간 최적화](https://tech.buzzvil.com/blog/dynamo-go-latency-optimization-1-aws-credential-token/)\n- [Webpack → Vite: 번들러 마이그레이션 이야기](https://engineering.ab180.co/stories/webpack-to-vite)\n- [타입스크립트는 왜 낯설까](https://www.stevy.dev/why-typescript-difficult/)\n- [SPA와 라우팅](https://poiemaweb.com/js-spa)\n- [How to Be a 10x software Engineer](https://medium.com/@_michaellin/how-to-be-a-10x-engineer-fdac2a5a1bd5)\n- [사내 npm 패키지 저장소를 구축하기 위해 겪었던 과정들](https://devblog.croquis.com/ko/2022-03-07-1-npm-private-repository/)\n- [JDK 18 G1/Parallel/Serial GC changes](https://tschatzl.github.io/2022/03/14/jdk18-g1-parallel-gc-changes.html)\n- [메시지 발송 이중화 여정기](https://techblog.woowahan.com/7724/)\n- [팀을 더욱 유연하게 만들어가는 힘](https://helloworld.kurly.com/blog/squad-b-team-building/)\n- [배민광고리스팅 개발기 (feat. 코프링과 DSL 그리고 코루틴)](https://techblog.woowahan.com/7349/)\n- [안드로이드 코루틴에서 할수있는 실수 5가지](https://www.youtube.com/watch?v=cr5xLjPC4-0)\n- [단위 테스트를 위한 mini-memcached 개발기](https://medium.com/daangn/단위-테스트를-위한-mini-memcached-개발기-732bf2bb9e)\n- [신입이 만든 코드는 서버를 부숴.. 미디어 서버 테스터 개발기](https://hyperconnect.github.io/2022/03/04/media-server-tester.html)\n- [How JVM (Java Virtual Machine) Works](https://nisalj.medium.com/how-jvm-java-virtual-machine-works-4c5e8e7cae74)\n- [하쿠나 입장 API 개선하기 - 괴물 API 리팩토링과 성능개선하기](https://hyperconnect.github.io/2022/03/02/develop-liveroom-entrance-on-hakuna.html)\n- [절대적 Rule을 지켜 – Config Checker 개발기](https://techblog.woowahan.com/7242)\n- [WSL2 활용도를 높여주는 고정 IP 설정](https://netmarble.engineering/wsl2-static-ip-scheduler-settings/)\n- [신입 개발자의 첫 홀로서기 프로젝트](https://medium.com/29cm/%EC%8B%A0%EC%9E%85-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EC%B2%AB-%ED%99%80%EB%A1%9C%EC%84%9C%EA%B8%B0-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-2303ff8dfe30)\n- [카쉐어링 서비스 디자인 (like Uber or Lyft) 인터뷰](https://towardsdatascience.com/ace-the-system-design-interview-uber-lyft-7e4c212734b3)\n- [Why DDD, Clean Architecture and Hexagonal ?](https://dataportal.kr/74)\n- [서버리스 기반 컨텐츠 추천 서비스 만들기 - 이상현(Vingle)](https://youtu.be/-LZFJ6BpplE)\n- [페이스북 개발자는 어떻게 일하고 어떻게 성과를 만들까?](https://blog.shiren.dev/2022-03-07)\n- [초식 - 비동기 외부연동으로 서버성능 올리기](https://www.youtube.com/watch?v=FCNNcl48k28)\n- [Facebook을 다운 시킨 원인, BGP hijacking이 무엇인가?](https://dataportal.kr/14)\n- [A Brief History of JavaScript](https://auth0.com/blog/a-brief-history-of-javascript/)\n- [개발팀과 개발팀장이 사라져야 하는 이유](https://seokjun.kim/no-reason-for-dev-team/)\n- [2022년 딥러닝입문 알고리즘 탑10](https://www.analyticsinsight.net/top-10-deep-learning-algorithms-beginners-should-know-in-2022/)\n- [간단한 카프카 환경 구성하기](https://devocean.sk.com/blog/techBoardDetail.do?ID=163709)\n- [그 많던 import React from ‘react’는 어디로 갔을까](https://so-so.dev/react/import-react-from-react/)\n- [Jekyll에서 Gatsby로 떠나는 마이그레이션 여정](https://wormwlrm.github.io/2022/02/25/Migration-Journey-from-Jekyll-to-Gatsby.html)\n- [strace가 -k 옵션을 만난 날](https://netmarble.engineering/strace-k-build-guide/)\n- [Cloudflare Workers & KV로 Guestbook 개발하기](https://miryang.dev/blog/develop-guestbook-with-cloudflareworkers)\n- [리팩토링의 중요성 feat.테스트 코드를 짜는 이유(한글 자막)](https://youtu.be/mNPpfB8JSIU)\n- [AWS Lambda, SNS, EventBridge, yahoo API로 원하는 종목 주식가격 이메일로 알림받기!](https://namunamu1105.medium.com/aws-lambda-sns-eventbridge-yahoo-api%EB%A1%9C-%EC%9B%90%ED%95%98%EB%8A%94-%EC%A2%85%EB%AA%A9-%EC%A3%BC%EC%8B%9D%EA%B0%80%EA%B2%A9-%EC%9D%B4%EB%A9%94%EC%9D%BC%EB%A1%9C-%EC%95%8C%EB%A6%BC%EB%B0%9B%EA%B8%B0-35739057c5c3)\n- [그림으로 쉽게 보는 HTTP 변천사](https://brunch.co.kr/@swimjiy/39)\n- [클래스는 언제 로딩되고 초기화되는가?](https://velog.io/@skyepodium/%ED%81%B4%EB%9E%98%EC%8A%A4%EB%8A%94-%EC%96%B8%EC%A0%9C-%EB%A1%9C%EB%94%A9%EB%90%98%EA%B3%A0-%EC%B4%88%EA%B8%B0%ED%99%94%EB%90%98%EB%8A%94%EA%B0%80)\n- [Object-Relational Mapping is the Vietnam of Computer Science](https://blog.codinghorror.com/object-relational-mapping-is-the-vietnam-of-computer-science/)\n- [급격하게 증가하는 트래픽, 어떻게 대비할까?](https://medium.com/ab-z/%EA%B8%89%EA%B2%A9%ED%95%98%EA%B2%8C-%EC%A6%9D%EA%B0%80%ED%95%98%EB%8A%94-%ED%8A%B8%EB%9E%98%ED%94%BD-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%8C%80%EB%B9%84%ED%95%A0%EA%B9%8C-d92f2fbf2130)\n- [Two reasons Kubernetes is so complex • Buttondown](https://buttondown.email/nelhage/archive/two-reasons-kubernetes-is-so-complex/)\n- [Roblox 작년 73시간 장애 포스트모템](https://news.hada.io/topic?id=5860)\n- [AWS Amplify Studio — Figma 디자인을 바로 리액트 컴포넌트로 만드는 법(번역)](https://link.medium.com/lGwrbtRdqnb)\n- [How to stop running out of ephemeral ports and start to love long-lived connections](https://blog.cloudflare.com/how-to-stop-running-out-of-ephemeral-ports-and-start-to-love-long-lived-connections/)\n- [2022년 1월 100% 할인 이벤트 장애 부검](https://tech.inflab.com/202201-event-postmortem)\n- [postman의 gRPC 지원](https://blog.postman.com/postman-now-supports-grpc/)\n- [LINE의 2022년 신년 대응: 리모트 환경에서 트래픽 폭증에 대비하기](https://engineering.linecorp.com/ko/blog/line-2022-new-year/)\n- [Instagram System  Architecture](https://medium.com/interviewnoodle/instagram-system-architecture-fdbec22e48ee)\n- [[Kotlin] 상태를 가변적으로 관리하는 발생하는 문제](https://dataportal.kr/65)\n- [Serverless로 E-Commerce 만들기 / 블랙프라이데이 트래픽 썰 / 스타트업에서 CTO는 뭘 하는 자리인가?](https://medium.com/@kurtlee/serverless%EB%A1%9C-e-commerce-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EB%B8%94%EB%9E%99%ED%94%84%EB%9D%BC%EC%9D%B4%EB%8D%B0%EC%9D%B4-%ED%8A%B8%EB%9E%98%ED%94%BD-%EC%8D%B0-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85%EC%97%90%EC%84%9C-cto%EB%8A%94-%EB%AD%98-%ED%95%98%EB%8A%94-%EC%9E%90%EB%A6%AC%EC%9D%B8%EA%B0%80-a6f9d9beb930#gaerae.com)\n- [Spring 개발자의 NestJs 적응하기](https://medium.com/zigbang/spring-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-nestjs-%EC%A0%81%EC%9D%91%ED%95%98%EA%B8%B0-a816fa0f38a9)\n- [예측 가능한 대규모 서비스 개발하기](https://medium.com/daangn/%EC%98%88%EC%B8%A1-%EA%B0%80%EB%8A%A5%ED%95%9C-%EB%8C%80%EA%B7%9C%EB%AA%A8-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0-a33e2f3cef88)\n- [이론과 실습을 통해 이해하는 Docker 기초](https://hudi.blog/about-docker/)\n- [클린코드에 대해](https://www.steveonstuff.com/2022/01/27/no-such-thing-as-clean-code)\n- [복원력 있는 아키텍처를 위한 패턴 시리즈](https://medium.com/the-cloud-architect/patterns-for-resilient-architecture-part-1-d3b60cd8d2b6)\n- [80만명이 사용하는 커뮤니티 서비스에서 무중단 마이그레이션](https://medium.com/athenaslab/80만명이-사용하는-서비스에서-무중단-마이그레이션-하기-3a9a28f39550)\n- [스타트업에서 AWS IAM 권한 관리 잘 하는법](https://engineering.ab180.co/stories/iam-management-consoleme)\n- [AWS CloudWatch Agent를 별도로 설치하는 이유](https://dataportal.kr/71)\n- [Vue 3.0 공식 런칭, React Hook API와의 차이는?](https://medium.com/elecle-bike/vue-3-0-%EA%B3%B5%EC%8B%9D-%EB%9F%B0%EC%B9%AD-react-hook-api%EC%99%80%EC%9D%98-%EC%B0%A8%EC%9D%B4%EB%8A%94-a1d3802e5bf5)\n- [단위 테스트, 도대체 어디까지 작성해야 할까?](https://medium.com/@lette1394/a187eb5b1753)\n- [리엑트 네이티브 개발 경험기](https://brunch.co.kr/@chickenmoim/21)\n- [Stub 을 이용한 Service 계층 단위 테스트 하기](https://jojoldu.tistory.com/637)\n- [2022년 웹 개발에서 고려해야 할 환경](https://engineering.linecorp.com/ko/blog/the-baseline-for-web-development-in-2022/)\n- [Include diagrams in your Markdown files with Mermaid](https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/?fbclid=IwAR0bUFRRUgq71TpfGHg-0kv8Z3aNtooXhLiRE5LmMQU59edmhZTSdpMnz58)\n- [네이버웹툰 신입개발자의 2021년 회고](https://velog.io/@janeljs/2021%EB%85%84-%ED%9A%8C%EA%B3%A0)\n- [주니어 개발자의 포지션 변경과 함께한 2022년 이직기](https://miryang.dev/blog/2022-change-job)\n- [캐시와 레디스](https://iiaii.tistory.com/11)\n- [My (not first) impression on \"Web3\"](https://unleashxyz.substack.com/p/22-2-19-my-impression-on-ethereum)\n- [Server-Sent Events, WebSockets, and HTTP](https://www.mnot.net/blog/2022/02/20/websockets)\n- [고루틴의 동작 원리에 관하여](https://ykarma1996.tistory.com/188)\n- [코드 리뷰 잘 하는 법(Jr ver.)](https://velog.io/@seongkyun/%EC%BD%94%EB%93%9C-%EB%A6%AC%EB%B7%B0-%EC%9E%98-%ED%95%98%EB%8A%94-%EB%B2%95Jr-ver)\n- [OpenApiSpec.을 이용한 더욱 효과적인 API 문서화](https://traeper.tistory.com/219)\n- [BentoMl을 활용하여 딥러닝 모델 API 서빙하기](https://zuminternet.github.io/BentoML/)\n- [Rapid Event Notification System at Netflix](https://netflixtechblog.com/rapid-event-notification-system-at-netflix-6deb1d2b57d1)\n- [초식 - 서버 성능 올리기 (처리량, 응답시간)](https://youtu.be/JJJ4LReZ5q4)\n- [간편하게 서버 데이터를 로딩하는 Fetcher, Swift로 구현하기](https://engineering.linecorp.com/ko/blog/introduce-android-fetcher-swift-implementation/)\n- [Elasticsearch APM 분산 트랜잭션 추적](https://cheese10yun.github.io/elk-apm-2/)\n- [어느 암호학 전문가가 말하는 WEB3의 문제점 (1)](https://velog.io/@ruizhen88/%EC%95%94%ED%98%B8%ED%95%99-%EC%A0%84%EB%AC%B8%EA%B0%80%EC%9D%98-WEB3-%EC%B2%AB%EC%9D%B8%EC%83%81-%EB%B2%88%EC%97%AD)\n- [MSA 환경에서 Error Response 전달하기](https://cheese10yun.github.io/error-response-2/)\n- [Javascript에서도 SOLID 원칙이 통할까?](https://velog.io/@teo/Javascript%EC%97%90%EC%84%9C%EB%8F%84-SOLID-%EC%9B%90%EC%B9%99%EC%9D%B4-%ED%86%B5%ED%95%A0%EA%B9%8C)\n- [React 는 여전히 친절한 우리의 이웃이다.](https://euncho.medium.com/2022%EB%85%84-fe-techs-6b12386af7a)\n- [FE개발자로서 못해준 이야기 1 - 프로젝트](https://partnerjun.tistory.com/82)\n- [How I built my Startup as a solo developer](https://medium.com/@sushrit.pk21/how-i-built-my-startup-as-a-solo-developer-8561bf7eebde)\n- [Yarn Berry 적용 1일 차에 느낀 점](https://velog.io/@johnwi/wil-01-Yarn-Berry)\n- [단축 URL 서비스 만들기](https://medium.com/monday-9-pm/%EC%B4%88%EB%B3%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90-url-shortener-%EC%84%9C%EB%B2%84-%EB%A7%8C%EB%93%A4%EA%B8%B0-1%ED%8E%B8-base62%EC%99%80-%EC%B6%A4%EC%9D%84-9acc226fb7eb)\n- [슬기로운 코드 리뷰 생활 with GitHub Pull Request](https://medium.com/zigbang/%EC%8A%AC%EA%B8%B0%EB%A1%9C%EC%9A%B4-%EC%BD%94%EB%93%9C-%EB%A6%AC%EB%B7%B0-%EC%83%9D%ED%99%9C-with-github-pull-request-7932b5d47c70)\n- [코틀린 예제로 작성된 프로젝트 리액터 기초 및 고급 활용법](https://devsh.tistory.com/m/entry/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%A6%AC%EC%95%A1%ED%84%B0-%EA%B8%B0%EC%B4%88-1-%EB%AA%A8%EB%85%B8?fbclid=IwAR1oUudKEiWCQ3yvo8ebDPY8sLs8CKW1Gxac4xy3wYbogJ7jPLD0MpGVWTU)\n- [카카오웹툰은 GitHub Actions를 어떻게 사용하고 있을까?](https://fe-developers.kakaoent.com/2022/220106-github-actions)\n- [Java 기반의 알림 서비스로 MSA 전환기](https://blog.dramancompany.com/2022/01/java-%ea%b8%b0%eb%b0%98%ec%9d%98-%ec%95%8c%eb%a6%bc-%ec%84%9c%eb%b9%84%ec%8a%a4%eb%a1%9c-msa-%ec%a0%84%ed%99%98%ea%b8%b0/)\n- [넥슨그룹 첫 정년퇴직자 '백영진'님의 소회](https://m.inven.co.kr/webzine/wznews.php?idx=266901&s=09)\n- [터치와 클릭, 우리 깐부잖아](https://ui.toast.com/weekly-pick/ko_20220106)\n- [Vue 컴포넌트 – 메모리 누수 분석하기](https://engineering.linecorp.com/ko/blog/vue-memory-leak-analysis/)\n- [댓글 모듈 레거시 걷어내기 with TDD](https://zuminternet.github.io/zum-comment-component/)\n- [소프트웨어 엔지니어로서 경제적 독립을 향한 나의 여정](https://news.hada.io/topic?id=5719&utm_source=slack&utm_medium=bot&utm_campaign=T04NM041F)\n- [우리는 왜 공통 라이브러리를 만들기 시작했나](https://helloworld.kurly.com/blog/why-we-make-common-library)\n- [독일, 베를린에서 개발자로 취업하기](https://medium.com/jinhoon-bae/%EB%8F%85%EC%9D%BC-%EB%B2%A0%EB%A5%BC%EB%A6%B0%EC%97%90%EC%84%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%A1%9C-%EC%B7%A8%EC%97%85%ED%95%98%EA%B8%B0-2677fad39445)\n- [2년만에 개발자를 멈춘 iOS 개발자의 2021년 회고](https://dev200ok.blogspot.com/2022/01/2-ios-2021.html)\n- [프로메테우스 레퍼런스 한글번역](https://godekdls.github.io/Prometheus/getting-started/)\n- [Twelve-Factor 방법론](https://12factor.net/ko/)\n- [Review 2021 프런트엔드, 그리고 2022](https://jbee.io/web/from-2021-to-2022/)\n- [자바스크립트는 왜 프로토타입을 선택했을까](https://medium.com/@limsungmook/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%8A%94-%EC%99%9C-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EC%9D%84-%EC%84%A0%ED%83%9D%ED%96%88%EC%9D%84%EA%B9%8C-997f985adb42)\n- [DevOps 3년차 경력 이직 도전기(feat. 네카당)](https://ykarma1996.tistory.com/186)\n- [2021년 CTO 회고(이동욱님)](https://jojoldu.tistory.com/626)\n- [주니어 개발자의 2021년 회고 (황준일님)](https://junilhwang.github.io/TIL/Review/2021-year/end)\n- [1년차 개발자 2021년 회고 - 개발 & 일상](https://velog.io/@minyul/2021%EB%85%84-%ED%9A%8C%EA%B3%A0)\n- [Bootstrap을 공부해보다](https://www.sangkon.com/study-bootstrap/)\n- [AWS DynamoDB 모델링](https://zuminternet.github.io/DynamoDB/)\n- [공통시스템개발팀 코드 리뷰 문화 개선 이야기](https://techblog.woowahan.com/7152/)\n- [동료들을 덕질하는 요기요 Developer Advocate의 1년](https://link.medium.com/Dd4j36St9lb)\n- [체대 출신 개발자의 2021년 회고](https://ryan-han.com/post/memoirs/memoirs2021/)\n- [리뷰어에게 사랑받는 코드리뷰는 어떻게 보낼 수 있을까?](https://haneepark.github.io/2021/12/11/code-review-love-1/)\n- [주키어개발자의 2021 회고](https://miryang.dev/blog/2021-review)\n- [JavaScript Modules – A Beginner's Guide](https://www.freecodecamp.org/news/javascript-modules-beginners-guide/)\n- [객체지향 시스템과 패러다임 그리고 철학](https://black7375.tistory.com/86)\n- [개발자가 알아야 할 스톡옵션의 모든 것](https://evan-moon.github.io/2021/12/04/what-is-stock-options/)\n- [Spring Transaction 관리에 대한 메모](https://medium.com/@jypthemiracle/spring-transaction-%EA%B4%80%EB%A6%AC%EC%97%90-%EB%8C%80%ED%95%9C-%EB%A9%94%EB%AA%A8-f391fd2885b4)\n- [Type과 Interface로 테스트용 Mock Data 만들기](https://nookpi.tistory.com/125)\n- [오픈 소스 소프트웨어 Toolkit을 이용한 AI 공정성 검증](https://devocean.sk.com/blog/techBoardDetail.do?ID=163512)\n- [Springboot @Async 어떻게 동작하는가?](https://brunch.co.kr/@springboot/401)\n- [카카오웹툰은 하드웨어 가속과 IntersectionObserver를 어떻게 사용했을까?](https://fe-developers.kakaoent.com/2021/211202-gpu-intersection-observer)\n- [CTO를 어떻게 뽑을까](https://lqez.dev/blog/how-to-hire-cto.html)\n- [줌인터넷 프론트엔드 파트에서 사용하는 표준화 라이브러리를 소개합니다 (feat: SSR, Node.js, Nexus)](https://zuminternet.github.io/zum-portal-core-js/)\n- [무신사가 검색 품질을 관리하는 방법](https://medium.com/musinsa-tech/map-416b5f143943)\n- [서비스 성능 개선 : MySQL Optimizer 실행 계획 분석을 기반으로](https://xlffm3.github.io/database/service-performance-with-optimizer/)\n- [메세지의 템플릿 내용 단위 테스트 하기](https://jojoldu.tistory.com/619)\n- [타입스크립트 꿀팁](https://fe-developers.kakaoent.com/2021/211012-typescript-tip/?utm_source=gaerae.com&utm_campaign=%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%8A%A4%EB%9F%BD%EB%8B%A4&utm_medium=social)\n- [나의 페어 프로그래밍 탐험기](https://tech.kakao.com/2021/12/01/pair-programming/)\n- [자동화된 UI 회귀테스트 도입하기](https://techblog.woowahan.com/6460/)\n- [WebRTC 응용 서비스를 개발하는 2가지 방법](https://tech.kakaoenterprise.com/121?category=882488)\n- [Dropbox가 Nginx에서 Envoy로 전환한 이유와 방법](https://news.hada.io/topic?id=2625)\n- [Sanitizer API를 이용해 안전하게 DOM 조작하기](https://wormwlrm.github.io/2021/11/21/Sanitizer-API.html)\n- [리액트 vs 스벨트](https://yozm.wishket.com/magazine/detail/1176/)\n- [데이터 파이프라인 기본 원리와 원칙은 시간이 지나도 유효해야 한다(1/2)](https://netmarble.engineering/data-pipeline-design-principles-a/)\n- [Observability: 로그라고해서 다 같은 로그가 아니다(1/2)](https://netmarble.engineering/observability-logging-a/)\n- [클로저 매크로에 대해 알아보자](https://green-labs.github.io/the-macro)\n- [우리는 모의장애훈련에 진심입니다. – part1](https://techblog.woowahan.com/6557/)\n- [kubeadm 이용하여 k8s Cluster 배포하기(공식문서 위주)](https://kingofbackend.tistory.com/217)\n- [당연함의 크기 - 회원가입 퍼널 개선](http://labs.brandi.co.kr/2021/11/09/yoobg.html)\n- [음식 배달 앱 아키텍쳐 분석](https://www.joinc.co.kr/w/man/12/architecture/EndToEndDesignOfFoodDeliveryApp?)\n- [Golang: Websocket 이해하기](https://jusths.tistory.com/m/249)\n- [Resilience4j를 이용한 서킷 브레이커 기초](https://cheese10yun.github.io/resilience4j-basic/)\n- [CompletableFuture, 자바 비동기 프로그래밍을 위한 CompletableFuture 검토](https://brunch.co.kr/@springboot/267)\n- [라이엇: 6년 3개월의 기록](http://www.chidoo.me/index.php/2021/11/13/footprints-in-my-riotgames-days/)\n- [custom exception을 언제써야할까?](https://tecoble.techcourse.co.kr/post/2020-08-17-custom-exception/)\n- [라인 developer day 컨퍼런스 발표 영상](https://www.youtube.com/playlist?list=PLI2S-k0Fa59uUuHm1z3kxCFw8rC8t6G13)\n- [NestJS Custom Caching Decorator 만들기](https://zuminternet.github.io/nestjs-custom-decorator)\n- [Upsource 코드리뷰 플랫폼 구축기 with AWS](https://bbros-web-frontend.super.site/upsource-with-aws)\n- [CODE GURU REVIEWER를 사용하여 코드리뷰 받기](https://blog.dramancompany.com/2021/11/code-guru-reviewer%eb%a5%bc-%ec%82%ac%ec%9a%a9%ed%95%98%ec%97%ac-%ec%bd%94%eb%93%9c%eb%a6%ac%eb%b7%b0-%eb%b0%9b%ea%b8%b0/)\n- [테스트 코드 한 줄을 작성하기까지의 고난](https://tech.kakao.com/2021/11/08/test-code/)\n- [Airbnb System design 분석](https://www.joinc.co.kr/w/man/12/airbnbDesign)\n- [프로세스 동기화를 이해하기 위한 짧은 노트](https://medium.com/@jypthemiracle/understanding-process-synchronization-5763aa39ad17)\n- [인프런 수습 회고](https://jojoldu.tistory.com/612)\n- [웹 서비스 캐시 똑똑하게 다루기](https://toss.tech/article/smart-web-service-cache)\n- [HTML을 정규 표현식만으로 파싱할 수 있을까?](https://evan-moon.github.io/2021/05/07/why-regexp-called-regexp/)\n- [타입스크립트 꿀팁](https://fe-developers.kakaoent.com/2021/211012-typescript-tip)\n- [MySQL Group Replication 구축](https://saramin.github.io/2021-09-28-mysql-group-replication/)\n- [통계 서버를 구축하며!](https://medium.com/uniquegood/%ED%86%B5%EA%B3%84-%EC%84%9C%EB%B2%84%EB%A5%BC-%EA%B5%AC%EC%B6%95%ED%95%98%EB%A9%B0-c071c6d4f945)\n- [쿠버네티스 API서버는 정말 그냥 API서버라구욧](https://coffeewhale.com/apiserver)\n- [CTO가 CTO를 뽑습니다](https://brunch.co.kr/@leehosung/54)\n- [그런 개발자로 괜찮은가 - '취업' 편](https://taetaetae.github.io/posts/a-good-developer-in-terms-of-employment/)\n- [도전을 망설이는 비전공자들에게](https://okky.kr/article/1069879)\n- [브라우저의 사용자 에이전트는 왜 이렇게 복잡하게 생겼을까?](https://wormwlrm.github.io/2021/10/11/Why-User-Agent-string-is-so-complex.html)\n- [한글도 지원하는 퍼지 문자열 검색](https://taegon.kim/archives/9919)\n- [Github 에서 개발 프로젝트 관리하기 (Zenhub 사용기)](https://devocean.sk.com/blog/techBoardDetail.do?ID=163408)\n- [API V2 전환과 DB 무중단 마이그레이션 후기](https://medium.com/29cm/api-v2-%EC%A0%84%ED%99%98%EA%B3%BC-db-%EB%AC%B4%EC%A4%91%EB%8B%A8-%EB%A7%88%EC%9D%B4%EA%B7%B8%EB%A0%88%EC%9D%B4%EC%85%98-%ED%9B%84%EA%B8%B0-8b39eb0db566)\n- [ServletContainer와 SpringContainer는 무엇이 다른가? Controller 1개는 어떻게 수십 만개의 요청을 처리하는가](https://medium.com/@jypthemiracle/servletcontainer%EC%99%80-springcontainer%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B4-%EB%8B%A4%EB%A5%B8%EA%B0%80-626d27a80fe5)\n- [크롬 익스텐션에서 데이터를 어떻게 다룰 것인가? (피트스탑과제 – 크롬 익스텐션 개발기)](https://techblog.woowahan.com/5900)\n- [Facebook을 다운 시킨 이유, BGP hijacking이 무엇인가?](https://dataportal.kr/14)\n- [레스토랑에 비유해서 알아보는 운영체제](https://wormwlrm.github.io/2021/10/04/OS-Restaurant.html)\n- [스프링에서 코틀린 스타일 테스트 코드 작성하기](https://techblog.woowahan.com/5825/)\n- [Vue SSR 제대로 적용하기 (feat. Vanilla SSR)](https://zuminternet.github.io/vue-ssr/)\n- [Atomic state management – Jotai](http://blog.hwahae.co.kr/all/tech/tech-tech/6099/)\n- [Spring은 Http Message Body를 어떻게 Java의 객체로 역/직렬화할까?](https://velog.io/@prayme/Spring%EC%9D%80-Http-Message-Body%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-Java%EC%9D%98-%EA%B0%9D%EC%B2%B4%EB%A1%9C-%EC%97%AD%EC%A7%81%EB%A0%AC%ED%99%94%ED%95%A0%EA%B9%8C)\n- [Pagination을 위한 최적화 SQL (Limit vs Join)](https://blog.lulab.net/database/optimize-pagination-sql-by-join-instead-of-limit/)\n- [변경에 유연한 컴포넌트](https://jbee.io/web/components-should-be-flexible/)\n- [화상 회의 서비스를 위한, WebRTC 소개](https://brunch.co.kr/@springboot/640)  \n- [프로그래머를 위한 이름 짓는 원리](https://green-labs.github.io/programmers-naming)\n- [10분만에 훑어보는 TCP와 UDP](https://wormwlrm.github.io/2021/09/23/Overview-of-TCP-and-UDP.html)\n- [Java Stream API은 왜 for-loop보다 성능이 좋지 않을까?](https://medium.com/@jypthemiracle/java-stream-api는-왜-for-loop보다-느릴까-50dec4b9974b)\n- [Sql을 통해서 테스트 코드를 쉽게 작성하자](https://cheese10yun.github.io/sql-test/)\n- [DevOps팀의 Terraform 모험](https://helloworld.kurly.com/blog/terraform-adventure/)\n- [이모티콘 서비스는 왜 MSA를 선택했나?](https://tech.kakao.com/2021/09/14/msa/)\n- [도메인 주도 개발 전환 이야기](https://spoqa.github.io/2021/09/13/domain-driven-development-transition-story.html)\n- [Monolithic to Microservices Architecture with Patterns & Best Practices](https://medium.com/design-microservices-architecture-with-patterns/monolithic-to-microservices-architecture-with-patterns-best-practices-a768272797b2)\n- [Improving Pull Request Confidence for the Netflix TV App](https://netflixtechblog.medium.com/improving-pull-request-confidence-for-the-netflix-tv-app-b85edb05eb65)\n- [‘개발문화를 혼자서 바꿀 수 없다’며 포기하기엔 이릅니다](https://dico.me/topic/articles/296/ko)\n- [6단계로 알아보는 라이브 생방송 송출 원리](https://blog.naver.com/n_cloudplatform/222493527661)\n- [공개된 GitHub Codespaces 살펴보기](https://blog.outsider.ne.kr/1565)\n- [Incremental DOM과 Virtual DOM 비교](https://ui.toast.com/weekly-pick/ko_20210819)\n- [브라우저 Web Worker 다루기 with 오피스 문서 텍스트 추출 및 암호해제](https://tech.kakao.com/2021/09/02/web-worker/)\n- [git은 폴더경로가 변경된 것을 어떻게 알 수 있을까?](https://kwoncheol.me/posts/git-rename-inference)\n- [개발자 포트폴리오 오해 vs 진실](https://youtu.be/PGCFs8ILnKI)\n- [우아~한 장애대응](https://techblog.woowahan.com/4886/)\n- [무료로 웹호스팅, 서비스 이용하기](https://uznam8x.tistory.com/m/84)\n- [리멤버의 온보딩 과정을 소개합니다](https://blog.dramancompany.com/2021/08/%eb%a6%ac%eb%a9%a4%eb%b2%84%ec%9d%98-%ec%98%a8%eb%b3%b4%eb%94%a9-%ea%b3%bc%ec%a0%95%ec%9d%84-%ec%86%8c%ea%b0%9c%ed%95%a9%eb%8b%88%eb%8b%a4/)\n- [외부 툴 변경에 휘둘리지 않는 서버 코드 작성기](https://blog.gangnamunni.com/post/dependency-inversion-principle/)\n- [Stop Using Atomic Design Pattern](https://jbee.io/react/stop-using-atomic-design/)\n- [AWS SQS 생성하기 Hands On (연재 #2)](https://devocean.sk.com/blog/techBoardDetail.do?ID=163294)\n- [토스 프론트엔드 챕터가 말합니다. “프론트엔드 개발자에게 가장 중요한 역량은?”](https://blog.toss.im/article/toss-frontend-chapter)\n- [세 달 간의 오늘의집 개발자 온보딩 과정을 돌아보다](https://www.bucketplace.co.kr/post/2021-08-11-%EC%84%B8-%EB%8B%AC-%EA%B0%84%EC%9D%98-%EC%98%A4%EB%8A%98%EC%9D%98%EC%A7%91-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%98%A8%EB%B3%B4%EB%94%A9-%EA%B3%BC%EC%A0%95%EC%9D%84-%EB%8F%8C%EC%95%84%EB%B3%B4%EB%8B%A4)\n- [Vanilla Javascript로 React useState Hook 만들기 (feat: 렌더링 추상화)](https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Make-useSate-hook/)\n- [코로나 시대에서의 WebRTC](https://brunch.co.kr/@springboot/639)\n- [회복 탄력성 높은 프론트엔드 아키텍처](https://medium.com/tech-confs-in-korean/%ED%9A%8C%EB%B3%B5-%ED%83%84%EB%A0%A5%EC%84%B1-%EB%86%92%EC%9D%80-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%AA%A8%EB%8B%88%EC%B9%B4-%EB%A0%8C%ED%8A%B8-goto-2019-947f7507f1bb)\n- [쿠키와 세션 아주 쉽게 이해가능!!!](https://www.youtube.com/watch?v=aU4bju5kB_Q)\n- [Rush로 프론트엔드 모노레포 도입기](https://medium.com/mildang/rush%EB%A1%9C-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EB%AA%A8%EB%85%B8%EB%A0%88%ED%8F%AC-%EB%8F%84%EC%9E%85%EA%B8%B0-5da0c5bc9b30)\n- [업계에서 6년 있은 뒤, 마음이 바뀐 소프트웨어 개발 토픽들](https://www.clien.net/service/board/cm_app/15829916#comment-head)\n- [Kafka 사용이유 ( vs RabbitMQ )](https://ellune.tistory.com/29)\n- [jib를 이용한 자바 앱 컨테이너화](https://alden-kang.tistory.com/1)\n- [2021년 입문자를 위한 리액트 로드맵(영문)](https://dev.to/suhailzone/reactjs-roadmap-for-beginners-2021-14en?fbclid=IwAR0FhaGsvmthQ6bXLSbCgw6GBi3xC4AgzOXm6mRLxABLO67j08ME6i-Gh-w)\n- [Release Note 톺아보기](https://tech.kakaoenterprise.com/113)\n- [Vanilla Javascript로 가상돔(VirtualDOM) 만들기](https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Virtual-DOM/)\n- [국제화(i18n) 자동화 가이드](https://meetup.toast.com/posts/295)\n- [R언어관련 패캐지에 대해서 알아보겠습니다 (feat.googleVis Lib)](https://devocean.sk.com/blog/techBoardDetail.do?ID=163282)\n- [Operator를 활용한 Prometheus 간단히 설치하기(2) - Exporter 편](https://devocean.sk.com/blog/techBoardDetail.do?ID=163266)\n- [FE개발자가 되기위한 10가지방법](https://velog.io/@hohooodo/%EC%9A%B0%EC%95%84%ED%95%9C-%ED%85%8C%ED%81%AC%EC%84%B8%EB%AF%B8%EB%82%982020%EB%85%84%EC%97%90-FE%EA%B0%9C%EB%B0%9C%EC%9E%90%EA%B0%80-%EB%90%98%EA%B8%B0%EC%9C%84%ED%95%9C-10%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95)\n- [파이썬 애플리케이션 의존성 주입 - dependency injector](https://www.humphreyahn.dev/blog/dependency-injector)\n- [실시간 문서 협업 시스템 동작원리](https://www.secmem.org/blog/2019/01/09/operational-transform/)\n- [Spring Cloud Config & Cloud Bus 정리](https://cheese10yun.github.io/spring-config-client/)\n- [왜 플렉스팀인가?](https://ahnheejong.name/articles/why-flex-2021/)\n- [NLP와 OCR, 머신 러닝으로 더욱 편리하고 특별한 LINE 가계부 만들기](https://engineering.linecorp.com/ko/blog/line-kakeibo-with-nlp-ocr-machinelearning/)\n- [당근런치를 만들어봤어요](https://medium.com/daangn/%EB%8B%B9%EA%B7%BC%EB%9F%B0%EC%B9%98%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EB%B4%A4%EC%96%B4%EC%9A%94-18c368552da6)\n- [5년차 프론트엔드 개발자 이직 후기](https://velog.io/@bluestragglr/%EC%96%B4%EC%A9%8C%EB%8B%A4-5%EB%85%84%EC%B0%A8-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%9E%90-%EC%9D%B4%EC%A7%81-%ED%9B%84%EA%B8%B0)\n- [코드로 인프라 관리하기 IaC - Terraform으로 EKS 클러스터 만들기](https://medium.com/29cm/%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%9D%B8%ED%94%84%EB%9D%BC-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0-iac-terraform%EC%9C%BC%EB%A1%9C-eks-%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EB%A7%8C%EB%93%A4%EA%B8%B0-201778d5c39c)\n- [AWS의 IaC Framework CDK 소개](https://devocean.sk.com/blog/techBoardDetail.do?ID=163277)\n- [Best Practices for REST API Error Handling](https://www.baeldung.com/rest-api-error-handling-best-practices)\n- [유저 주문 취소 기능 Java 전환기](https://medium.com/29cm/%EC%9C%A0%EC%A0%80-%EC%A3%BC%EB%AC%B8-%EC%B7%A8%EC%86%8C-%EA%B8%B0%EB%8A%A5-java-%EC%A0%84%ED%99%98%EA%B8%B0-d218e5ecb874)\n- [소프트웨어 디자인 관점에서 바라본 아토믹 디자인의 의미와 한계](https://overthecode.io/the-meaning-and-limits-of-atomic-design-from-a-software-design-perspective/)\n- [JHipster 프레임워크 기초](https://devocean.sk.com/blog/techBoardDetail.do?ID=163249)\n- [[AssetManager] 리액트에서 에셋 상수관리를 간편하게!](https://nookpi.tistory.com/97)\n- [웹브라우저에서 동작하는 녹화앱 만들기](https://medium.com/watcha/%EC%9B%B9%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90%EC%84%9C-%EB%8F%99%EC%9E%91%ED%95%98%EB%8A%94-%EB%85%B9%ED%99%94%EC%95%B1-%EB%A7%8C%EB%93%A4%EA%B8%B0-70142ce28994)\n- [개발자 취업 산업군 5대장](https://youtu.be/KTu7sTWCFr8)\n- [webRTC 미디어 연결방식(p2p,sfu,mcu)](https://6987.tistory.com/entry/WebRTC-%EB%AF%B8%EB%94%94%EC%96%B4-%EC%97%B0%EA%B2%B0-%EB%B0%A9%EC%8B%9D-MCU-SFU-P2P)\n- [WebRTC는 어떻게 실시간으로 데이터를 교환할 수 있을까?](https://wormwlrm.github.io/2021/01/24/Introducing-WebRTC.html)\n- [Hostname과 Domain name의 차이](http://www.differencebetween.net/technology/difference-between-hostname-and-domain-name/)\n- [CPU는 어떻게 동작하는가](https://www.youtube.com/watch?v=Fg00LN30Ezg&ab_channel=bRd3D)\n- [코루틴(Coroutine)](https://sungjk.github.io/2021/08/01/what-is-coroutine.html)\n- [URI 직렬화로 알아보는 문자열 타입 추론하기 (부제: 타입스크립트 실전 7가지 기술)](https://medium.com/benx-tech-blog/uri-%EC%A7%81%EB%A0%AC%ED%99%94%EB%A1%9C-%EC%95%8C%EC%95%84%EB%B3%B4%EB%8A%94-%EB%AC%B8%EC%9E%90%EC%97%B4-%ED%83%80%EC%9E%85-%EC%B6%94%EB%A1%A0%ED%95%98%EA%B8%B0-%EB%B6%80%EC%A0%9C-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%8B%A4%EC%A0%84-7%EA%B0%80%EC%A7%80-%EA%B8%B0%EC%88%A0-3613e0dd1619)\n- [Jackson의 확장 구조를 파헤쳐 보자](https://d2.naver.com/helloworld/0473330)\n- [카트 개발 연대기](https://helloworld.kurly.com/blog/my-cart-development-history/)\n- [Generative Adversarial Networks를 이용한 Nickface 개발](https://tech.kakao.com/2021/08/04/nickface/)\n- [2021년도 개발자 에코시스템 현황](https://blog.jetbrains.com/ko/blog/2021/07/16/the-state-of-developer-ecosystem-2021/)\n- [Node.js best practices list (July 2021)](https://dev.to/alexandrefreire/node-js-best-practices-list-july-2021-3p4k?fbclid=IwAR3S4DkXiAjZ5OYoNcipdra23qBPSLq3OgvnnlXNMrLQdjVYXfn9xgz_sQY)\n- [좋은 코드란 무엇일까?](https://jbee.io/etc/what-is-good-code/)\n- [데이터 분석 결과를 효과적으로 제공하기 위한 그래프 데이터베이스 구축](https://d2.naver.com/helloworld/8446520)\n- [Spring Cloud Config & Cloud Bus 정리](https://cheese10yun.github.io/spring-config-client/)\n- [우리회사는 왜 애자일 전환에 실패했을까?](https://yozm.wishket.com/magazine/detail/917/)\n- [nGrinder에 적용한 HttpCore 5와 HttpCore 5 살펴보기](https://d2.naver.com/helloworld/0881672)\n- [Vanilla Javascript로 Vuex와 Redux 같은 상태관리 시스템 만들기](https://junilhwang.github.io/TIL/Javascript/Design/Vanilla-JS-Store/)\n- [Spring Config Server 정리](https://cheese10yun.github.io/spring-config-server/)\n- [Jetpack Compose가 필요한 이유(Mental Model)](https://wooooooak.github.io/jetpack%20compose/2021/05/18/%EC%BB%B4%ED%8F%AC%EC%A6%88%EA%B0%80%ED%95%84%EC%9A%94%ED%95%9C%EC%9D%B4%EC%9C%A0/)\n- [코딩하는 AI, Copilot](https://medium.com/ai-networkkr/ai-%EB%AA%A8%EB%8D%B8-%ED%83%90%ED%97%98%EA%B8%B0-14-%EC%BD%94%EB%94%A9%ED%95%98%EB%8A%94-%EC%9D%B8%EA%B3%B5%EC%A7%80%EB%8A%A5-copilot-803f12fc81aa)\n- [브라우저에서 미디어 권한을 다루는 간단 tip](https://medium.com/watcha/%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90%EC%84%9C-%EB%AF%B8%EB%94%94%EC%96%B4-%EA%B6%8C%ED%95%9C%EC%9D%84-%EB%8B%A4%EB%A3%A8%EB%8A%94-%EA%B0%84%EB%8B%A8-tip-ee9e42ce9cb1)\n- [한국어 자연어 이해 벤치마크 데이터 셋, KLUE](https://medium.com/ai-networkkr/%EB%AA%A8%EB%91%90%EC%9D%98-ai-%ED%95%9C%EA%B5%AD%EC%96%B4-%EC%9E%90%EC%97%B0%EC%96%B4-%EC%9D%B4%ED%95%B4-%EB%B2%A4%EC%B9%98%EB%A7%88%ED%81%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%85%8B-klue-eaeab688f035)\n- [누가 자바스크립트를 파괴할 수 있을까?](https://pawsong.medium.com/%EB%88%84%EA%B0%80-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%ED%8C%8C%EA%B4%B4%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C-bf22cab6d155))\n- [Kafka 기본 개념 (토픽, 파티션, 성능, 고가용성, 프로듀서, 컨슈머, 에러처리)](https://sjh836.tistory.com/186)\n- [video tag React 컴포넌트로 custom 하기](https://ideveloper2.dev/blog/2020-06-27--video-tag-react-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A1%9C-custom-%ED%95%98%EA%B8%B0/)\n- [초보를 위한 Git / GitHub 안내서](https://subicura.com/git)\n- [Video to GIF with WASM](https://fireship.io/lessons/wasm-video-to-gif/)\n- [Elasticsearch APM](https://cheese10yun.github.io/elk-apm-1/)\n- [️INVESTING.COM 클론 코딩(feat. Vue JS SSR, CANVAS API)](https://zuminternet.github.io/zum-front-investing-clone/)\n- [Headless UI Library란?](https://jbee.io/react/headless-concept/)\n- [React Query 를 통하여 서버 데이터 관리하기](https://link.medium.com/Zq0IuPx67hb)\n- [Conomi App ReactNative -> Native 전환과 관련된 이야기](https://medium.com/naver-place-dev/conomi-app-reactnative-native-%EC%A0%84%ED%99%98%EA%B3%BC-%EA%B4%80%EB%A0%A8%EB%90%9C-%EC%9D%B4%EC%95%BC%EA%B8%B0-3dec647f2eda)\n- [Serverless 환경에서 수행시간이 긴 작업 처리하기](http://labs.brandi.co.kr/2021/05/31/kimms4.html)\n- [Top Java Collection Interview Questions for 2021](https://dzone.com/articles/top-java-collection-interview-questions-for-2021)\n- [왜 개발자는 잘못된 기술 선택을 밥 먹듯이 하나?](https://kingofbackend.tistory.com/129)\n- [jpql 동작 방식과 isolation 개념 설명](https://cheese10yun.github.io/jpa-jpql/)\n- [Windows 11에서 요구하는 시스템 최소 사양](https://www.lainyzine.com/ko/article/windows-11-minimum-hardware-requirements-overview/)\n- [웹서비스에 필수! CDN이 뭔가요?](https://youtu.be/_kcoeK0ITkQ)\n- [프론트엔드 테스트의 모든 것](https://medium.com/wantedjobs/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9D%98-%EB%AA%A8%EB%93%A0-%EA%B2%83-48912486f72d)\n- [[Kubernetes] ConfigMap / Secret](https://ooeunz.tistory.com/128)\n- [JAVA 최대 스레드 생성 테스트 해보기](https://youtu.be/arMtV397x0A)\n- [사이드프로젝트에서 시드투자 받기까지 6개월동안 디스콰이엇을 개발하면서 배운 10가지 - 1편](https://www.disquiet.tech/post/disquiet-seed-round-retrospective-1)\n- [git stash 사용법: 커밋하지 않고 변경사항 저장하는 방법](https://www.lainyzine.com/ko/article/git-stash-usage-saving-changes-without-commit/)\n- [개발바보들 1화 - git & Back to the Future](http://www.devpools.kr/2017/01/31/%EA%B0%9C%EB%B0%9C%EB%B0%94%EB%B3%B4%EB%93%A4-1%ED%99%94-git-back-to-the-future/)\n- [10 Modern JavaScript Tricks Every Developer Should Use](https://link.medium.com/s0vQkHuathb)\n- [원티드는 어떻게 AI로 채용 결과를 예측하고 매칭할까?](https://medium.com/wantedjobs/%EC%9B%90%ED%8B%B0%EB%93%9C%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-ai%EB%A1%9C-%EC%B1%84%EC%9A%A9-%EA%B2%B0%EA%B3%BC%EB%A5%BC-%EC%98%88%EC%B8%A1%ED%95%98%EA%B3%A0-%EB%A7%A4%EC%B9%AD%ED%95%A0%EA%B9%8C-7bdcd8840b6b)\n- [초보 웹 개발자를 위한 학습 안내서](https://subicura.com/2021/06/27/study-guide.html)\n- [웹개발 짜증유발자! CORS가 뭔가요?](https://youtu.be/bW31xiNB8Nc)\n- [Password authentication is temporarily disabled as part of a brownout. Please use a personal access token instead.](https://medium.com/elecle-bike/password-authentication-is-temporarily-disabled-as-part-of-a-brownout-c507835b87f5)\n- [Dozer Mapper 사용 방법](https://narup.tistory.com/31)\n- [주니어 프론트엔드 개발자의 채용 프로세스 참여 후기](https://zuminternet.github.io/zum-front-recurit-review/)\n- [Declarative and Scalable Testing With React Testing Library](https://javascript.plainenglish.io/declarative-and-scalable-testing-with-react-testing-library-177f35f41396)\n- [객체지향 5원칙 (SOLID)은 구시대의 유물 ?](https://mangsby.com/blog/programming/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-5%EC%9B%90%EC%B9%99-solid%EC%9D%80-%EA%B5%AC%EC%8B%9C%EB%8C%80%EC%9D%98-%EC%9C%A0%EB%AC%BC%EC%9D%B8%EA%B0%80/)\n- [제목은 Vue에서의 데이터 시각화로 하겠습니다, 근데 이제 Chart.js를 곁들인](https://wormwlrm.github.io/2021/07/02/Data-Visualization-with-Chart-js.html)\n- [자바스크립트와 V8 엔진의 메모리 관리 프로세스](https://medium.com/naver-place-dev/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-v8-%EC%97%94%EC%A7%84%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-f45091e696e1)\n- [메타버스, 시공간을 초월하다](https://www.samsungpop.com/streamdocs/mail/sd;streamdocsId=TNS_QbepZTrWfWpo3ZFk_nSvn7UihrEA4XKfl2lYWbU)\n- [엔터프라이즈 프론트엔드 애플리케이션 아키텍쳐](https://medium.com/class101/%EC%97%94%ED%84%B0%ED%94%84%EB%9D%BC%EC%9D%B4%EC%A6%88-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90-79eef2e30c77)\n- [yarn berry 적용기](https://medium.com/wantedjobs/yarn-berry-%EC%A0%81%EC%9A%A9%EA%B8%B0-1-e4347be5987)\n- [스크린을 침범하는 노치, 펀치홀 어떻게 미리 볼 수 있을까?](https://riiidtechblog.medium.com/%EC%8A%A4%ED%81%AC%EB%A6%B0%EC%9D%84-%EC%B9%A8%EB%B2%94%ED%95%98%EB%8A%94-%EB%85%B8%EC%B9%98-%ED%8E%80%EC%B9%98%ED%99%80-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%AF%B8%EB%A6%AC-%EB%B3%BC-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C-e61c21e40858)\n- [기술부채가 쌓여있는 상황에서 서비스 성능 임팩트 있게 개선하기](https://medium.com/class101/%EA%B8%B0%EC%88%A0%EB%B6%80%EC%B1%84%EA%B0%80-%EC%8C%93%EC%97%AC%EC%9E%88%EB%8A%94-%EC%83%81%ED%99%A9%EC%97%90%EC%84%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%84%B1%EB%8A%A5-%EC%9E%84%ED%8C%A9%ED%8A%B8-%EC%9E%88%EA%B2%8C-%EA%B0%9C%EC%84%A0%ED%95%98%EA%B8%B0-b4c6d8ccc9c6)\n- [남들 모르는 크롬 개발자도구 소소한 기능 8개](https://www.youtube.com/watch?v=toXJLUa7i0Y)\n- [주니어 개발자의 2021년 상반기 회고](https://junilhwang.github.io/TIL/Review/2021-year/01-First-Quarter)\n- [소프트웨어 (SW) 개발 경험이 먼저다](http://channy.creation.net/blog/1477)\n- [Github actions로 리액트 자동배포하기(S3, EC2, Code Deploy, Centos, Nginx, React.js)](https://namunamu1105.medium.com/github-actions%EB%A1%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%9E%90%EB%8F%99%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0-s3-ec2-code-deploy-centos-nginx-react-js-e6f54a6e69bc)\n- [쿠팡 출신 개발자의 A/B 테스트 플랫폼 MVP 개발기](https://www.youtube.com/watch?v=w7JHb60zk9k)\n- [29CM 로그 수집 시스템 소개](https://medium.com/29cm/29cm-%EB%A1%9C%EA%B7%B8-%EC%88%98%EC%A7%91-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%86%8C%EA%B0%9C-e7955d7deec6)\n- [A TypeScript Express Starter App](https://morioh.com/p/8cd90da6e9c5?f=5c224490c513a556c9042463)\n- [Redis Getting Started](https://cheese10yun.github.io/redis-getting-started/)\n- [Chromium이 발표한 RenderingNG가 무엇인가?](https://meetup.toast.com/posts/293)\n- [취업을 위한 포트폴리오는 어떻게 준비해야하나요?](https://velog.io/@couchcoding/%EC%B7%A8%EC%97%85%EC%9D%84-%EC%9C%84%ED%95%9C-%ED%8F%AC%ED%8A%B8%ED%8F%B4%EB%A6%AC%EC%98%A4%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%A4%80%EB%B9%84%ED%95%B4%EC%95%BC%ED%95%98%EB%82%98%EC%9A%94)\n- [클래스101의 디자인 시스템, One Product System](https://medium.com/class101/%ED%81%B4%EB%9E%98%EC%8A%A4101%EC%9D%98-%EB%94%94%EC%9E%90%EC%9D%B8-%EC%8B%9C%EC%8A%A4%ED%85%9C-one-product-system-35681c551343)\n- [누가 자바스크립트를 파괴할 수 있을까?](https://pawsong.medium.com/%EB%88%84%EA%B0%80-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-%ED%8C%8C%EA%B4%B4%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C-bf22cab6d155)\n- [이쁜 Code Image 만들기 'SNS별 테마 템플릿'](https://codeimg.io/)\n- [엔터프라이즈 프론트엔드 애플리케이션 아키텍쳐](https://medium.com/class101/%EC%97%94%ED%84%B0%ED%94%84%EB%9D%BC%EC%9D%B4%EC%A6%88-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90-79eef2e30c77)\n- [라인개발자들의 webpack 레퍼런스 번역](https://www.youtube.com/watch?v=yZtFgREvdBU&t=369s)\n- [개발자에게는 어떤 능력이 필요한가?](https://euncho.medium.com/%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%97%90%EA%B2%8C%EB%8A%94-%EC%96%B4%EB%96%A4-%EB%8A%A5%EB%A0%A5%EC%9D%B4-%ED%95%84%EC%9A%94%ED%95%9C%EA%B0%80-f2bb22fdc0ad)\n- [Cache에 대하여.. (Spring+EHCache)](https://jaehun2841.github.io/2018/11/07/2018-10-03-spring-ehcache/)\n- [518일동안 단 하루도 빠지지 않고 알고리즘을 풀었다.](https://kwiki.devserum.com/ko/articles/tech-articles/2021-05-31-518-consecutive-days-algorithm-challenge)\n- [쏘카 데이터 그룹 - Airflow와 함께한 데이터 환경 구축기(feat. Airflow on Kubernetes)](https://tech.socarcorp.kr/data/2021/06/01/data-engineering-with-airflow.html)\n- [Spring Batch Reader 성능 분석 및 측정](https://cheese10yun.github.io/spring-batch-reader-performance/)\n- [2021 구글 I/O: 구글의 AI는 어디까지 왔을까요?](https://medium.com/ai-networkkr/2021-%EA%B5%AC%EA%B8%80-i-o-%EA%B5%AC%EA%B8%80%EC%9D%98-ai%EB%8A%94-%EC%96%B4%EB%94%94%EA%B9%8C%EC%A7%80-%EC%99%94%EC%9D%84%EA%B9%8C%EC%9A%94-ef99155607f9)\n- [dbt로 ELT 파이프라인 효율적으로 관리하기](https://www.humphreyahn.dev/blog/efficient-elt-pipelines-with-dbt)\n- [Fast API 로 3시간만에 추천 서버 만들기 (implicit, docker, gitlabCI)](https://school-of-life.tistory.com/166)\n- [29CM 상품 대량등록 기능 소개](https://grey82.medium.com/29cm-%EC%83%81%ED%92%88-%EB%8C%80%EB%9F%89%EB%93%B1%EB%A1%9D-%EA%B8%B0%EB%8A%A5-%EC%86%8C%EA%B0%9C-7ba796aef385)\n- [NDC 2021](https://ndc.nexon.com/session/sessionSchedule)\n- [웹 개발을 위해 꼭 알아야하는 보안 공격](https://present.do/decks/60bf91801903093a77d160ed/embed?page=29)\n- [(JPA) persist vs merge](https://perfectacle.github.io/2021/06/13/entity-manager-persist-vs-merge)\n- [느려터진 Spring Rest Docs Test? SpringContext, @MockBean 없이 빠르고 효과적으로 사용하기](https://geminikim.medium.com/%EB%8A%90%EB%A0%A4%ED%84%B0%EC%A7%84-spring-rest-docs-test-springcontext-mockbean-%EC%97%86%EC%9D%B4-%EB%B9%A0%EB%A5%B4%EA%B3%A0-%ED%9A%A8%EA%B3%BC%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-dc36861493c9)\n- [Spring Batch Reader 성능 분석 및 측정 part 2\nHibernateCursorItemReader 측정 및 분석](https://cheese10yun.github.io/spring-batch-reader-performance-2/)\n- [테스트를 작성하는 방법](https://blog.kingbbode.com/m/52)\n- [윈도우 11 사용후기](https://lunacellstone.tistory.com/144)\n- [React ref 톺아보기](https://woowacourse.github.io/javable/post/2021-05-15-react-ref)\n- [CEO가 뽑고 싶은 개발자](https://youtu.be/3H4umWD5bwI)\n- [2021 next conf 후기](https://nookpi.tistory.com/m/82)\n- [백엔드 개발자를 꿈꾸는 학생개발자에게](https://d2.naver.com/news/3435170)\n- [LINE에서 하루 만에 정적 웹 페이지 개발해서 배포하는 방법](https://engineering.linecorp.com/ko/blog/how-to-quickly-develop-static-pages-in-line/)\n- [jwt 보다 session이 안전할까?](https://github.com/boojongmin/memo/issues/7)\n- [비동기를 사랑한 오픈소스 개발자](https://engineering.linecorp.com/ko/blog/line-developer-interview-3/)\n- [멋진 스타트업처럼 토이 프로젝트하는 비결 🚀](https://velog.io/@ajufresh/%EB%98%91%EB%98%91%ED%95%9C-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85%EC%B2%98%EB%9F%BC-%ED%86%A0%EC%9D%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%ED%95%98%EB%8A%94-%EB%B9%84%EA%B2%B0)\n- [프로그래밍은 쉬워요](https://sungdoo.dev/retrospective-or-psa/programming-is-easy/)\n- [옛날 개발자의 맥북 이틀 사용 후기](https://brunch.co.kr/@springboot/195)\n- [TOSS SLASH21 — 테스트커버리지 100% 요약/DEMO](https://byungkyu-ju.medium.com/toss-slash21-%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%BB%A4%EB%B2%84%EB%A6%AC%EC%A7%80-100-%EC%9A%94%EC%95%BD-demo-2fb8b52cf2a9)\n- [메이커스토리 8 - 신입 개발자분들이 유명해졌으면 좋겠어요](https://www.disquiet.tech/post/makerstory-8)\n- [자바스크립트 동작의 삼위일체! - V8, Web API, Event Loop](https://kingofbackend.tistory.com/120)\n- [웹을 지탱하는 기술](https://www.slideshare.net/guruguru/ss-14241987)\n- [Airbnb의 이벤트 로그 처리](https://brunch.co.kr/@sonjoosik/3)\n- [Spring 레플리케이션 트랜잭션 처리 방식](https://cheese10yun.github.io/spring-transaction/)\n- [LINE 광고 서버 개발 팀의 DevOps 문화](https://engineering.linecorp.com/ko/blog/line-ads-devops-culture)\n- [node_modules로부터 우리를 구원해 줄 Yarn Berry](https://toss.tech/article/node-modules-and-yarn-berry)\n- [PostgreSQL Autovacuum 장애 대응기 (1)](https://medium.com/29cm/postgresql-autovacuum-%EC%9E%A5%EC%95%A0-%EB%8C%80%EC%9D%91%EA%B8%B0-1-8284955c0193)\n- [AI 모델 성능을 효율적으로 높이는 방법: 앤드류 응 교수님의 “데이터 중심의 AI”](https://medium.com/ai-networkkr/ai-%EB%AA%A8%EB%8D%B8-%EC%84%B1%EB%8A%A5%EC%9D%84-%EC%89%BD%EA%B3%A0-%EB%B9%A0%EB%A5%B4%EA%B2%8C-%EB%86%92%EC%9D%B4%EB%8A%94-%EB%B0%A9%EB%B2%95-%EC%95%A4%EB%93%9C%EB%A5%98-%EC%9D%91-%EA%B5%90%EC%88%98%EB%8B%98%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A4%91%EC%8B%AC%EC%9D%98-ai-6595fa054ce6)\n- [GitHub 멀티 어카운트를 사용할 때 유용한 Git 설정](https://www.lainyzine.com/ko/article/useful-git-settings-when-using-github-multi-account/)\n- [자바스크립트(JavaScript)로 배우는 피지컬 컴퓨팅(Physical Computing) — (1/8) 시작하기](https://niklauslee.medium.com/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-javascript-%EB%A1%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-%ED%94%BC%EC%A7%80%EC%BB%AC-%EC%BB%B4%ED%93%A8%ED%8C%85-physical-computing-1-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-631f4c2e46b9)\n- [코틀린 ORM 프레임워크](https://cheese10yun.github.io/exposed/)\n- [당근마켓 AI의 데이터 활용 방법](https://medium.com/daangn/%EB%8B%B9%EA%B7%BC%EB%A7%88%EC%BC%93-ai%EC%9D%98-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%99%9C%EC%9A%A9-%EB%B0%A9%EB%B2%95-e5aeac08bc57)\n- [Scope와 Hoisting, Closure](https://ko-dev-jp.com/2021/05/16/js-scope-hoisting-closure/)\n- [2020년 회고](https://jojoldu.tistory.com/575)\n- [짝프로그래밍을 통해 자라기](https://techblog.deepnatural.ai/2021/04/19/pair-programming)\n- [손목, 소모품입니다 (수술까지 한 개발자의 개발 장비 이야기)](https://world.hey.com/bach/post-cadaa79b)\n- [반응형 프로그래밍이 뭔가요?](https://youtu.be/KDiE5qQ3bZI)\n- [웹 크롤링과 아키텍쳐](https://velog.io/@mowinckel/%EC%9B%B9-%ED%81%AC%EB%A1%A4%EB%A7%81%EA%B3%BC-%EC%95%84%ED%82%A4%ED%85%8D%EC%B3%90)\n- [코더](https://sangminpark.blog/2021/05/11/%ec%bd%94%eb%8d%94/)\n- [개발자 협업 역량의 핵심 - \"업무 가시성\"](https://taeho.io/pages/5d36a0ef-1e17-4957-b075-b5df5ffd9436)\n- [퇴사 부검](https://woowabros.github.io/experience/2021/04/18/autopsy.html)\n- [Which is the fastest web framework?](https://github.com/the-benchmarker/web-frameworks)\n- [MySQL에서 'a' = 'a '가 true로 평가된다?](https://woowabros.github.io/study/2018/02/26/mysql-char-comparison.html)\n- [[Real MySQL] 7. 쿼리 작성 및 최적화](https://wbluke.tistory.com/30)\n- [더 이상 어버버하지말자!! 스레드와 프로세스](https://kingofbackend.tistory.com/119)\n- [다시 돌아보는 기본 : 서브넷의 이해 - ITWorld Korea -](https://www.itworld.co.kr/news/191458)\n- [JWT는 어디에 저장해야할까? - localStorage vs cookie](https://velog.io/@0307kwon/JWT%EB%8A%94-%EC%96%B4%EB%94%94%EC%97%90-%EC%A0%80%EC%9E%A5%ED%95%B4%EC%95%BC%ED%95%A0%EA%B9%8C-localStorage-vs-cookie?utm_source=gaerae.com&utm_campaign=%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%8A%A4%EB%9F%BD%EB%8B%A4&utm_medium=social)\n- [개발자가 맥북이 아니라 리눅스 플랫폼을 사용하는 이유](https://stricky.tistory.com/422)\n- [트위터는 왜 모니터링 시스템을 다시 만들었나?](https://blog.imqa.io/twitter_monitoring_system_v2/?fbclid=IwAR2ryxuPXarR-TAd55Bx3WTBzqqzhsUPBFHv0AZev0ZM_mnodL4qBZmWnNo)\n- [게임 소프트웨어 개발자가 되려면?](http://ndcreplay.nexon.com/NDC2016/sessions/NDC2016_0040.html#k%5B%5D=%EB%B0%95%EC%A2%85%EC%B2%9C)\n- [테스트 커버리지 100%](https://youtu.be/jdlBu2vFv58)\n- [Kotlin으로 Spring 개발할 때](https://cheese10yun.github.io/spring-kotlin/)\n- [40대 개발자의 회고… 몇 살까지 개발할 수 있을까](https://brunch.co.kr/@springboot/525)\n- [프로그래밍은 쉬워요](https://sungdoo.dev/retrospective-or-psa/programming-is-easy/)\n- [주니어개발자들의 40주간 사이드프로젝트 진행기](https://deveric.tistory.com/119)\n- [LINE 광고 플랫폼의 MSA 환경에서 Zipkin을 활용해 로그 트레이싱하기](https://engineering.linecorp.com/ko/blog/line-ads-msa-opentracing-zipkin/)\n- [데이터 엔지니어 두 번째 취준 회고록](https://tansfil.tistory.com/66)\n- [쉽게 알아보는 서버 인증 1편(세션/쿠키, JWT)](https://tansfil.tistory.com/58#comment6076580)\n- [Ktlint 코드 스타일 검사](https://cheese10yun.github.io/ktlint/)\n- [Jenkins를 사용하여 GitHub에서 Azure Kubernetes Service로 배포(2) - Jenkins와 GitLab 연동 -](https://paris-in-the-rain.tistory.com/m/107)\n- [실리콘 밸리의 엔지니어링 매니저(리더)들은 대체 무엇을 하는가? (1~2)](https://sendbird.com/ko/blog/eng-leader-role-1)\n- [GraphQL vs REST vs gRPC](https://medium.com/devops-dudes/graphql-vs-rest-vs-grpc-411a0a60d18d)\n- [컴파일러는 어떻게 내가 작성한 코드를 인식하는걸까?](https://wormwlrm.github.io/2021/04/18/Formal-Language-and-Compiler.html)\n- [Java의 예외 처리](https://johngrib.github.io/wiki/java-exception-handling/)\n- [한글 코딩, 어디까지 허용할까?](https://medium.com/zigbang/%ED%95%9C%EA%B8%80-%EC%BD%94%EB%94%A9-%EC%96%B4%EB%94%94%EA%B9%8C%EC%A7%80-%ED%97%88%EC%9A%A9%ED%95%A0%EA%B9%8C-581d484ffa17)\n- [Sentry로 사내 에러 로그 수집 시스템 구축하기](https://engineering.linecorp.com/ko/blog/log-collection-system-sentry-on-premise/)\n- [grpc란, proto3 문법, spring boot grpc 연동](https://qwer9412.tistory.com/35)\n- [LINE의 QA는 어떻게 일할까?](https://engineering.linecorp.com/ko/blog/about-line-qa/)\n- [지속 성장 가능한 소프트웨어를 만들어가는 방법](https://geminikim.medium.com/%EC%A7%80%EC%86%8D-%EC%84%B1%EC%9E%A5-%EA%B0%80%EB%8A%A5%ED%95%9C-%EC%86%8C%ED%94%84%ED%8A%B8%EC%9B%A8%EC%96%B4%EB%A5%BC-%EB%A7%8C%EB%93%A4%EC%96%B4%EA%B0%80%EB%8A%94-%EB%B0%A9%EB%B2%95-97844c5dab63)\n- [CDC & CDC Sink Platform 개발 1편 - CDC Platform 개발](https://hyperconnect.github.io/2021/01/11/cdc-platform.html)\n- [Node.js에 관한 10가지 후회 - 라이언 달과 Deno.js](https://kingofbackend.tistory.com/112)\n- [streaming API를 사용한 네이버페이의 대형 XLSX 파일 다운로드 구현](https://d2.naver.com/helloworld/9423440)\n- [GitOps와 ArgoCD](https://coffeewhale.com/kubernetes/gitops/argocd/2020/02/10/gitops-argocd/)\n- [9 tips to Increase your Java performance [영문]](https://sendilkumarn.com/blog/9-tips-to-increase-your-java-performance)\n- [한달 10만원으로 추천시스템 구축하기](https://dq-dreamsearch.com/121)\n- [리액트 다크모드 구현하기 feat. styled-components & context API](https://velog.io/@gparkkii/reactdarkmode)\n- [How Wix improved website performance by evolving their infrastructure](https://web.dev/wix/)\n- [프론트엔드 개발자라면 알고 있어야 할 브라우저의 동작 과정](https://wormwlrm.github.io/2021/03/27/How-browsers-work.html)\n- [효율적인 프런트엔드 에러 핸들링](https://jbee.io/react/error-declarative-handling-0)\n- [5수생 개발자 2020회고](https://highjune.dev/memoires/memoires2020/)\n- [Resilience4j, Spring Retry 재시도 패턴 구현](https://brunch.co.kr/@springboot/580)\n- [아무 관심 없던 @Retention 어노테이션 정리(RetentionPolicy SOURCE vs CLASS vs RUNTIME)](https://jeong-pro.tistory.com/234)\n- [토이프로젝트 : 공모주 알리기 개발 후기 1부](https://taetaetae.github.io/posts/public-offering-notice-1/)\n- [카나리 테스트와 함께하는 안전한 서버 배포](https://engineering.vcnc.co.kr/2021/04/canary)\n- [마이리얼트립 EDW(Enterprise Data Warehouse) 구축 : phase 1](https://medium.com/myrealtrip-product/%EB%A7%88%EC%9D%B4%EB%A6%AC%EC%96%BC%ED%8A%B8%EB%A6%BD-edw-%EA%B5%AC%EC%B6%95-phase-1-7d32c49c96ec)\n- [커밋 메시지 주도 개발](https://gyuwon.github.io/blog/2021/04/04/commit-message-driven-development.html)\n- [구글, 애플에 있는 UX 엔지니어가 토스에 있는 이유](https://blog.toss.im/2021/04/06/tossteam/insight/ux-engineer-interview)\n- [29CM 상품 할인 / 환원 배치 성능 향상시키기](https://medium.com/29cm/29cm-%EC%83%81%ED%92%88-%ED%95%A0%EC%9D%B8-%ED%99%98%EC%9B%90-%EC%84%B1%EB%8A%A5-%ED%96%A5%EC%83%81%EC%8B%9C%ED%82%A4%EA%B8%B0-f9af6afe5ab4)\n- [내 포트폴리오가 서류탈락인 이유](https://cafe.naver.com/pseudodev/25)\n- [뉴크루 온보딩 코드 리뷰어로 참여하기 – 카카오는 주니어와 함께 성장합니다.](https://tech.kakao.com/2021/04/08/welcome-new-krew3)\n- [개발자 부업, 어디까지 해봤니?](https://taegon.kim/archives/10292)\n- [CodeReview에 대해...](https://www.youtube.com/watch?v=FJNV_qoRRks)\n- [npm부터 yarn](https://www.cleancoder.dev/package-manager-history/)\n- [React Clean Code를 위한 팁 [번역]](https://one-it.tistory.com/entry/%EB%B2%88%EC%97%AD-React-Clean-Code%EB%A5%BC-%EC%9C%84%ED%95%9C-%ED%8C%81)\n- [카카오지도 오류시 참고 (0322부터 잘못된 방법으로 앱키 사용 시 사용 제한)](https://devtalk.kakao.com/t/api/112872)\n- [이모지의 모든것](https://www.inflearn.com/pages/weekly-inflearn-26?utm_source=pinpoint&utm_medium=email&utm_campaign=weekly-inflearn&utm_content=26)\n- [2021 리액트 생태계 현황](https://www.sizplay.dev/react/2021-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EC%83%9D%ED%83%9C%EA%B3%84-%ED%98%84%ED%99%A9)\n- [그 회사 가면 호갱인거 알제?? - 개발자를 위한 좋은 회사 고르는 비법](https://youtu.be/OgLCPNCvgik)\n- [https로 React 로컬 테스팅하기](https://velog.io/@yaytomato/React-웹사이트-https로-로컬-테스팅하기)\n- [GitLab Server SSL 적용](https://paris-in-the-rain.tistory.com/m/103?category=916006)\n- [Jenkins에서 Kubernetes 플러그인을 이용해 보다 쉽고 효율적으로 성능 테스트하기](https://engineering.linecorp.com/ko/blog/performance-test-in-jenkins-run-dynamic-pod-executors-in-kubernetes-parallelly/)\n- [스타트업, 그리고 개발이야기](https://brunch.co.kr/brunchbook/chickenmoim)\n- [WebAIM: History of the browser user-agent string](https://webaim.org/blog/user-agent-string-history/)\n- [비개발자 동료를 위한 Bitbar 자동 세팅 스크립트 go로 짜보기](https://jiyeonseo.github.io/2021/03/02/go-app-for-everyone/)\n- [프로그래밍 언어별 DBMS 개발환경 구축 한방에 끝내기](https://velog.io/@maru/Nix-프로그래밍-언어별-DBMS-개발환경-구축-한방에-끝내기)\n- [데이터 사이언스의 학습 로드맵 [번역]](https://ebadak.news/2021/03/20/data-science-learning-roadmap/)\n- [업무스트레스에 미쳐버린 토끼의 기초보안 강좌 [영상]](https://youtu.be/dHcjwTvrxTk)\n- [개발자 한 명이 백 명의 일을 할수 있나?](http://www.ikwisdom.com/2021/03/100.html?m=1)\n- [Mac에서 개발 환경 (IntelliJ 기반) 꾸미기](https://jojoldu.tistory.com/556)\n- [지루하지 않게 코노미 사진 4만장 어노테이션하기 (머신러닝과 함께)](https://medium.com/naver-place-dev/%EC%A7%80%EB%A3%A8%ED%95%98%EC%A7%80-%EC%95%8A%EA%B2%8C-%EC%BD%94%EB%85%B8%EB%AF%B8-%EC%82%AC%EC%A7%84-4%EB%A7%8C%EC%9E%A5-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%ED%95%98%EA%B8%B0-%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D%EA%B3%BC-%ED%95%A8%EA%BB%98-619c60f8a071)\n- [로드밸런서(Load Balancer)는 왜 필요할까?](https://kingofbackend.tistory.com/106)\n- [직접 보고 추천하는 머신러닝 & 딥러닝 & 관련 수학 총.정.리. (2021)](https://www.philgineer.com/2020/10/awesome-machine-learning.html)\n- [가게 배달지역 관리방식 개편 프로젝트](https://woowabros.github.io/experience/2021/02/27/s2-project.html)\n- [곧 대세될 heic, 아직은 아이폰에서만 사용 가능? HEIF(HEIC)에 대해 알아보자](https://blog.naver.com/PostView.nhn?blogId=musediet&logNo=222252856340&proxyReferer=&proxyReferer=)\n- [Open Distro for Elasticsearch — 로그를 활용한 장애 탐지](https://medium.com/29cm/open-distro-for-elasticsearch-%EB%A1%9C%EA%B7%B8%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%9E%A5%EC%95%A0-%ED%83%90%EC%A7%80-8ff60dc3e5f)\n- [Bridging the gap between coroutines, threads, and concurrency problems](https://medium.com/androiddevelopers/bridging-the-gap-between-coroutines-jvm-threads-and-concurrency-problems-864e563bd7c)\n- [2021 프로그래머스 개발자 설문조사 결과](https://programmers.co.kr/pages/2021-dev-survey)\n- [Gatsby로 개인 개발 블로그 만들기](https://suitee.me/getting-started-gatsby/)\n- [promise.all / promise.allSettled 차이](https://nookpi.tistory.com/65)\n- [MongoDB 이해하기](https://kciter.so/posts/about-mongodb)\n- [Clone Wars - Open source clones of popular sites](https://gourav.io/clone-wars)\n- [프로덕션 서버에서 데이터 마이그레이션 하기](https://velog.io/@team_croco/production-data-migration)\n- [지원자도 회사를 평가합니다. 이렇게요.](https://brunch.co.kr/@goodgdg/142)\n- [주니어 백엔드 개발자의 AWS 인프라 구축](https://www.notion.so/42a5539ef49648e294deedb733150a5d)\n- [pytorch와 함께하는 딥러닝 공부 방법, 길라잡이](https://ys-cs17.tistory.com/38)\n- [방문자 패턴 - Visitor pattern](https://thecodinglog.github.io/design/2019/10/29/visitor-pattern.html)\n- [와디즈의 디자인 시스템 구축](https://medium.com/wadiz/%EC%99%80%EB%94%94%EC%A6%88%EC%9D%98-%EB%94%94%EC%9E%90%EC%9D%B8-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EA%B5%AC%EC%B6%95-c7f32a948814)\n- [코드리뷰가 쏘아올린 작은공](https://woowabros.github.io/experience/2021/02/09/cory.html)\n- [온라인 근무와 회고](https://woowabros.github.io/culture/2021/02/10/work-together-how-product-system-team-works.html)\n- [온라인 협업 도구 노션(Notion) 장애와 DNS 문제 대응](https://www.44bits.io/ko/post/news--notion-outage-dns-issue)\n- [2020년 개발자 11년 회고](https://iamsang.com/blog/2021/01/04/2020-retro)\n- [(Spring Boot) SimpleClientHttpRequestFactory와 Connection Pool](https://perfectacle.github.io/2021/02/14/simple-client-)\n- [웹서버 구현하는글](https://velog.io/@seanlion/webserver)\n- [Kotlin Koans](https://play.kotlinlang.org/koans/)\n- [Spring Batch Test 작성 방법 및 고찰](https://cheese10yun.github.io/spring-batch-test-2/)\n- [서버 사이드 테스트 자동화 여정 – 1. 테스트 자동화를 시작한 계기와 그 첫 발걸음](https://engineering.linecorp.com/ko/blog/server-side-test-automation-journey-1/)\n- [개발자가 필히 알아야 할 ES6 10가지 기능](https://blog.asamaru.net/2017/08/14/top-10-es6-features/)\n- [2020년 회고 - 신입으로서 배운 것들](https://velog.io/@litien/%EC%97%B0%EA%B0%84-%ED%9A%8C%EA%B3%A0%EB%A1%9D-2020%EB%85%84-%ED%9A%8C%EA%B3%A0-1%EB%85%84%EC%B0%A8-%EB%B3%91%EC%95%84%EB%A6%AC-%EA%B0%9C%EB%B0%9C%EC%9E%90)\n- [GPG(GNU PG)를 이용해 git 커밋에 서명하는 방법](https://www.44bits.io/ko/post/add-signing-key-to-git-commit-by-gpg)\n- [Elastic Stack으로 코로나19 대시보드 만들기 - 1부 : 파이프라인 구성](https://taetaetae.github.io/posts/make-dashboards-from-elasticstack-1)\n- [Javascript 로 정확한 타이머 만들기](https://youtu.be/MCi6AZMkxcU)\n- [JPA Batch Insert 성능 향상기 1편 - With JPA](https://cheese10yun.github.io/jpa-batch-insert/)\n- [2021 년에 배워야 할 5 가지 고급 Java 성능 및 메모리 관리 과정](https://ichi.pro/ko/2021-nyeon-e-baewoya-hal-5-gaji-gogeub-java-seongneung-mich-memoli-gwanli-gwajeong-272347642455498)\n- [DOM 쉽게 이해하기!! 고척스카이돔 아닙니다](https://kingofbackend.tistory.com/25?category=913227)\n- [상품 피드 1차 개선 — Python 에서 Java 로!](https://medium.com/29cm/%EC%83%81%ED%92%88-%ED%94%BC%EB%93%9C-1%EC%B0%A8-%EA%B0%9C%EC%84%A0-python-%EC%97%90%EC%84%9C-java-%EB%A1%9C-29ef4840022f)\n- [개발자의 성장에 대한 이야기 (주니어, 기술, 팀, 이직, 자기PR)](https://www.youtube.com/watch?v=nN7MgO3d6cE&feature=youtu.be)\n- [5년차 개발자의 솔직한 개발자의 장단점 썰](https://www.youtube.com/watch?v=S79uGzLKVDQ)\n- [Batch Insert 성능 향상기 2편 - 성능 측정](https://cheese10yun.github.io/spring-batch-batch-insert/)\n- [효율적인 서버 관리를 찾아서, 서버리스(Serverless)](https://blog.ncsoft.com/platform-center-03-20210224)\n- [2021 우아한형제들 경력 개발자 인터뷰](https://woowabros.github.io/interview/2021/02/16/2021-interview.html)\n- [리눅스 커널(kernel)이란?](https://kingofbackend.tistory.com/100)\n- [고루틴 순서대로 실행하기, 뮤텍스 이해하기](https://miryang.dev/2021/03/03/goroutine-order-of-execution/)\n- [Edge Authentication and Token-Agnostic Identity Propagation ](https://netflixtechblog.com/edge-authentication-and-token-agnostic-identity-propagation-514e47e0b602)\n- [2020 사이버 공격 방어 대회(CCE) 예선 참가 후기 & 간단한 writeup](https://bananakun.tistory.com/40)\n- [검색을 위한 데이터 다루기](https://woowabros.github.io/woowabros/2021/03/02/search-system.html)\n- [Kubernetes의 네트워크 이슈를 해결할 수 있는 network-node-manager](https://tech.kakao.com/2021/03/03/network-node-manager/)\n- [WATCHA WEB 팀의 2020년 회고](https://medium.com/watcha/watcha-web-%ED%8C%80%EC%9D%98-2020%EB%85%84-%ED%9A%8C%EA%B3%A0-c26e411843ba)\n- [그런 개발자로 괜찮은가 - '이력서' 편](https://taetaetae.github.io/posts/a-good-developer-in-terms-of-resume/)\n- [개발자를 위한 인프라 기초 총정리](https://futurecreator.github.io/2018/11/09/it-infrastructure-basics/)\n- [당신의 클론 코딩은 왜 실패하는가?](https://geonlee.tistory.com/171)\n- [Understanding suspend function of Kotlin Coroutines](https://medium.com/mobile-app-development-publication/understanding-suspend-function-of-coroutines-de26b070c5ed)\n- [리눅스에서 네트워크 상태를 확인하는 명령어 11가지 - ITWorld Korea -](https://www.itworld.co.kr/news/180644)\n- [주니어 개발자에게 추천하는 회사는 스타트업?!](https://youtu.be/yDYY4woERDQ)\n- [이직.log(‘SoYoung’)](https://so-so.dev/essay/2021-turnover)\n- [캐시가 동작하는 아주 구체적인 원리](https://parksb.github.io/article/29.html)\n- [NextJS와 GatsbyJS 중 고민하는 당신에게](https://shylog.com/which-is-better-nextjs-or-gatsbyjs/)\n- [ip로 직접 만들어보는 네트워크 네임스페이스와 브리지 네트워크](https://www.44bits.io/ko/post/container-network-2-ip-command-and-network-namespace)\n- [입문자를 위한 리눅스/맥 커맨드라인 셸 사용법](https://www.44bits.io/ko/post/linux-and-mac-command-line-survival-guide-for-beginner)\n- [선물하기 서비스 개발기](https://medium.com/29cm/%EC%84%A0%EB%AC%BC%ED%95%98%EA%B8%B0-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B0%9C%EB%B0%9C%EA%B8%B0-c5cdca816269)\n- [어느 고졸 개발자의 10년의 회고록](https://medium.com/@geminikim/%EC%96%B4%EB%8A%90-%EA%B3%A0%EC%A1%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-10%EB%85%84%EC%9D%98-%ED%9A%8C%EA%B3%A0%EB%A1%9D-2b4226f9027e)\n- [picture elements 사용하기](https://wit.nts-corp.com/2021/02/04/6293)\n- [DevOps 테크: 트렁크 기반 개발](https://cloud.google.com/solutions/devops/devops-tech-trunk-based-development?hl=ko)\n- [우아한형제들을 떠나며](https://geminikim.medium.com/%EC%9A%B0%EC%95%84%ED%95%9C%ED%98%95%EC%A0%9C%EB%93%A4%EC%9D%84-%EB%96%A0%EB%82%98%EB%A9%B0-62544d4af69e)\n- [CKA(Certified Kubernetes Administrator) 취득 후기](https://blog.wonizz.tk/2021/02/01/certified-kubernetes-administrator/)\n- [Python package를 폐쇄망에 설치하기 (pip3)](https://finai.tistory.com/m/6)\n- [21 Bad Front-End Habits to Drop in 2021](https://dev.to/sachagreif/21-bad-front-end-habits-to-drop-in-2021-1698?ref=uxcollective)\n- [서버 개발자는 무엇부터 학습 해야할까 - 프레임워크, Git, SQL, Linux? [영상]](https://youtu.be/JfjH-uVkzAk)\n- [마이월렛: React mvvm 적용기](https://velog.io/@team_croco/mywallet-frontend-mvvm)\n- [토스가 유저에게 동기부여하는 방법](https://featured.team/article/51)\n- [익숙해지면 좋을 깃(git) 명령어 모음집](http://urbanbase.github.io/dev/2021/01/15/GitCommand.html)\n- [Go vs Java - Go에서의 객체 지향](https://umi0410.github.io/blog/golang/go-vs-java-oop)\n- [AWS에서 Serverless 100% 활용하기](https://link.medium.com/xmUfVVxYbdb)\n- [Whats New in Spring Boot 2.4 [영상]](https://youtu.be/lgyO9C9zdrg)\n- [레디스 클러스터, Read from slave](https://brunch.co.kr/@springboot/218)\n- [Spring Batch 파티셔닝(Partitioning) 활용하기](https://jojoldu.tistory.com/550)\n- [리덕스 잘 쓰고 계시나요?](https://ridicorp.com/story/how-to-use-redux-in-ridi/?utm_source=twitter&utm_medium=velopert&utm_campaign=how-to-use-redux-in-ridi)\n- [(번역) 업계에서 6년 있은 뒤, 마음이 바뀐 소프트웨어 개발 토픽들](https://news.hada.io/topic?id=3635)\n- [QueryPie를 지탱하는 .NET 기술](https://l.linklyhq.com/l/IstR)\n- [체대 출신 개발자의 2020년 회고](http://bit.ly/memoirs-2020)\n- [Scaling Kubernetes to 7500 nodes](https://openai.com/blog/scaling-kubernetes-to-7500-nodes/)\n- [베이그런트 튜토리얼](https://www.44bits.io/ko/post/vagrant-tutorial)\n- [코틀린 개발자는 null을 어떻게 바라봐야 하는가](https://wooooooak.github.io/kotlin/2020/10/27/kotliner%EB%8A%94_null%EC%9D%84_%EC%96%B4%EB%96%BB%EA%B2%8C_%EB%B0%94%EB%9D%BC%EB%B4%90%EC%95%BC_%ED%95%98%EB%8A%94%EA%B0%80/)\n- [MySQL Ascending index vs Descending index](https://tech.kakao.com/2018/06/19/mysql-ascending-index-vs-descending-index/)\n- [From Java 8 to Java 15 in Ten Minutes](https://medium.com/swlh/from-java-8-to-java-15-in-ten-minutes-f42d422a581e)\n- [리눅스/맥 커맨드라인 셸 입문자를 위한 생존 가이드](https://www.44bits.io/ko/post/linux-and-mac-command-line-survival-guide-for-beginner)\n- [GraphQL과 REST의 차이점](https://hwasurr.io/api/rest-graphql-differences)\n- [The Top 100+ Developer Tools 2020](https://stackshare.io/posts/top-developer-tools-2020)\n- [재택 근무를 잘하기 위한 원칙 정하기 - 재택 근무 팁](https://zzsza.github.io/diary/2021/01/24/rules-of-telecommuting)\n- [WebOTP API를 활용한 SMS 본인인증 기능 구현하기](https://wormwlrm.github.io/2021/01/31/WebOTP-API.html)\n- [스타트업에서 개발자를 그만둔 후 1년 회고](https://brunch.co.kr/@tansfil/7)\n- [CTO의 조건](https://brunch.co.kr/@chickenmoim/19)\n- [하루만 삽질하면 충분한 온라인 코딩테스트 서버 구축 [영상]](https://youtu.be/fqMYI04QHBM)\n- [RxJava 코드로 Reactive Streams 맛보기](https://sjh836.tistory.com/183)\n- [마이월렛: 초보 개발자의 백엔드 개발기](https://velog.io/@team_croco/%EC%B4%88%EB%B3%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-myWallets-%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EA%B8%B0)\n- [2020.log](https://velog.io/@velopert/2020.log)\n- [2020 WONIZZ.LOG](https://blog.wonizz.tk/2020/12/31/2020-wonizz-log/)\n- [결합도와 응집도는 무엇일까?](https://madplay.github.io/post/coupling-and-cohesion-in-software-engineering)\n- [Spring Batch CSV Reader & Writer](https://cheese10yun.github.io/spring-batch-writer-csv/)\n- [iOS 개발자가 되어버린 데이터 분석가의 2020년](https://dev200ok.blogspot.com/2021/01/ios-2020.html)\n- [내가 만든 서비스는 얼마나 많은 사용자가 이용할 수 있을까?](https://hyuntaeknote.tistory.com/10)\n- [코루틴 - suspend funtions](https://medium.com/mobile-app-development-publication/understanding-suspend-function-of-coroutines-de26b070c5ed)\n- [분산형 데이터 분석 아키텍처 - 데이터 매쉬](https://bcho.tistory.com/1379)\n- [SVG와 삼각 함수로 도넛 차트 만들어보기](https://evan-moon.github.io/2020/12/12/draw-arc-with-svg-clippath/)\n- [Awesome Devbook](http://git.io/awesome-devbook)\n- [주니어 개발자의 2020년 회고](https://junilhwang.github.io/TIL/Review/2020-year/end/)\n- [코드 악취를 맡는 후각 훈련의 시간](https://helloworld.kurly.com/blog/rms-refactoring/)\n- [챗봇으로 일상을 바꾸는 팀에서 백엔드 개발자로 활동하며 개발은 어떻게 진행하는가](https://mingeun.com/2020-06-24/team-crescendo-forte-memoirs/)\n- [How To Implement Micro-Frontend Architecture With Vue.js](https://medium.com/bb-tutorials-and-thoughts/how-to-implement-micro-frontend-architecture-with-vue-js-da295ff2ce66)\n- [Hello Kaggle!👋](https://github.com/stevekwon211/Hello-Kaggle-KOR)\n- [[글또 5기] 2020년 회고 모음](https://github.com/geultto/geultto-contents/issues/1)\n- [How To Write Better Code As A Web Developer - React [영상]](https://morioh.com/p/96899b800c3b)\n- [의존관계를 이용해 구조적 리팩토링 포인트 찾기](https://tech.kakao.com/2021/01/12/frontend-growth-05/)\n- [Java Stream Collector 반쪽짜리 스트림을 쓰던 그대에게. Advanced Stream!](https://jeong-pro.tistory.com/229)\n- [얄팍한 GraphQL & Apollo 강좌](https://youtu.be/9BIXcXHsj0A)\n- [Production 환경에서 고려해야 할 Kubernetes 이슈 & 트러블슈팅](https://velog.io/@tedigom/Production-환경에서-고려해야-할Kubernetes-이슈-트러블슈팅)\n- [2020.stateofjs.com](https://2020.stateofjs.com)\n- [Kafka, MongoDB, Kubernates를 활용하여 유연하고 확장 가능한 LINE 쇼핑 플랫폼 구축하기](https://engineering.linecorp.com/ko/blog/line-shopping-platform-kafka-mongodb-kubernetes)\n- [스타트업 개발자의 2020년 회고!! 근데 이제 우주평행론을 곁들인 - 두 개발자의 본격 토크쇼~! 개발바닥](https://www.youtube.com/watch?v=wZs5zsV6iJQ)\n- [Hello Tailwind CSS! ](https://wonny.space/writing/dev/hello-tailwind-css)\n- [개발자 성장에 필요한 3가지](https://brunch.co.kr/@mystoryg/62)\n- [Kotlin과 Coroutine으로 만들어 보는 Non-Blocking API [영상]](https://www.youtube.com/watch?v=ZUksSDu8C0c)\n- [야, 너두 개발자 포트폴리오 만들 수 있어 👉😉](https://geonlee.tistory.com/9)\n- [2020년 이직](https://blog.outsider.ne.kr/1518)\n- [Google 검색에 페이지 환경을 도입할 시간](https://developers.google.com/search/blog/2020/11/timing-for-page-experience?hl=ko)\n- [2020 우아한테크콘서트](https://www.woowacon.com)\n- [Rx Kotlin 이용해서 성능 개선](https://cheese10yun.github.io/rx-kotlin/)\n- [[2020 카카오 블라인드 채용] 문자열 압축 문제, 코틀린 풀이](https://kinetic27.github.io/2020/12/16/2020-kakao-blind-recruitment-string-compression/)\n- [수익형 앱런칭 동아리](https://www.makeus.in/)\n- [프론트엔드 개발 ReasonML이라 좋았던 점](https://green-labs.github.io/reason-ml-the-good-parts)\n- [FEConf2020 프론트엔드 TDD 발표 후기](https://j.mp/3gW6ahH)\n- [백엔드 취업준비 프로젝트를 위해 무료로 여러 대의 서버 구축하기](https://tjdrnr05571.tistory.com/m/16)\n- [Java Concurrency Evolution [번역]](http://homoefficio.github.io/2020/12/11/Java-Concurrency-Evolution/)\n- [어떤 회사에 취업해야 할까? (개발자에게 좋은 회사)](https://artist-developer.tistory.com/36?category=965472)\n- [8개월차 개발자의 2020년 회고](https://miryang.dev/2020/12/18/my2020/)\n- [파울러 아저씨의 리팩토링의 중요성 유튜브 한글 자막입니다!](https://youtu.be/mNPpfB8JSIU)\n- [외부 API로 빚어진 장애대응 후일담 after 1years](https://saramin.github.io/2020-12-18-post-api-with-circuit-breaker)\n- [트랜잭션과 격리 레벨 그리고 Lock에 대하여](https://jordy-torvalds.tistory.com/121)\n- [CI/CD란 무엇인가 (Feat. DevOps 엔지니어)](https://artist-developer.tistory.com/24?category=965473)\n- [Swagger와 Spring Restdocs의 우아한 조합 (by OpenAPI Spec)](https://taetaetae.github.io/posts/a-combination-of-swagger-and-spring-restdocs/)\n- [일본의 개발 언어, 프레임웍 사정](https://okky.kr/article/840900)\n- [리멤버 서버/웹 팀은 어떻게 일을 하는가?](https://blog.dramancompany.com/2020/12/%eb%a6%ac%eb%a9%a4%eb%b2%84-%ec%84%9c%eb%b2%84-%ec%9b%b9-%ed%8c%80%ec%9d%80-%ec%96%b4%eb%96%bb%ea%b2%8c-%ec%9d%bc%ec%9d%84-%ed%95%98%eb%8a%94%ea%b0%80/)\n- [2020년과 이후 JavaScript의 동향 - 라이브러리와 프레임워크 1](https://d2.naver.com/helloworld/7226235)\n- [메세지 브로커 이해하기 (feat. MQTT)](https://kwiki.devserum.com/ko/articles/tech-articles/201228-understanding-the-message-broker)\n- [콘텐츠 퍼블리싱 플랫폼을 새로 만든다는 것](https://blog.mago.team/83ff92c7-b0de-4f23-8bf2-4a50c72071bd)\n- [JavaScript Prototype](https://velog.io/@youngkiu/JavaScript-Prototype)\n- [첫번째 온라인 강의 제작 후기](https://euncho.medium.com/%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%98%A8%EB%9D%BC%EC%9D%B8-%EA%B0%95%EC%9D%98-%EC%A0%9C%EC%9E%91-%ED%9B%84%EA%B8%B0-505f701f2c52)\n- [Jbee.log(2020)](https://jbee.io/essay/2020_retro/)\n- [기술블로그 개편기 (by HUGO)](https://taetaetae.github.io/posts/blog-reorganization-by-hugo/)\n- [이직하려는 친구에게 보내는 프런트엔드 개발 면접 질문](https://joshua1988.github.io/web-development/interview/frontend-questions/)\n- [FE개발자의 성장 스토리 02 : Babel7과 corejs3 설정으로 전역 오염 없는 폴리필 사용하기](https://tech.kakao.com/2020/12/01/frontend-growth-02/)\n- [로우 레벨로 살펴보는 Node.js 이벤트 루프](https://evan-moon.github.io/2019/08/01/nodejs-event-loop-workflow)\n- [편집기를 만드는 일은 왜 어려운가](https://www.notion.so/dableglobal/544eaf417622405eb7aa455a93291ed6)\n- [Kwiki 49주차 테크뉴스가 준비 되었습니다 🥳](https://kwiki.devserum.com/ko/news/tech-news)\n- [python을 활용한 GraphQL API 테스트 자동화](https://yeonshin-kang.medium.com/python을-활용해-graphql-api-테스트하기-63b75da888fa)\n- [자바스크립트 개발자를 위한 ReasonML](https://green-labs.github.io/what-is-reason-ml)\n- [25주년 기념 webstorm 구독 50%](https://blog.jetbrains.com/ko/webstorm/2020/12/js-turns-25-and-webstorm-discount/)\n- [HTTP/3는 왜 UDP를 선택한 것일까? ](https://evan-moon.github.io/2019/10/08/what-is-http3/)\n- [Production 환경에서 고려해야 할 Kubernetes 이슈 & 트러블슈팅](https://velog.io/@tedigom/Production-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%EA%B3%A0%EB%A0%A4%ED%95%B4%EC%95%BC-%ED%95%A0Kubernetes-%EC%9D%B4%EC%8A%88-%ED%8A%B8%EB%9F%AC%EB%B8%94%EC%8A%88%ED%8C%85)\n- [개발자가 맥북을 사용하는 이유](https://stricky.tistory.com/m/418)\n- [ZET팀의 프런트엔드 개발자 성장 레벨](https://www.notion.so/ZET-dbb9b6c1cb5d4c2da039a85b6b1dab20)\n- [유스콘'20](https://www.notion.so/YOUTHCON-20-b8a935551bf7453e93394d03f00e9840)\n- [햣 rebase 개념 상세](https://junwoo45.github.io/2019-10-23-rebase/)\n- [쿠버네티스에서 쉽게 저지르는 10가지 실수 [번역]](https://coffeewhale.com/kubernetes/mistake/2020/11/29/mistake-10/?utm_source=gaerae.com&utm_campaign=%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%8A%A4%EB%9F%BD%EB%8B%A4)\n- [쿠팡 데이터 플랫폼의 진화](https://medium.com/coupang-tech/%EC%BF%A0%ED%8C%A1-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%94%8C%EB%9E%AB%ED%8F%BC%EC%9D%98-%EC%A7%84%ED%99%94-26c827c1ec09)\n- [11번가 Spring Cloud 기반 MSA로의 전환 - 지난 1년간의 이야기 [영상]](https://youtu.be/J-VP0WFEQsY)\n- [120가지 사용자 행동 분석을 자동화할 수 있는 '데이터 제품' 만들기 - LINE ENGINEERING -](https://engineering.linecorp.com/ko/blog/data-analytics-platform-lua-analytics/)\n- [쿠팡이츠 배달단가 모니터링 | Python 데이터 분석 [영상]](https://youtu.be/kJFpAZaOEmY)\n- [이미지 분류 모델 AutoML 파이프라인](https://medium.com/daangn/%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%B6%84%EB%A5%98-%EB%AA%A8%EB%8D%B8-automl-%ED%8C%8C%EC%9D%B4%ED%94%84%EB%9D%BC%EC%9D%B8-68beb1ff15bf)\n- [코로나 시대, 트래블 테크 회사 개발자 이야기](https://m.post.naver.com/viewer/postView.nhn?volumeNo=30181572&memberNo=46721894)\n- [성능과 가독성을 높이는 분기 처리 방법](https://jeaha.dev/80)\n- [modern javascript](https://javascript.info/?utm_source=hackernewsletter&utm_medium=email&utm_term=fav)\n- [HTTP에서부터 WEBSOCKET까지](https://medium.com/@chullino/)\n- ['christmas-tree' 레포에 아희 묻히기](https://kinetic27.github.io//2020/12/12/christmas-tree/)\n- [React Hook 간단 설명 - useState와 useEffect](https://www.jeje01.me/react/react-hooks---usestate,-useeffect/)\n- [블리츠 1941 개발 이야기 - 서버사이드 AI 처리 편](https://blog.naver.com/imays/222138173228)\n- [레거시 마이그레이션 기법 쉐도잉](https://blog.banksalad.com/tech/how-banksalald-decomposes-legacy-services/)\n- [Kotlin 확장 함수로 코드 가독성을 개선해 보기](https://developers-kr.googleblog.com/2020/11/kotlin.html)\n- [Hacktoberfest 2020 참가 후기](https://blog.outsider.ne.kr/1508)\n- [한국 인터넷에서 잘못 끼워진 첫 단추, 그 이름은 네이버 (NAVER)](https://sungmooncho.com/2010/03/21/naver/)\n- [일 잘 하는 개발자는 왜 비즈니스까지 신경쓸까?](https://evan-moon.github.io/2020/10/24/buisiness-with-programming)\n- [읽기 좋은 코드를 위한 간단한 원칙](https://wergia.tistory.com/124)\n- [복잡한 커밋 로그를 정리해줄 구원자, gitmoji](https://pilgwon.github.io/post/gitmoji)\n- [당신의 Github을 매력적으로 보일 수 있는 방법들](https://geonlee.tistory.com/206)\n- [JWT & Spring Security](https://brunch.co.kr/@springboot/491)\n- [styled-components와 함께하는 오픈 소스 디버깅](https://medium.com/class101/styled-components%EC%99%80-%ED%95%A8%EA%BB%98%ED%95%98%EB%8A%94-%EC%98%A4%ED%94%88-%EC%86%8C%EC%8A%A4-%EB%94%94%EB%B2%84%EA%B9%85-ac750528e7b8)\n- [5년차 개발자](https://blog.kingbbode.com/51)\n- [카카오톡 캐싱 시스템의 진화 — Kubernetes와 Redis를 이용한 캐시 팜 구성](https://tech.kakao.com/2020/11/10/if-kakao-2020-commentary-01-kakao/)\n- [Spring Boot 애플리케이션 쿠버네티스로 배포하기](https://donghoon-khan.github.io/devops/web/deploy-spring-boot-application-on-kubernetes/)\n- [Deview 2020](https://deview.kr/2020)\n- [Redis PubSub With Spring Boot](https://www.vinsguru.com/redis-pubsub-with-spring-boot/)\n- [JavaScript Quiz - 자바스트립트 퀴즈](https://javascriptquiz.com)\n- [Spring Boot Redis Pub/Sub](https://brunch.co.kr/@springboot/374)\n- [사람들은 왜 선언형 ui에 열광할까](https://medium.com/@kimdohun0104/%EC%82%AC%EB%9E%8C%EB%93%A4%EC%9D%80-%EC%99%9C-%EC%84%A0%EC%96%B8%ED%98%95-ui%EC%97%90-%EC%97%B4%EA%B4%91%ED%95%A0%EA%B9%8C-1440d03f4e49)\n- [47주차 테크뉴스 요약본이 준비되었습니다.](https://kwiki.devserum.com/ko/news/tech-news)\n- [CRA처럼 golang에서도 사용가능한 CGA에 대한 설명서](https://blog.naver.com/pjt3591oo/222151297558)\n- [람다가 이끌어 갈 모던 Java](https://d2.naver.com/helloworld/4911107)\n- [누구나 원하는 개발자되기](https://blog.shiren.dev/2020-11-23/)\n- [중니어의 고뇌: 1인분 개발자, 다음을 찾아서](https://www.slideshare.net/mobile/jayjin0427/1-239437066)\n- [MySQL Workbench의 VISUAL EXPLAIN으로 인덱스 동작 확인하기](https://engineering.linecorp.com/ko/blog/mysql-workbench-visual-explain-index/)\n- [useEffect를 테스트 하는 방법](https://ui.toast.com/weekly-pick/ko_20201126)\n- [자바 동기화, 어설프게 아는 사람이 더 무섭다(java synchronized에 대한 착각, thread-safe)](https://jeong-pro.tistory.com/227)\n- [터널 안에서 위치를 계산하는 FIN 기술](https://tv.kakao.com/channel/3693125/cliplink/414131951)\n- [styled-components와 함께하는 오픈 소스 디버깅](https://medium.com/class101/styled-components%EC%99%80-%ED%95%A8%EA%BB%98%ED%95%98%EB%8A%94-%EC%98%A4%ED%94%88-%EC%86%8C%EC%8A%A4-%EB%94%94%EB%B2%84%EA%B9%85-ac750528e7b8)\n- [JMeter을 이용해서 웹서버 성능 테스트하기 [영상]](https://youtu.be/1AyxqIePusA)\n- [React 톺아보기 - 01. Preview](https://goidle.github.io/react/in-depth-react-preview/)\n- [AWS reinvent](https://reinvent.awsevents.com/?&trk=em_a134p000006BlQmAAK&trkCampaign=AWS_reInvent_2020&sc_channel=em&sc_campaign=GLOBAL_STRAT_T1_reinvent_DG1_20201130&sc_medium=em_313728&sc_outcome=Strategic_Events&sc_content=AWS_Event&mkt_tok=eyJpIjoiTnpkbU1tSXdPVEV4TVRJMSIsInQiOiJZQWRcL3VMYnN6VUZVQllxTzloU3JFUHpmK1l6SUN0MnZPNStXOFJSckU0YmVzcXFcLzVnV3FRRE9Ic2xFekNxalhsbXZPTkRhSFk0STBZVndvZVI5MldTRnR2QnFkQkZ3Ykl1UFowM0NrWWx4d3dud0Qyc1U5SVwvcmthZU5ETmp2b084blhNcG9HQ09KcytWbzJGOFBQeVE9PSJ9)\n- [samsung ai forum](https://www.sait.samsung.co.kr/saithome/event/saif2020.do)\n- [Docker에 대해 알아보자(이론편)](http://blog.drakejin.me/Docker-araboza-1/)\n- [A Netflix Guide to Microservices [영상]](https://youtu.be/CZ3wIuvmHeM)\n- [시그널이란? 시그널(SIGNAL) 종류, 상황, 유사 시그널 차이점](https://jhnyang.tistory.com/143)\n- [유연하고 테스트 가능한 Go 코드 작성하기](https://medium.com/daangn/how-to-write-a-testable-golang-code-4c0e67612bb8)\n- [NAVER FE NEWS 11월호](https://github.com/naver/fe-news/blob/master/issues/2020-11.md)\n- [WINK 소프트웨어융합대학 깃 및 깃허브 특강](https://www.youtube.com/watch?v=yae0MNrqf14)\n- [Mysql Explain](https://cheese10yun.github.io/mysql-explian/)\n- [코딩을 배울 때 했던 실수들. 그리고 그 실수들을 피하는 법. [번]](https://medium.com/code-states/%EC%BD%94%EB%94%A9%EC%9D%84-%EB%B0%B0%EC%9A%B8-%EB%95%8C-%ED%96%88%EB%8D%98-%EC%8B%A4%EC%88%98%EB%93%A4-%EA%B7%B8%EB%A6%AC%EA%B3%A0-%EA%B7%B8-%EC%8B%A4%EC%88%98%EB%93%A4%EC%9D%84-%ED%94%BC%ED%95%98%EB%8A%94-%EB%B2%95-3497a80217ff)\n- [뱅크샐러드의 특별한 스펙, '테크 스펙'](https://blog.banksalad.com/tech/we-work-by-tech-spec/)\n- [클래스101 선물하기 기능 구현기](https://youtu.be/_YnoIUOFSsM)\n- [Next.js 10 출시](https://news.hada.io/topic?id=3103&utm_source=slack&utm_medium=bot&utm_campaign=T017KBV1WBA)\n- [우리는 코드 리뷰를 잘하고 있을까요?](https://medium.com/styleshare/%EC%9A%B0%EB%A6%AC%EB%8A%94-%EC%BD%94%EB%93%9C-%EB%A6%AC%EB%B7%B0%EB%A5%BC-%EC%9E%98%ED%95%98%EA%B3%A0-%EC%9E%88%EC%9D%84%EA%B9%8C%EC%9A%94-201c12d04d0d)\n- [키패드 누르기 코틀린으로 풀어보자](https://kinetic27.github.io/2020/10/25/kakao-intern-press-keypad/)\n- [좋은 코드란 무엇일까?](https://jbee.io/etc/what-is-good-code/)\n- [The Twelve-Factor App [번역]](https://12factor.net/ko/)\n- [SpringSecurity 와 JUnit5 테스트 - Episode1 DB 없이 테스트 하기 [영상]](https://youtu.be/MNEgiFeUy_U)\n- [브라우저 Rendering](https://www.notion.so/Rendering-994f91c0b5cc493481876d04be028b76)\n- [프론트엔드에서 TDD가 가능하다는 것을 보여드립니다. [영상]](https://www.youtube.com/watch?v=L1dtkLeIz-M)\n- [스프링 실전 가이드 유튜브 라이브](https://www.youtube.com/watch?v=kJM_bqChfns)\n- [Kinda와 함께 MVI 테스트 작성하기](https://medium.com/@kimdohun0104/kinda%EC%99%80-%ED%95%A8%EA%BB%98-mvi-%ED%85%8C%EC%8A%A4%ED%8A%B8-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0-7f589e50846c)\n- [User API 업데이트 요청 문제 해결하기](https://youtu.be/UeQk1Cps-U8)\n- [자바스크립트 삼항연산자를 이용해서 if 에서 처럼 여러라인의 코드를 실행하게 하기](https://kstblog.aww.kr/4s66Q/YkYzF)\n- [Devfest Korea 2020 - Fireside Chat with Webtech GDE [영상]](https://www.youtube.com/watch?v=ZYHU_Yllcck)\n- [Flyway 로 Java 에서 DB schema, seed 관리하기](https://blog.gangnamunni.com/post/introducing-flyway/)\n- [새 버전에 맞게 git checkout 대신 switch/restore 사용하기](https://blog.outsider.ne.kr/1505)\n- [자바스크립트에서 IF문을 대신할 수 있는 표현](https://kstblog.aww.kr/4s66Q/K45BR)\n- [MySQL 다시 공부하기 (1)](https://brainbackdoor.tistory.com/m/133)\n- [Discover 딜리버리 시스템](https://engineering.linecorp.com/ko/blog/line-timeline-discover-delivery-system/)\n- [gemini kim 님의 회고록입니다](https://medium.com/@geminikim/%EC%96%B4%EB%8A%90-%EA%B3%A0%EC%A1%B8-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-10%EB%85%84%EC%9D%98-%ED%9A%8C%EA%B3%A0%EB%A1%9D-2b4226f9027e)\n- [스프링 부트 : 코틀린 기반으로 Rest API 만들기 유투브 라이브](https://www.youtube.com/watch?v=l7k1PnEgt94)\n- [렌더링 성능을 향상 시키는 새로운 CSS 속성 : content-visibility](https://wit.nts-corp.com/2020/09/11/6223)\n- [HTTP API 디자인 가이드 [번역]](https://github.com/yoondo/)\n- [파이썬 3.9 릴리스와 주요 변경 사항](https://www.44bits.io/ko/post/python-3-9-release-note-summary)\n- [회원가입 폼 유효성 검증의 중요성](https://brunch.co.kr/@rachelykim/10)\n- [Beginner's Series to JavaScript](https://youtu.be/_EDM5aPVLmo)\n- [Ionic Vue 컴포넌트 정식 출시했습니다. 🎉🎉](https://ionicframework.com/blog/announcing-ionic-vue/)\n- [페이징 성능 개선하기 - No Offset 사용하기](https://jojoldu.tistory.com/528)\n- [2020년 9월 회고 - 개발자 황준일](https://junilhwang.github.io/TIL/Review/2020-year/09-September/)\n- [우리는 불편함을 어떻게 마주하고 있는가](https://woowabros.github.io/experience/2020/10/06/thiiing-system-improvement.html)\n- [우아한테크코스 3기 과정에 참여할 사람을 모집합니다.](https://woowabros.github.io/techcourse/2020/10/06/woowacourse.html)\n- [우리는 불편함을 어떻게 마주하고 있는가 - 쿠버네티스 적용기](https://woowabros.github.io/experience/2020/10/06/thiiing-system-improvement.html)\n- [JS스럽게 좋은 코드 쓰기 꿀팁](https://velog.io/@wooder2050/JS%EC%8A%A4%EB%9F%BD%EA%B2%8C-%EC%A2%8B%EC%9D%80-%EC%BD%94%EB%93%9C-%EC%93%B0%EA%B8%B0-%EA%BF%80%ED%8C%81)\n- [도커로 웹 서비스를 돌려보는 실습을 통해, 짧지만 강하게 도커를 배워보는 영상입니다.](https://youtu.be/hWPv9LMlme8)\n- [추천 시스템 Basics](https://recommendsystem.oopy.io/)\n- [자바스크립트 스코프에 대해 아주쉽게 이해하기](https://kstblog.aww.kr/4s66Q/AvsfF)\n- [자바스크립트 V8 엔진의 메모리 관리](https://medium.com/naver-place-dev/%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-v8-%EC%97%94%EC%A7%84%EC%9D%98-%EB%A9%94%EB%AA%A8%EB%A6%AC-%EA%B4%80%EB%A6%AC-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-f45091e696e1)\n- [자바한정: 널 서바이벌 가이드 [영상]](https://www.youtube.com/watch?v=DedY9dKv3tk)\n- [JPA @Where 사용법](https://cheese10yun.github.io/jpa-where/)\n- [Java의 동시성 개선을 위한 Project Loom은 reactive streams를 대체할 것인가?](http://gunsdevlog.blogspot.com/2020/09/java-project-loom-reactive-streams.html)\n- [Vue 3 가볍게 훑어보기](https://joshua1988.github.io/web-development/vuejs/vue3-coming)\n- [크롬 확장프로그램 개발⛏️ 회고](https://zuminternet.github.io/Zum-Chrome-Extension/)\n- [[번역] Ansible(2) inventory, Playbooks, Roles](https://velog.io/@hanblueblue/%EB%B2%88%EC%97%AD-Ansible2-%ED%94%8C%EB%A0%88%EC%9D%B4%EB%B6%81)\n- [차근차근 오픈소스에 기여해보기 (동기부여 편)](https://rinae.dev/posts/how-to-contribute-oss)\n- [야 너두 할 수 있어. 비전공자, COBOL 개발자를 거쳐 네이버에서 FE 개발하게 된 이야기 [영상]](https://tv.naver.com/v/15355246)\n- [FE플랫폼팀이 궁금하세요? – 함께 성장해가는 개발팀 이야기](https://tech.kakao.com/2020/09/21/kakao-fe-platform-team)\n- [클래스101 재고관리시스템 구현기](https://youtube.com/watch?v=EYx_8vHWlX8)\n- [A Picture of Java in 2020](https://blog.jetbrains.com/idea/2020/09/a-picture-of-java-in-2020/)\n- [MySQL 내부 구조](https://brunch.co.kr/@jehovah/21)\n- [java StringTokenizer : 생각보다 느릴까? 뜯어보자](http://blog.naver.com/PostView.nhn?blogId=chogahui05&logNo=221474002967&categoryNo=12&parentCategoryNo=0&viewDate=&currentPage=2&postListTopCurrentPage=&from=postList&userTopListOpen=true&userTopListCount=5&userTopListManageOpen=false&userTopListCurrentPage=2)\n- [Nginx, Gunicorn, Django 배포](https://wikidocs.net/6601)\n- [MySQL 쓰면서 하지 말아야 할 것 17가지](https://blog.lael.be/post/370)\n- [Mockserver Netty 사용해서 HTTP 통신 Mocking 하기](https://cheese10yun.github.io/mock-server-netty/)\n- [GitHub 공식 CLI gh](https://blog.outsider.ne.kr/1498)\n- [PyQt로 Python을 이용한 GUI까지 정복하기!](https://www.notion.so/PyQt-5-Lecture-62b4f0d6c6984efea9f1b1c7d3e315ae)\n- [개발자를 위한 정보 검색 팁](https://boxnwhis.kr/2020/09/27/ir-for-developers.html)\n- [Spring Boot에서 yyyy-MM 포맷으로 날짜 받고싶을때](https://jojoldu.tistory.com/527)\n- [네이버 스마트 주문 페이지 성능 개선 경험담 공유](https://medium.com/naver-place-dev/%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%8A%A4%EB%A7%88%ED%8A%B8-%EC%A3%BC%EB%AC%B8-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%84%B1%EB%8A%A5-%EA%B0%9C%EC%84%A0-%EA%B2%BD%ED%97%98%EB%8B%B4-%EA%B3%B5%EC%9C%A0-f089caa2bd2)\n- [백준(BOJ)의 채점 현황을 재미있게 바꿔주는 크롬 확장을 만들어보고 간단한 설명과 적용법를 적었습니다.](https://kinetic27.github.io/2020/09/16/hell-boj-verdict-message/)\n- [Spring MVC의 핵심 객체 DispatcherServlet에 대한 모든 것(DispatcherServlet이 하는 역할 정리, 동작 프로세스)](https://jeong-pro.tistory.com/225)\n- [Java의 날짜와 시간 API](https://d2.naver.com/helloworld/645609)\n- [스프링 시큐리티 공식 문서 한글 번역](https://godekdls.github.io/Spring%20Security/contents/)\n- [프로세스 마이닝과 비즈니스 프로세스 모델링에 관한 블로그입니다.](https://blog.naver.com/jelink1)\n- [Retrofit](https://woovictory.github.io/2019/01/03/Android-What-is-retrofit/index.html)\n- [하루 25분 실행하기: 하루를 대하는 14년차 개발자의 자세](https://blog.shiren.dev/2020-09-07/)\n- [지루하지 않게 코노미 사진 4만장 어노테이션하기 (머신러닝과 함께)](https://medium.com/naver-place-dev/%EC%A7%80%EB%A3%A8%ED%95%98%EC%A7%80-%EC%95%8A%EA%B2%8C-%EC%BD%94%EB%85%B8%EB%AF%B8-%EC%82%AC%EC%A7%84-4%EB%A7%8C%EC%9E%A5-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98%ED%95%98%EA%B8%B0-%EB%A8%B8%EC%8B%A0%EB%9F%AC%EB%8B%9D%EA%B3%BC-%ED%95%A8%EA%BB%98-619c60f8a071)\n- [Spring Boot & Kotlin 기반으로 간단한 REST API를 라이브코딩 방식으로 개발](https://www.codelabs.kr/codelabs/121)\n- [ListItemReader 성능상 주의사항](https://jojoldu.tistory.com/525)\n- [뱅크샐러드는 어떻게 레거시 서비스를 박살 내는가](https://blog.banksalad.com/tech/how-banksalald-decomposes-legacy-services)\n- [네이버 주식 일자별 매매동향 정보 파이썬으로 한번에 가지고 오기(1)](https://stricky.tistory.com/374)\n- [알파 버전으로 전환되는 Kotlin Multiplatform Mobile](https://blog.jetbrains.com/ko/kotlin/2020/09/kotlin-multiplatform-mobile-goes-alpha-ko/)\n- [Wasm  새로운 웹표준 언어](https://d2.naver.com/helloworld/8257914)\n- [좋은 git commit 메시지를 위한 영어 사전](https://blog.ull.im/engineering/2019/03/10/logs-on-git.html)\n- [type-challenges](https://github.com/type-challenges/type-challenges)\n- [깃허브 컨테이너 레지스트리 베타 오픈 및 사용법](https://www.44bits.io/ko/post/news--github-container-registry-beta-release)\n- [Git Rebase —Interactive 옵션 알아보기](https://wormwlrm.github.io/2020/09/03/Git-rebase-with-interactive-option.html)\n- [Java Heap Memory 분석 내용 정리](https://m.blog.naver.com/pcmola/222074787428)\n- [신규 서비스 배포 전에 실험과 개선을 반복한 이야기](https://helloworld.kurly.com/blog/vsms-performance-experiment)\n- [Java8+ Instant vs LocalDateTime 각 사용방법](https://velog.io/@lsb156/Instant-vs-LocalDateTime)\n- [Servlet에 대한 개념없이 스프링을 했네요? (급하게 알아보는 스프링 기반 기술 Servlet, Servlet Context, Application Context, ...)](https://jeong-pro.tistory.com/222)\n- [빌드/테스트는 내가 해줄게. 너는 코딩에 집중해 (by GitHub Pull Request Builder)](https://taetaetae.github.io/2020/09/07/github-pullrequest-build/)\n- [코디미 상담 후기 - 백엔드 개발자를 꿈꾸는 초보 개발자에 대한 조언](http://blog.cmstown.com/2020/05/%EC%A0%95%EB%B3%B4_002/)\n- [MYSQL 내부구조](https://brunch.co.kr/@jehovah/21)\n- [스프링캠프 2019 강연 영상 모음](https://m.youtube.com/playlist?list=PLdHtZnJh1KdaM0AfxPA7qGK1UuvhpvffL)\n- [전국에 맥도날드 주소가 어떻게 될까?](https://jiyeonseo.github.io/2020/08/01/where-is-mcdonald-addr/)\n- [Oracle vs PostgreSQL 마이그레이션을 위한 기능 비교](https://stricky.tistory.com/367)\n- [R언어) 데이터 과학을 위한 통계 리뷰](https://sihan-son.github.io/statics-for-data-science/)\n- [가벼운 Golang 이미지 만들기](https://ilcm96.me/2020-09-13-docker-multi-stage-build-upx)\n- [안녕하세요. 모리입니다. 개발자를 위한 셀프형 피드백에 기반한 모의 인터뷰 프로젝트를 진행보았는데, 도움이 되면 좋을 것 같아서 올려봅니다!](https://bit.ly/2ZpD6HQ)\n- [리액트 앱에서의 중앙 집중식 API 에러 핸들링](https://ui.toast.com/weekly-pick/ko_20200623)\n- [팀에 새로운 도구를 도입하고 싶다.](https://so-so.dev/essay/add-new-tool-at-team/)\n- [MSA 환경에서 네트워크 예외를 잘 다루는 방법](https://tech.kakaopay.com/post/msa-transaction)\n- [Serverless와 기술도입, Backend Application의 미래](https://medium.com/vingle-tech-blog/serverless%EC%99%80-%EA%B8%B0%EC%88%A0%EB%8F%84%EC%9E%85-backend-application%EC%9D%98-%EB%AF%B8%EB%9E%98-8f114a8b00d5)\n- [언리얼 인사이트와 친해지기 위한 준비 운동](https://netmarble.engineering/preparing-for-unreal-insight/)\n- [TDD는 Design Acitivity이다.](https://perfectacle.github.io/2022/06/06/tdd-is-design-activity])\n- [useSWR vs react-query](https://blog.logrocket.com/useswr-vs-react-query/)\n- [Data Platform 2022 : Global rxpansion in petabytes](https://medium.com/coupang-engineering/data-platform-2022-global-expansion-in-petabytes-3dbbbf27f6fe)\n- [마이크로서비스 아키텍처를 구성하는 핵심 요소 8가지 | 무조건 MSA가 정답일까?](https://dataportal.kr/81)\n- [카카오페이 iOS 개발자의 채용 과제 서버 개발기 with Vapor](https://tech.kakaopay.com/post/ios-assignment-vapor)\n- [마이크로서비스 분산 트랜잭션 패턴별 비교](https://developers.redhat.com/articles/2021/09/21/distributed-transaction-patterns-microservices-compared#)\n- [합류 1달 차 신규팀원의 스타트업 적응기](https://medium.com/athenaslab/%ED%95%A9%EB%A5%98-1%EB%8B%AC-%EC%B0%A8-%EC%8B%A0%EA%B7%9C%ED%8C%80%EC%9B%90%EC%9D%98-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85-%EC%A0%81%EC%9D%91%EA%B8%B0-963bde09e623)\n- [한 번에 언리얼 엔진 멀티 클라이언트 테스트 환경 구축하기](https://netmarble.engineering/unreal-engine-multi-client-at-one-time/)\n- [Java Native Memory Leak 원인을 찾아서](https://toss.im/slash-22/sessions/3-6)\n- [Spring Interview Questions](https://www.interviewbit.com/spring-interview-questions/)\n- [모던 데이터 아키텍처와 새로운 아키텍처의 시대](https://techit.kr/view/?no=20220423105042)\n- [2020년, PHP 언어가 가지는 의미](https://pronist.dev/58)\n- [소프트웨어 개발자가 ‘소프트 스킬’ 쌓는 방법](https://channy.creation.net/blog/1593)\n- [개발자의 학습과 성장](https://present.do/documents/62a02582f6365307fc441c7f?page=0)\n- [웹 개발 생산성을 높이기 위한 방법](https://yozm.wishket.com/magazine/detail/1542/)\n- [Pyscript 웹어셈블리 : 파이썬을 웹에서 동작시키다](https://www.infoworld.com/article/3661628/get-started-with-pyscript-the-in-browser-python-by-anaconda.html)\n- [도커 관련 한글 문서를 정리한 깃허브](https://github.com/remotty/documents.docker.co.kr)\n- [소중한 나의 1초를 위한 10가지 생산성 도구 for MacOS](https://medium.com/@totuworld/%EC%86%8C%EC%A4%91%ED%95%9C-%EB%82%98%EC%9D%98-1%EC%B4%88%EB%A5%BC-%EC%9C%84%ED%95%9C-10%EA%B0%80%EC%A7%80-%EC%83%9D%EC%82%B0%EC%84%B1-%EB%8F%84%EA%B5%AC-for-macos-cc6db97cd798)\n- [ML Pipeline에 Flyte 도입하기](https://equus3144.medium.com/ml-pipeline%EC%97%90-flyte-%EB%8F%84%EC%9E%85%ED%95%98%EA%B8%B0-1c85528df470)\n- [IT 스타트업의 온보딩](https://medium.com/athenaslab/%ED%95%A9%EB%A5%98-1%EB%8B%AC-%EC%B0%A8-%EC%8B%A0%EA%B7%9C%ED%8C%80%EC%9B%90%EC%9D%98-%EC%8A%A4%ED%83%80%ED%8A%B8%EC%97%85-%EC%A0%81%EC%9D%91%EA%B8%B0-963bde09e623)\n- [도커 관련 한글 문서를 정리한 깃허브](https://github.com/remotty/documents.docker.co.kr)\n- [Git branch ( 깃 브랜치 ) 전략을 사용해보기로 했다](https://waterworkcode.tistory.com/entry/Git-branch-%EA%B9%83-%EB%B8%8C%EB%9E%9C%EC%B9%98-%EC%A0%84%EB%9E%B5%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0%EB%A1%9C-%ED%96%88%EB%8B%A4)\n- [Git을 이용하여 텔레파시 통하는 팀 만들기 : commit message와 commit log](http://story.haezoom.com/?p=936)\n- [네이버 웹툰에서 개발한 포토샵 파싱 라이브러리 개발과정](https://d2.naver.com/helloworld/6631477)\n- [Programmers Dev Survey 2022](https://programmers.co.kr/pages/2022-dev-survey)\n- [Improve Git monorepo performance with a file system monitor](https://github.blog/2022-06-29-improve-git-monorepo-performance-with-a-file-system-monitor/)\n- [DevOps의 인적 확장](https://tech.devsisters.com/posts/the-human-scalability-of-devops/)\n- [What every newbie developer should know](https://dev.to/princewhyte2/what-every-newbie-developer-should-know-mic)\n- [27년차 실리콘밸리 개발자의 인생 이야기 [한기용] 1부](https://www.youtube.com/watch?v=nLL409se8sM)\n- [아마존(Amazon)에서 배운 5가지 글쓰기와 소통 방식](http://channy.creation.net/blog/1620)\n- [서버 개발자를 위한 운영툴 개발](https://tech.kakao.com/2022/07/04/admin-tool-for-server-side-developers)\n- [TestContainer 로 멱등성있는 integration test 환경 구축하기](https://medium.com/riiid-teamblog-kr/testcontainer-%EB%A1%9C-%EB%A9%B1%EB%93%B1%EC%84%B1%EC%9E%88%EB%8A%94-integration-test-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-4a6287551a31)\n- [iOS 개발할 때 영어로 변수 이름 잘 짓는 방법](https://dev200ok.blogspot.com/2022/07/blog-post.html)\n- [간단한 Clicker 게임을 구현하면서 배포된 CosmWasm 블록체인 Counter 컨트랙트를 프론트엔드와 연결하기](https://abit.ly/dsrv-cosmwasm-clicker-game)\n- [만들어 가며 알아보는 React: React는 왜 성공했나](https://techblog.woowahan.com/8311/)\n- [뿌리 깊은 리눅스의 근본, 루트 계정을 지켜라](https://netmarble.engineering/protect-root-account-at-linux/)\n- [우리팀이 JDK 17을 도입한 이유](https://techblog.gccompany.co.kr/%EC%9A%B0%EB%A6%AC%ED%8C%80%EC%9D%B4-jdk-17%EC%9D%84-%EB%8F%84%EC%9E%85%ED%95%9C-%EC%9D%B4%EC%9C%A0-ced2b754cd7)\n- [개발자에서 기술 작가로 전직하기까지 2년 간의 이야기](https://tech.devsisters.com/posts/from-engineer-to-techwriter/)\n- [Notion으로 다이어그램을 그린다고?](https://devocean.sk.com/blog/techBoardDetail.do?ID=164061)\n- [웹개발 필수개념! DOM이 뭔가요? (+ Web API)](https://youtu.be/mFawNZz_Uu0)\n- [11 Advanced React Interview Questions you should absolutely know (with detailed answers)](https://dev.to/ruppysuppy/11-advanced-react-interview-questions-you-should-absolutely-know-with-detailed-answers-1n05)\n- [토이 프로젝트🤖 주도 학습+성장](https://medium.com/@totuworld/%ED%86%A0%EC%9D%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%A3%BC%EB%8F%84-%ED%95%99%EC%8A%B5-%EC%84%B1%EC%9E%A5-94fc304984b0)\n- [코틀린 코루틴 완벽가이드 #1](https://www.bsidesoft.com/8656)\n- [custom exception을 언제 써야 할까?](https://tecoble.techcourse.co.kr/post/2020-08-17-custom-exception/)\n- [SpringBoot + Kotlin 멀티 모듈 구성 - 단일모듈에서 멀티모듈로 변경해보기](https://youtu.be/4dO2Wa2fAYI)\n- [Why Do Developers Prefer Linux?](https://dev.to/techmaniacc/why-do-developers-prefer-linux-32a3)\n- [오늘학교에 입학한 Flutter 주니어 개발자의 6개월](https://medium.com/athenaslab/%EC%98%A4%EB%8A%98%ED%95%99%EA%B5%90%EC%97%90-%EC%9E%85%ED%95%99%ED%95%9C-flutter-%EC%A3%BC%EB%8B%88%EC%96%B4-%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-6%EA%B0%9C%EC%9B%94-14c1fd25f992)\n- [모던 PHP에서 배열 대신 DTO 사용하기](https://medium.com/musinsa-tech/%EB%AA%A8%EB%8D%98-php%EC%97%90%EC%84%9C-%EB%B0%B0%EC%97%B4-%EB%8C%80%EC%8B%A0-dto-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-d9da20ea716e)\n- [LINT: HTTP/2와 TLS를 통한 네트워크 현대화](https://engineering.linecorp.com/ko/blog/LINT-newtork-modernization-http2-tls)\n- [개발자에게 유용한 법칙, 이론, 원칙, 그리고 패턴들](https://github.com/codeanddonuts/hacker-laws-kr)\n- [자료형과 정적/동적 타입 (+ 컴파일/인터프리터 언어와의 관계)](https://youtu.be/50N_NiDUKpw)\n- [Designing a Multi-Layered Architecture for Building RESTful Web Services With Spring Boot and Kotlin](https://medium.com/swlh/designing-a-multi-layered-architecture-for-building-restful-web-services-with-spring-boot-and-a12ef85b77c9)\n- [아웃 박스 패턴 구현](https://dzone.com/articles/implementing-the-outbox-pattern)\n- [Flutter IO 2022 Extended ‘애니메이션 적용기’](https://medium.com/flutter-korea/flutter-io-2022-extended-%EC%95%A0%EB%8B%88%EB%A9%94%EC%9D%B4%EC%85%98-%EC%A0%81%EC%9A%A9%EA%B8%B0-38a31707139d)\n- [React + Ionic으로 iOS, 안드 앱을 만든 후기](https://velog.io/@tmmoond8/React-Ionic%EC%9C%BC%EB%A1%9C-iOS-%EC%95%88%EB%93%9C-%EC%95%B1%EC%9D%84-%EB%A7%8C%EB%93%A0-%ED%9B%84%EA%B8%B0)\n- [소프트웨어 엔지니어의 이력서](https://jbee.io/essay/swe-resume/)\n- [독학을 위한 최고의 깃헙 저장소](https://dev.to/krishnaagarwal/the-best-github-repos-for-self-taught-114j)\n- [코드 리뷰의 목적은 성장이어야한다](https://jbee.io/essay/code-review-goal/)\n- [엔지니어를 위한 글쓰기 [번역]](https://gist.github.com/longfin/a54f29d866b2deff2e872aeafd4c0f56)\n- [데이터에 신뢰성과 재사용성까지, Analytics Engineering with dbt](https://tech.socarcorp.kr/data/2022/07/25/analytics-engineering-with-dbt.html)\n- [코틀린 - 상속대신 컴포지션을 활용해보라](https://velog.io/@vov3616/Effective-Kotlin-%EC%95%84%EC%9D%B4%ED%85%9C-36.-%EC%83%81%EC%86%8D%EB%B3%B4%EB%8B%A4%EB%8A%94-%EC%BB%B4%ED%8F%AC%EC%A7%80%EC%85%98%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EB%9D%BC)\n- [클린 아키텍처 — 엔티티(EBI), 도메인 주도 설계](https://tech.junhabaek.net/%ED%81%B4%EB%A6%B0-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EB%B3%B4%EC%B6%A9-2-%EC%97%94%ED%8B%B0%ED%8B%B0-ebi-%EB%8F%84%EB%A9%94%EC%9D%B8-%EC%A3%BC%EB%8F%84-%EC%84%A4%EA%B3%84-55ea98c62cb6#35ca)\n- [React Query 와 SSR - React Query 라이브러리 코드보며 이해하기](https://velog.io/@eomttt/React-Query-%EC%99%80-SSR)\n- [개발자의 애질리티](https://toss.tech/article/dev-agility)\n- [쿠버네티스 실습 (CKA 대비)](https://blog.psnote.co.kr/222)\n- [SQLite Internals: Pages & B-trees](https://fly.io/blog/sqlite-internals-btree/)\n- [서비스 개발자를 위한 컨테이너 뽀개기 (a.k.a 컨테이너인터널)](https://tech.kakaoenterprise.com/150)\n- [Software Engineering at Google 책의 \"사회적 상호 관계\"](https://www.youtube.com/watch?v=I2zs25qNURw)\n- [🚀 노션(Notion)에 대한 연구 보고](https://maily.so/productlab/posts/02ee230f)\n- [Service Discovery 통합을 위한 Kubernetes Operator 구현 - Eurekube Operator](https://11st-tech.github.io/2022/07/20/eurekube-operator/)\n- [개발자를 위한 친절한 UI 컴포넌트 라이브러리 만들기](https://engineering.linecorp.com/ko/blog/ui-component-library-for-developers-with-typescript-storybook)\n- [목적 조직에서 개발자로 살아남기](https://kim-solshar.tistory.com/m/77)\n- [임금님 귀는 당나귀 귀! 대나무숲 슬랙 앱 만들기](https://wormwlrm.github.io/2022/05/07/Bamboo-Forest-Slack-App.html)\n- [합성 컴포넌트로 재사용성 극대화하기](https://fe-developers.kakaoent.com/2022/220731-composition-component/)\n- [개발자로 성공할 수 있는 딱 하나의 기술](https://www.youtube.com/watch?v=C8t7eHIQ9fU&t=1s)\n- [팔로우 기능 개발 노트](https://disquiet.io/@jeong7331/makerlog/1503)\n- [개발자처럼 생각하는 방법 - 문제 해결의 교훈 [번역]](https://usecode.pw/how-to-think-like-a-programmer/)\n- [스포카에서 Kotlin으로 JPA Entity를 정의하는 방법](https://spoqa.github.io/2022/08/16/kotlin-jpa-entity.html)\n- [Redisson 분산락을 이용한 동시성 제어](https://velog.io/@hgs-study/redisson-distributed-lock)\n- [테스트는 누구나 할 수 있지만, QA는 준비된 자만이 할 수 있습니다](https://tech.kakaoenterprise.com/104)\n- [니어 프로토콜 이해하기 — 메인넷 아키텍처와 RPC 호출](https://medium.com/dsrv/near-102-understanding-near-protocol-mainnet-architecture-and-rpc-call-75351d28bdb4)\n- [네이티브 앱 → 리액트 네이티브 앱 전환 그리고 1년 후](https://velog.io/@velopert/react-native-1year-review#%EC%99%9C-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8C%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%96%88%EC%9D%84%EA%B9%8C)\n- [MSW를 활용하는 Front-End 통합 테스트](https://fe-developers.kakaoent.com/2022/220825-msw-integration-testing)\n- [etc 디렉터리에 있는 소중한 아이들](https://netmarble.engineering/watch-out-important-files-in-etc-directory/)\n- [평범했던 중학생의 개발 입문기](https://velog.io/@hielo/평범했던-중학생의-개발-입문기)\n- [개발자의 강력한 무기: 사이드 프로젝트](https://www.wanted.co.kr/events/21_12_s01_b02)\n- [Algorithms you should know before you take system design interviews](https://blog.bytebytego.com/p/algorithms-you-should-know-before?triedSigningIn=true)\n- [Weekly Java: 간단한 재고 시스템으로 학습하는 동시성 이슈](https://jypthemiracle.medium.com/weekly-java-%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%9E%AC%EA%B3%A0-%EC%8B%9C%EC%8A%A4%ED%85%9C%EC%9C%BC%EB%A1%9C-%ED%95%99%EC%8A%B5%ED%95%98%EB%8A%94-%EB%8F%99%EC%8B%9C%EC%84%B1-%EC%9D%B4%EC%8A%88-9daa85155f66)\n- [버그 없는 업데이트를 위해 - QA 테스트 자동화](https://brunch.co.kr/@tmapmobility/7)\n- [파일과 디렉터리에는 정확한 소유권과 적당한 권한을 부여하라](https://netmarble.engineering/setting-setuid-umask-environmental-parameters-of-files-and-directories/)\n- [1년차 개발자의 훈수 두기](https://spoqa.github.io/2022/09/01/first-year-developers-tips.html)\n- [크롬 개발자 도구에서 FE  source 디버깅하기](https://developer.chrome.com/blog/devtools-modern-web-debugging/)\n- [웹 개발자라면 알고 있어야 할 HTTP의 진화 과정](https://wormwlrm.github.io/2022/09/02/Evolution-of-HTTP.html)\n- [Recoil 정확하게 사용하기! (feat. Selector)](https://tech.osci.kr/2022/09/02/recoil-selector)\n- [11번가의 오픈소스 활동 (1)](https://11st-tech.github.io/2022/03/02/11st-and-open-source1/)\n- [MongoDB index 개념과 indexing 전략](https://ryu-e.tistory.com/1)\n- [인프콘 2022 영상 다시보기](https://www.inflearn.com/course/infcon2022/dashboard)\n- [Kotlin Night 2022 - 코틀린 어노테이션으로 할 수 있는 것(GDG Seoul)](https://speakerdeck.com/taehwandev/kotlin-night-2022-koteulrin-eonoteisyeoneuro-hal-su-issneun-geos-gdg-seoul)\n- [Hive에서 실시간으로 쇼핑 데이터를 조회할 수 있게 ETL 개선하기](https://engineering.linecorp.com/ko/blog/improve-ETL-to-view-data-real-time-on-Hive/)\n- [레이아웃 훅 수정이 결제버튼 테스트에 영향을 미치는 이유](https://nookpi.tistory.com/150)\n- [원리로 알아보는 Git의 기초](https://teamdable.github.io/techblog/Git-Basic)\n- [뱅크샐러드 Web chapter에서 GitHub Action 기반의 CI 속도를 개선한 방법](https://blog.banksalad.com/tech/github-action-npm-cache/)\n- [리액트 프로젝트 코드 스플리팅 정복하기](https://velog.io/@velopert/react-code-splitting)\n- [출처가 다른 윈도우 간에는 데이터를 어떻게 통신할까?](https://ui.toast.com/posts/ko_20220831)\n- [비동기 서버에서 이벤트 루프를 블록하면 안 되는 이유 1부 - 멀티플렉싱 기반의 다중 접속 서버로 가기까지](https://engineering.linecorp.com/ko/blog/do-not-block-the-event-loop-part1/)\n- [WebFlux와 코루틴으로 BFF(Backend For Frontend) 구현하기](https://tech.kakaopay.com/post/bff_webflux_coroutine/)\n- [상품 상세 React 전환기](https://medium.com/29cm/%EC%83%81%ED%92%88-%EC%83%81%EC%84%B8-react%EC%A0%84%ED%99%98%EA%B8%B0-e79f16e5cf4e)\n- [우당탕탕 Server Driven UI 개발기](https://techblog.yogiyo.co.kr/%EC%9A%B0%EB%8B%B9%ED%83%95%ED%83%95-server-driven-ui-%EA%B0%9C%EB%B0%9C%EA%B8%B0-b1b80f47760b)\n- [실리콘밸리의 엔지니어링 매니저(리더)들은 대체 무엇을 하는가? (1편)](https://sendbird.com/ko/blog/eng-leader-role-1)\n- [MongoDB index 개념과 indexing 전략](https://ryu-e.tistory.com/1)\n- [메이커 스토리 1 - 디자이너와 개발자의 간극을 줄이고 싶어요](https://www.disquiet.tech/post/easy-logic)\n- [도커 데스크톱 없이 구축하는 WSL2와 도커 개발 환경](https://netmarble.engineering/docker-on-wsl2-without-docker-desktop/)\n- [Atomic state management – Jotai](https://blog.hwahae.co.kr/all/tech/tech-tech/6099)\n- [JavaScript+MySQL은 Async+Block 하게 작동할까](https://sungbin.dev/post/JavaScript+MySQL%EC%9D%80%20Async+Block%20%ED%95%98%EA%B2%8C%20%EC%9E%91%EB%8F%99%ED%95%A0%EA%B9%8C)\n- [새로운 컬리몰 NX를 소개합니다](https://helloworld.kurly.com/blog/introduction_new_kurlymall_web/)\n- [개발자 비급(祕笈) – 1. 연봉은 실력의 결과가 아니다](https://channy.creation.net/blog/1186)\n- [CPU는 어떻게 작동할까?](https://youtu.be/Fg00LN30Ezg)\n- [Upgrading Data Warehouse Infrastructure at Airbnb](https://medium.com/airbnb-engineering/upgrading-data-warehouse-infrastructure-at-airbnb-a4e18f09b6d5)\n- [The State of AI & Art 2022](https://velog.io/@laeyoung/The-State-of-AI-Art-2022)\n- [예약하기 서비스 개발기](https://medium.com/29cm/%EC%85%80%EB%A0%89%ED%8A%B8%EC%83%B5%EC%97%90%EC%84%9C-%EC%98%88%EC%95%BD%ED%95%98%EA%B8%B0-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B0%9C%EB%B0%9C%EA%B8%B0-f7578ffcfbf7)\n- [외부 인프라스트럭처 테스트 방법](https://cheese10yun.github.io/external-infrastructure-testing/)\n- [리액트 메모이제이션 셀프 코칭](https://youthfulhps.dev/react/memoization/)\n- [테스트 대역폭 늘리기](https://cheese10yun.github.io/test-bandwidth/)\n- [PHPStan으로 PHP 제네릭 활용하기](https://edykim.com/ko/post/php-generics-with-phpstan/)\n- [하루에도 10번 배포하는 Flutter 앱 CI/CD 구축하기](https://medium.com/athenaslab/%ED%95%98%EB%A3%A8%EC%97%90%EB%8F%84-10%EB%B2%88-%EB%B0%B0%ED%8F%AC%ED%95%98%EB%8A%94-flutter-%EC%95%B1-ci-cd-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0-9f2fbe080c2b)\n- [리액트 렌더링의 미래 [번역]](https://junghan92.medium.com/%EB%B2%88%EC%97%AD-%EB%A6%AC%EC%95%A1%ED%8A%B8-%EB%A0%8C%EB%8D%94%EB%A7%81%EC%9D%98-%EB%AF%B8%EB%9E%98-5b7251bda66d)\n- [React Query Data Transformations](https://tkdodo.eu/blog/react-query-data-transformations)\n- [명탐정 '크롬 개발자 도구'의 성능 추리](https://yozm.wishket.com/magazine/detail/1746/)\n- [카카오 사태로 알아보는 DR 시스템 개념과 중요성](https://www.youtube.com/watch?v=tLLs7fKts2o)\n- [컴포넌트를 잘 만드는 방법(리액트)](https://ms3864.tistory.com/m/433)\n- [Springboot 통합 테스트로 불안한 리팩토링에서 벗어나기](https://coco-log.tistory.com/196)\n- [OOP 기반 선착순 투표 시스템 아키텍처](https://zuminternet.github.io/vote-architecture/)\n- [백앤드에서 받은 데이터를 어떻게 하면 가공없이 클라이언트에 적용할 수 있을까?](https://vallista.kr/%EB%B0%B1%EC%95%A4%EB%93%9C%EC%97%90%EC%84%9C-%EB%B0%9B%EC%9D%80-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%98%EB%A9%B4-%EA%B0%80%EA%B3%B5%EC%97%86%EC%9D%B4-%ED%81%B4%EB%9D%BC%EC%9D%B4%EC%96%B8%ED%8A%B8%EC%97%90-%EC%A0%81%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9D%84%EA%B9%8C/)\n- [주니어 개발자의 오픈소스 활동 이야기](https://tech.kakaopay.com/post/junior-opensource/)\n- [Shopify System Design 의 분석](https://www.joinc.co.kr/w/man/12/ShopifySystemDesign)\n- [홈서버 구축기](https://keencho.github.io/posts/home-server/)\n- [검색 FE파트는 어떻게 생산성을 높여가고 있을까? Part 1](https://techblog.lotteon.com/temp-2841f667bf6d)\n- [프로모션용 웹앱 빌더, 만다오](https://techblog.woowahan.com/2719/)\n- [GTM, Google Tag Manager 뜯어보기](https://evan-moon.github.io/2020/04/19/what-is-gtm-google-tag-manager/)\n- [프론트엔드는 무엇인가?](https://euncho.medium.com/%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%EB%8A%94-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80-30919634f80d)\n- [Spring&React 보일러플레이트로 개발 환경 구성 한 번에 끝내기](https://blog.goorm.io/springreact/)\n- [깃헙 10월 21일 장애 사후 분석 [번역]](https://muchtrans.com/translations/github-oct-21-post-incident-analysis.ko.html)\n- [소프트웨어 엔지니어를 고용할 때 하지 말아야 할 일들 [번역]](https://muchtrans.com/translations/how-not-to-hire-a-software-engineer.ko.html)\n- [일본의 기술공유 문화](https://earlybird.kr/2304)\n- [백업 및 복구](https://velog.io/@suran-kim/Tibero-%EB%B0%B1%EC%97%85-%EB%B0%8F-%EB%B3%B5%EA%B5%AC)\n- [기술 부채와 오버 엔지니어링을 줄이는 방법](https://channy.creation.net/blog/1623)\n- [서버에 걸리는 부하, 추측하지 말고 계측하자](https://injae-kim.github.io/dev/2020/07/09/how-to-check-single-server-load-average.html)\n- [Effective Atomic Design](https://kciter.so/posts/effective-atomic-design)\n- [Custom GitHub Actions 만들어 보기](https://smartstudio.tech/custom-github-actions/)\n- [FE개발자로서 못해준 이야기 2 - 컴포넌트](https://partnerjun.tistory.com/83)\n- [당신이 훌륭한 개발자라는 5가지 증거 [번역]](https://brunch.co.kr/@ywkim36/93)\n- [MySQL Batch Update 성능 측정 및 분석](https://cheese10yun.github.io/mysql-batch-update/)\n- [게임 서버 시스템을 위한 HikariCP 옵션 및 권장 설정](https://netmarble.engineering/hikaricp-options-optimization-for-game-server/)\n- [전사 구성원들이 사용하는 배치 데이터 플랫폼 만들기 - Airflow Advanced](https://tech.socarcorp.kr/data/2022/11/09/advanced-airflow-for-databiz.html)\n- [Spring Batch 업데이트 성능 최적화 및 분석](https://cheese10yun.github.io/spring-batch-update-performance/)\n- [React 렌더링 동작에 대한 (거의) 완벽한 가이드 [번역]](https://velog.io/@superlipbalm/blogged-answers-a-mostly-complete-guide-to-react-rendering-behavior)\n- [Webhooks(웹훅) 시스템 체크리스트](https://dataportal.kr/86)\n- [트위터 시스템 디자인 간단히 살펴보기](https://youtu.be/6QwqtdBx0oE)\n- [Spring Boot2에서 AspectJ 위빙으로 바꿔볼까?](https://gmoon92.github.io/spring/aop/2019/05/24/aspectj-of-spring.html)\n- [Google Calendar API 분석 및 시스템 구축 전략](https://dataportal.kr/88)\n- [React Code Review를 잘하기 위한 10가지 질문](https://samslow.github.io/development/2022/05/28/best-pr-reviewer/)\n- [자바스크립트의 프로토타입 훑어보기](https://hazel-developer.tistory.com/166)\n- [Tech-Verse 2022 한국어판 영상 모음](https://www.youtube.com/playlist?list=PLMfHuI-eghZngpW8gzd6RAMlMwmwiN0Bg)\n- [프론트엔드에서의 시큐어 코딩](https://themoin.github.io/2020-11-02-SecureFrontend/)\n- [DBA란?](https://velog.io/@dotdot/DBA)\n- [DBA 입장에서 바라보는 데이터베이스 직군 이야기](https://rastalion.me/dba-%EC%9E%85%EC%9E%A5%EC%97%90%EC%84%9C-%EB%B0%94%EB%9D%BC%EB%B3%B4%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%A7%81%EA%B5%B0-%EC%9D%B4%EC%95%BC%EA%B8%B0/)\n- [비주얼 타이머 앱 개발하며 배운 것들](https://edykim.com/ko/post/what-i-have-learned-from-visual-timer/)\n- [가장 먼저 예감한 짐 그레이](https://brunch.co.kr/@hvnpoet/134)\n- [성장하는 조직에서 계속 애자일한 문화를 유지할 수 있을까?](https://medium.com/athenaslab/성장하는-조직에서-계속-애자일한-문화를-유지할-수-있을까-3d504a3ae879)\n- [쿠팡이츠 데이터 플랫폼: 데이터 기반의 비즈니스 전략 및 성장](https://medium.com/coupang-engineering/%EC%BF%A0%ED%8C%A1%EC%9D%B4%EC%B8%A0-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%94%8C%EB%9E%AB%ED%8F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B8%B0%EB%B0%98%EC%9D%98-%EB%B9%84%EC%A6%88%EB%8B%88%EC%8A%A4-%EC%A0%84%EB%9E%B5-%EB%B0%8F-%EC%84%B1%EC%9E%A5-6b2380c173c1)\n- [실시간 서비스 경험기(배달운영시스템)](https://techblog.woowahan.com/2547/)\n- [제네시스 – 광고추천팀의 카프카 기반 스트리밍 데이터 플랫폼](https://tech.kakao.com/2022/04/13/kafka-connect-streaming-data-platform/)\n- [개발자 PR/IR 활동, DR(Developer Relations) 활동을 시작하며](https://devocean.sk.com/blog/techBoardDetail.do?ID=162907)\n- [도메인을 모델에 담기 (도메인 모델링)](https://medium.com/@kimdohun0104/%EB%8F%84%EB%A9%94%EC%9D%B8%EC%9D%84-%EB%AA%A8%EB%8D%B8%EC%97%90-%EB%8B%B4%EA%B8%B0-dcd553333eb0)\n- [JHipster란?](https://velog.io/@dsunni/JHipster-JHipster%EB%9E%80)\n- [엔지니어링 관리자 vs. 테크 리드](https://brunch.co.kr/@wegra/12)\n- [우리가 TypeScript로 갈아탄 이유](https://brunch.co.kr/@redwit/1)\n- [9가지 프로그래밍 언어로 배우는 개념: 1편 - 타입 이론](https://tech.devsisters.com/posts/programming-languages-1-type-theory/)\n- [OAuth와 춤을](https://d2.naver.com/helloworld/24942)\n- [Class가 무엇인가요?](https://rampart81.github.io/post/understanding-class/)\n- [Spring Boot2에서 AspectJ 위빙으로 바꿔볼까?](https://gmoon92.github.io/spring/aop/2019/05/24/aspectj-of-spring.html)\n- [자바스크립트의 프로토타입 훑어보기](https://evan-moon.github.io/2019/10/23/js-prototype/)\n- [리액트 Suspense 딥다이브](https://velog.io/@jay/%EB%A6%AC%EC%97%91%ED%8A%B8-Suspense-%EA%BD%A4%EB%82%98-%EC%99%84%EB%B2%BD%ED%95%9C-%EA%B0%80%EC%9D%B4%EB%93%9C)\n- [Google Calendar API 분석 및 시스템 구축 전략](https://dataportal.kr/88)\n- [개발자의 영어공부](https://medium.com/heeheewuwu/%EA%B0%9C%EB%B0%9C%EC%9E%90%EC%9D%98-%EC%98%81%EC%96%B4%EA%B3%B5%EB%B6%80-f102bad25cc1)\n- [프론트엔드 개발자에게 UX는? 연기에 몰입해서 나오는 배우들의 애드립](https://feel5ny.github.io/2021/01/10/UX%EC%99%80%20%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%EA%B0%9C%EB%B0%9C%EC%9E%90/)\n- [나는 프론트엔드를 안다고 말할 수 있을까?](https://evan-moon.github.io/2020/03/02/what-is-knowing/)\n- [프론트엔드의 본질은 UX가 아닐까](https://jbee.io/essay/about_frontend/)\n- [Learning Advanced JavaScript](https://johnresig.com/apps/learn/)\n- [프론트엔드에서의 시큐어 코딩](https://themoin.github.io/2020-11-02-SecureFrontend/)\n- [게임 서버 시스템을 위한 JDBC와 Timeout 이해하기](https://netmarble.engineering/jdbc-timeout-for-game-server/)\n- [디자인 패턴들](https://refactoring.guru/ko/design-patterns)\n- [새로 입사한 개발자가 프로젝트에 기여하는 방법 한 가지](https://helloworld.kurly.com/blog/fix-style-with-command/)\n- [내가 개발 커뮤니티를 하는 이유 (a.k.a 10년 회고)](https://dataportal.kr/89)\n- [자바스크립트 Map을 Object 대신 사용해야할 때는 언제일까요? [번역]](https://velog.io/@oneook/%EB%B2%88%EC%97%AD-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-Map%EC%9D%84-Object-%EB%8C%80%EC%8B%A0-%EC%82%AC%EC%9A%A9%ED%95%B4%EC%95%BC%ED%95%A0-%EB%95%8C%EB%8A%94-%EC%96%B8%EC%A0%9C%EC%9D%BC%EA%B9%8C%EC%9A%94)\n- [Chrome DevTools로 JS 메모리 누수(Memory Leak) 디버깅하기](https://blog.eunsukim.me/posts/debugging-javascript-memory-leak-with-chrome-devtools)\n- [Data Lake 구조 설계 with Serverless](https://medium.com/monday-9-pm/data-lake-%EA%B5%AC%EC%A1%B0-%EC%84%A4%EA%B3%84with-serverless-1c733f6c258#gaerae.com)\n- [Stack Overflow, 개발자의 성장과 경험 포인트](https://madplay.github.io/post/how-i-use-stackoverflow)\n- [RAC(Real Application Cluster)이란?](https://12bme.tistory.com/322)\n- [다른 언어로 성장하기](https://jojoldu.tistory.com/687)\n- [체대 출신 개발자의 2022년 회고](https://ryan-han.com/post/memoirs/memoirs2022/)\n- [추천팀의 DDD 도입기](https://tech.kakao.com/2022/12/12/ddd-of-recommender-team/)\n- [앱 기획부터 출시까지 참고한 링크 - 앱 기획, 디자인, 개발, 배포 준비](https://applecider2020.tistory.com/m/46)\n- [폐쇄망 환경의 배포 시스템 개발기](https://blog.banksalad.com/tech/how-we-have-built-alice/)\n- [2022 CTO 회고](https://jojoldu.tistory.com/694)\n- [2023년 웹 개발 방식을 바꿀 12가지 엄선된 크롬 확장 프로그램](https://dev.to/hackertab/12-hand-picked-chrome-extensions-that-will-change-the-way-you-do-web-development-in-2023-ni9)\n- [Ensure your Next.js app's performance is top-notch with Lighthouse CI and GitHub Actions](https://dev.to/joerismits/ensure-your-nextjs-apps-performance-is-top-notch-with-lighthouse-ci-and-github-actions-4ne8)\n- [제대로 파는 자바스크립트 - JavaScript 끝.장.내.기](https://youtu.be/RHoPpjKRT38)\n- [사용자의 눈 건강을 챙기는 다크모드 개발하기](https://medium.com/athenaslab/%EC%82%AC%EC%9A%A9%EC%9E%90%EC%9D%98-%EB%88%88-%EA%B1%B4%EA%B0%95%EC%9D%84-%EC%B1%99%EA%B8%B0%EB%8A%94-%EB%8B%A4%ED%81%AC%EB%AA%A8%EB%93%9C-%EA%B0%9C%EB%B0%9C%ED%95%98%EA%B8%B0-a39bdf9c6b1b)\n- [컬리에서 선물하기를 개발하며 회고](https://helloworld.kurly.com/blog/gift-order-development/)\n- [그림으로 쉽게 보는 HTTPS, SSL, TLS](https://brunch.co.kr/@swimjiy/47)\n- [금융회사와 핀테크의 IT개발방법 차이](https://youtu.be/7oU1FZ1SE-0)\n- [리액트에서 의존성 역전 원칙 적용하기(feat. 좋은설계란무엇일까?)](https://velog.io/@yesbb/%EB%A6%AC%EC%95%A1%ED%8A%B8%EC%97%90%EC%84%9C-%EC%9D%98%EC%A1%B4%EC%84%B1-%EC%97%AD%EC%A0%84-%EC%9B%90%EC%B9%99%EC%9D%84-%EC%A0%81%EC%9A%A9%ED%95%B4%EB%B3%B4%EC%95%98%EB%8B%A4feat.-%EC%A2%8B%EC%9D%80%EC%84%A4%EA%B3%84%EB%9E%80%EB%AC%B4%EC%97%87%EC%9D%BC%EA%B9%8C)\n- [노코드의 시대가 온다](https://blog.nocodecamp.kr/nocode-era/)\n- [무신사의 엘라스틱서치 MusE (Musinsa Elasticsearch) — 10분만에 만드는 엘라스틱서치 클러스터](https://medium.com/musinsa-tech/%EB%AC%B4%EC%8B%A0%EC%82%AC%EC%9D%98-%EC%97%98%EB%9D%BC%EC%8A%A4%ED%8B%B1%EC%84%9C%EC%B9%98-muse-musinsa-elasticsearch-e6355516186a)\n- [생후 400일을 넘긴 넷마블 기술 블로그 육아일기](https://netmarble.engineering/n7e-do-400d-celebrate/)\n- [실시간 음식배달을 위한 카카오 내비 API 활용 (우아한형제들 이재일)](https://youtu.be/amJerC5FVeM)\n- [20 Git Commands you (probably) didn't know about 🧙‍](https://dev.to/lissy93/20-git-commands-you-probably-didnt-know-about-4j4o)\n- [폐쇄망 환경의 배포 시스템 개발기](https://blog.banksalad.com/tech/how-we-have-built-alice/)\n- [HR, PM 출신 개발자의 2022년 회고](https://tillog.netlify.app/posts/retrospect-2022)\n- [Velopert 2022 회고](https://velog.io/@velopert/2022.log)\n- [2023년 웹 개발 방식을 바꿀 12가지 엄선된 크롬 확장 프로그램](https://dev.to/hackertab/12-hand-picked-chrome-extensions-that-will-change-the-way-you-do-web-development-in-2023-ni9)\n- [MySQL timestamp 와 Y2K38 Problem](https://medium.com/finda-tech/mysql-timestamp-%EC%99%80-y2k38-problem-d43b8f119ce5)\n- [웹사이트 최적화 방법 - 이미지 파트](https://oliveyoung.tech/blog/2021-11-22/How-to-Improve-Web-Performance-with-Image-Optimization/)\n- [2023년. Flutter 를 배워야하는 이유.](https://www.youtube.com/watch?v=l05wkkCCe2Y)\n- [Service Discovery DR 구성 1부 - Eureka 서버를 지역 분산시켜 안정성을 높이자](https://11st-tech.github.io/2022/12/30/eureka-disaster-recovery-1/)\n- [2023년 1월 Naver FE news](https://github.com/naver/fe-news/blob/master/issues/2023-01.md)\n- [지속 가능한 소프트웨어 설계 패턴: 포트와 어댑터 아키텍처 적용하기](https://engineering.linecorp.com/ko/blog/port-and-adapter-architecture/)\n- [Promise는 왜 취소가 안 될까?](https://tech.kakao.com/2023/01/11/promise-cancelation-in-javascript/)\n- [아마존 합격 후 출국 하루 전 해고당한 2022 회고](https://sudojslee.github.io/posts/2022-amazon-layoff/)\n- [동시성, 병렬, 비동기, 논블럭킹과 컨셉들](https://black7375.tistory.com/90)\n- [메시징 시스템 트러블 슈팅 (네트워크, 메모리)](https://engineering.linecorp.com/ko/blog/messaing-hub-troubleshooting)\n- [FMS(차량 관제 시스템) 데이터 파이프라인 구축기](https://tech.socarcorp.kr/data/2023/01/17/build-fms-data-pipeline-1.html)\n- [좋은 함수 만들기](https://jojoldu.tistory.com/697)\n- [적정기술 딜레마](https://fe-developers.kakaoent.com/2023/230112-appropriate-technology)\n- [CTO가 커리어를 걸고 비트 레벨까지 내려가서 DB를 해킹했던 이야기](https://tech.devsisters.com/posts/bit-level-database-hacking/#ft_1)\n- [이제는 개발자도 CPU 아키텍처를 구분해야 합니다](https://velog.io/@480/%EC%9D%B4%EC%A0%9C%EB%8A%94-%EA%B0%9C%EB%B0%9C%EC%9E%90%EB%8F%84-CPU-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%EB%A5%BC-%EA%B5%AC%EB%B6%84%ED%95%B4%EC%95%BC-%ED%95%A9%EB%8B%88%EB%8B%A4)\n- [그런 REST API로 괜찮은가](https://www.youtube.com/watch?v=RP_f5dMoHFc)\n\n\n--------------------------------------\n</br>\n\n## :earth_asia: Inspired By\n>아래의 유익한 저장소들에 방문해보세요!\n- [주니어 개발자를 위한 취업 정보 모음](https://github.com/jojoldu/junior-recruit-scheduler)\n- [Technical Interview Guidelines for beginners](https://github.com/JaeYeopHan/Interview_Question_for_Beginner)\n- [개발자 블로그 모음](https://github.com/awesome-devblog/awesome-devblog)\n- [개발자 회고 모음](https://github.com/oaksong/developers-retrospective)\n- [iOS 개발에 대한 질문과 답변 모음](http://bit.ly/2yhZa9Q)\n",
    "thumbnail": "/images/goquality-dev-contents.jpeg"
  },
  "JHlab": {
    "id": "JHlab",
    "category": "project",
    "title": "JHlab",
    "description": "",
    "tags": [],
    "date_started": "2021.12.06",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/JHlab",
    "content": "# HI\n## this is for my web dev practice.",
    "thumbnail": "/images/jhlab.jpeg"
  },
  "memohub": {
    "id": "memohub",
    "category": "project",
    "title": "memohub",
    "description": "Memo by anyone at everywhere.",
    "tags": [
      "nextjs"
    ],
    "date_started": "2023.11.23",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/memohub",
    "content": "# Memohub\n### Memo by anyone at everywhere.\n### https://memohub.vercel.app/\n<img width=\"367\" alt=\"image\" src=\"https://github.com/wndgur2/memohub/assets/65120311/e6232f19-a2ac-4f2e-a75e-72da3e6877ae\">\n",
    "thumbnail": "/images/memohub.jpeg"
  },
  "node-image-compressor": {
    "id": "node-image-compressor",
    "category": "project",
    "title": "node-image-compressor",
    "description": "",
    "tags": [],
    "date_started": "2025.03.29",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/node-image-compressor",
    "content": "## Node에서 사용 가능한 image 압축 라이브러리 세 가지가 있습니다.\n\n1. [webp-converter](https://www.npmjs.com/package/webp-converter)\n2. [compress-images](https://www.npmjs.com/package/compress-images)\n3. [imagemin](https://www.npmjs.com/package/imagemin)\n\n## 특징은 아래와 같습니다.\n\nwebp-converter\n\n- commonjs 방식 (require('webp-converter')) 사용\n- 1/10 수준 압축률\n\n- 가장 높은 압축률을 자랑합니다.\n- 타이젠의 web엔진에서 webp를 지원한다고 합니다. (랜더링 가능하다고 합니다.)\n  https://docs.tizen.org/platform/release-notes/tizen-6-0-m2/\n\ncompress-images\n\n- commonjs 방식 (require('compress-images')) 사용\n- 1/4 수준 압축률\n\nimagemin\n\n- ES6 방식 (import compress_images from 'compress-images') 사용\n- 더 쉬운 코드\n- 1/4 수준 압축률\n\n## 사용법\n\nmodules의 각 라이브러리의 코드를 참고하세요.\n",
    "thumbnail": "/images/node-image-compressor.jpeg"
  },
  "petDate": {
    "id": "petDate",
    "category": "project",
    "title": "petDate",
    "description": "pet dating application",
    "tags": [],
    "date_started": "2022.05.08",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/petDate",
    "content": "#petDate\n\nPet dating app backend.",
    "thumbnail": "/images/petdate.jpeg"
  },
  "petdate_app": {
    "id": "petdate_app",
    "category": "project",
    "title": "petdate_app",
    "description": "",
    "tags": [],
    "date_started": "2022.05.25",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/petdate_app",
    "content": "# petdate_app\nwith react native.\n\nFigma: https://www.figma.com/file/MTTqtf7ozbiUsq5A4dbteS/Pet-Dating?type=design&node-id=0%3A1&mode=design&t=GvWsHBN9bOIB1ry3-1\n",
    "thumbnail": "/images/petdate_app.jpeg"
  },
  "petdate_web": {
    "id": "petdate_web",
    "category": "project",
    "title": "petdate_web",
    "description": "",
    "tags": [],
    "date_started": "2022.05.24",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/petdate_web",
    "content": "# PETDATE FOR WEB\nreact project.\n\n# Getting Started with Create React App\n\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\n\n## Available Scripts\n\nIn the project directory, you can run:\n\n### `npm start`\n\nRuns the app in the development mode.\\\nOpen [http://localhost:3000](http://localhost:3000) to view it in your browser.\n\nThe page will reload when you make changes.\\\nYou may also see any lint errors in the console.\n\n### `npm test`\n\nLaunches the test runner in the interactive watch mode.\\\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\n\n### `npm run build`\n\nBuilds the app for production to the `build` folder.\\\nIt correctly bundles React in production mode and optimizes the build for the best performance.\n\nThe build is minified and the filenames include the hashes.\\\nYour app is ready to be deployed!\n\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\n\n### `npm run eject`\n\n**Note: this is a one-way operation. Once you `eject`, you can't go back!**\n\nIf you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\n\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.\n\nYou don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.\n\n## Learn More\n\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\n\nTo learn React, check out the [React documentation](https://reactjs.org/).\n\n### Code Splitting\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\n\n### Analyzing the Bundle Size\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\n\n### Making a Progressive Web App\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\n\n### Advanced Configuration\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\n\n### Deployment\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\n\n### `npm run build` fails to minify\n\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)\n",
    "thumbnail": "/images/petdate_web.jpeg"
  },
  "python-algorithm": {
    "id": "python-algorithm",
    "category": "project",
    "title": "python-algorithm",
    "description": "",
    "tags": [],
    "date_started": "2022.09.11",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/python-algorithm",
    "content": "# python-algorithm",
    "thumbnail": "/images/python-algorithm.jpeg"
  },
  "Reptopia": {
    "id": "Reptopia",
    "category": "project",
    "title": "Reptopia",
    "description": "",
    "tags": [
      "canvas"
    ],
    "date_started": "2022.02.21",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/Reptopia",
    "content": "> 추후 정리된 문서입니다.\n\n![reptopia](https://github.com/wndgur2/Reptopia/assets/65120311/99d587c1-d3cc-4c0f-9f2c-16905a4c73e0)\n\n# REPTOPIA\n\n파충류 사육을 배울 수 있는 시뮬레이터<br>\n<https://main--reptopia.netlify.app/>\n\n## 목표\n\n1. **파충류 그래픽** 구현\n2. **재밌는 UI** 구현\n\n## 파충류 그래픽\n\n1. 물리 엔진<br>\n  ![x1-ezgif com-speed](https://github.com/wndgur2/Reptopia/assets/65120311/3432b868-02a5-4a87-b39a-5053e869859e)\n\n2. 형태와 움직임<br>\n  ![movement](https://github.com/wndgur2/Reptopia/assets/65120311/347c90c2-9b3e-4bae-abe3-363891bb251d)\n\n## 재밌는 UI\n\n![ScreenRecording2024-06-21at22 35 29-ezgif com-video-to-gif-converter](https://github.com/wndgur2/Reptopia/assets/65120311/57baf603-5f17-47e9-8d07-9b4aa1e63acd)\n\n.\n",
    "thumbnail": "/images/reptopia.jpeg"
  },
  "Reptopia2": {
    "id": "Reptopia2",
    "category": "project",
    "title": "Reptopia2",
    "description": "",
    "tags": [],
    "date_started": "2022.08.06",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/Reptopia2",
    "content": "# Reptopia2  \n파충류 매니아를 위한 커뮤니티  \n\n",
    "thumbnail": "/images/reptopia2.jpeg"
  },
  "sam-ui": {
    "id": "sam-ui",
    "category": "project",
    "title": "sam-ui",
    "description": "",
    "tags": [],
    "date_started": "2025.09.09",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/sam-ui",
    "content": "# sam-ui workspace\n\nMonorepo for @sam/ui — a lean, responsive, themeable React + TypeScript UI library and a small playground app.\n\nPackages\n\n- packages/ui — the component library (React 18+, TypeScript, Vite library mode)\n- apps/playground — Vite React app to manually test components\n\nScripts\n\n- build: builds all packages\n- dev: runs @sam/ui dev server and the playground dev server\n- test: runs package tests\n- lint: runs ESLint across packages\n\nTech\n\n- React 18+, TypeScript, Vite, Vitest + RTL, ESLint + Prettier, PostCSS + Autoprefixer, pnpm\n\nETC\n\n- This Project is vibe-coded with codex.\n",
    "thumbnail": "/images/sam-ui.jpeg"
  },
  "sse-test": {
    "id": "sse-test",
    "category": "project",
    "title": "sse-test",
    "description": "",
    "tags": [],
    "date_started": "2025.01.13",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/sse-test",
    "content": "# server side event test\n\n# express <-> react\n\n2025.01.13\n",
    "thumbnail": "/images/sse-test.jpeg"
  },
  "study_algorithm": {
    "id": "study_algorithm",
    "category": "project",
    "title": "study_algorithm",
    "description": "For Algorithm study club",
    "tags": [],
    "date_started": "2022.11.15",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/study_algorithm",
    "content": "# 알고리즘 스터디 2022.11.15 ~ 2023.12.12\n\n한경대학교 컴퓨터공학과 알고리즘 스터디입니다.\n\n## 개인 블로그\n\n### 강명조 https://velog.io/@ggob_2\n\n### 구민수 https://velog.io/@publicminsu\n\n### 김원래 https://velog.io/@onenewarm\n\n노션: https://glen-devourer-b13.notion.site/4a494cf357034ff48ad6d1f1ef330d41\n\n### 박주성 https://velog.io/@qkrwntjdrns\n\n### 이중혁 https://blog.naver.com/wndgur76\n\n### 유규빈 https://velog.io/@i_am_gr00t\n\n메모\n\n-   사진찍기 2022.11.21 제1공학관 3층\n    ![단체사진](./img/KakaoTalk_Photo_2022-11-21-16-03-38.jpeg)\n",
    "thumbnail": "/images/study_algorithm.jpeg"
  },
  "vue-fundemental": {
    "id": "vue-fundemental",
    "category": "project",
    "title": "vue-fundemental",
    "description": "",
    "tags": [],
    "date_started": "2024.11.04",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/vue-fundemental",
    "content": "# vue-fundemental\n\nThis template should help get you started developing with Vue 3 in Vite.\n\n## Recommended IDE Setup\n\n[VSCode](https://code.visualstudio.com/) + [Volar](https://marketplace.visualstudio.com/items?itemName=Vue.volar) (and disable Vetur).\n\n## Customize configuration\n\nSee [Vite Configuration Reference](https://vite.dev/config/).\n\n## Project Setup\n\n```sh\nyarn\n```\n\n### Compile and Hot-Reload for Development\n\n```sh\nyarn dev\n```\n\n### Compile and Minify for Production\n\n```sh\nyarn build\n```\n",
    "thumbnail": "/images/vue-fundemental.jpeg"
  },
  "vuetify-project": {
    "id": "vuetify-project",
    "category": "project",
    "title": "vuetify-project",
    "description": "",
    "tags": [],
    "date_started": "2024.11.04",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/vuetify-project",
    "content": "# Vuetify (Default)\n\nThis is the official scaffolding tool for Vuetify, designed to give you a head start in building your new Vuetify application. It sets up a base template with all the necessary configurations and standard directory structure, enabling you to begin development without the hassle of setting up the project from scratch.\n\n## ❗️ Important Links\n\n- 📄 [Docs](https://vuetifyjs.com/)\n- 🚨 [Issues](https://issues.vuetifyjs.com/)\n- 🏬 [Store](https://store.vuetifyjs.com/)\n- 🎮 [Playground](https://play.vuetifyjs.com/)\n- 💬 [Discord](https://community.vuetifyjs.com)\n\n## 💿 Install\n\nSet up your project using your preferred package manager. Use the corresponding command to install the dependencies:\n\n| Package Manager                                                | Command        |\n|---------------------------------------------------------------|----------------|\n| [yarn](https://yarnpkg.com/getting-started)                   | `yarn install` |\n| [npm](https://docs.npmjs.com/cli/v7/commands/npm-install)     | `npm install`  |\n| [pnpm](https://pnpm.io/installation)                          | `pnpm install` |\n| [bun](https://bun.sh/#getting-started)                        | `bun install`  |\n\nAfter completing the installation, your environment is ready for Vuetify development.\n\n## ✨ Features\n\n- 🖼️ **Optimized Front-End Stack**: Leverage the latest Vue 3 and Vuetify 3 for a modern, reactive UI development experience. [Vue 3](https://v3.vuejs.org/) | [Vuetify 3](https://vuetifyjs.com/en/)\n- 🗃️ **State Management**: Integrated with [Pinia](https://pinia.vuejs.org/), the intuitive, modular state management solution for Vue.\n- 🚦 **Routing and Layouts**: Utilizes Vue Router for SPA navigation and vite-plugin-vue-layouts for organizing Vue file layouts. [Vue Router](https://router.vuejs.org/) | [vite-plugin-vue-layouts](https://github.com/JohnCampionJr/vite-plugin-vue-layouts)\n- 💻 **Enhanced Development Experience**: Benefit from TypeScript's static type checking and the ESLint plugin suite for Vue, ensuring code quality and consistency. [TypeScript](https://www.typescriptlang.org/) | [ESLint Plugin Vue](https://eslint.vuejs.org/)\n- ⚡ **Next-Gen Tooling**: Powered by Vite, experience fast cold starts and instant HMR (Hot Module Replacement). [Vite](https://vitejs.dev/)\n- 🧩 **Automated Component Importing**: Streamline your workflow with unplugin-vue-components, automatically importing components as you use them. [unplugin-vue-components](https://github.com/antfu/unplugin-vue-components)\n- 🛠️ **Strongly-Typed Vue**: Use vue-tsc for type-checking your Vue components, and enjoy a robust development experience. [vue-tsc](https://github.com/johnsoncodehk/volar/tree/master/packages/vue-tsc)\n\nThese features are curated to provide a seamless development experience from setup to deployment, ensuring that your Vuetify application is both powerful and maintainable.\n\n## 💡 Usage\n\nThis section covers how to start the development server and build your project for production.\n\n### Starting the Development Server\n\nTo start the development server with hot-reload, run the following command. The server will be accessible at [http://localhost:3000](http://localhost:3000):\n\n```bash\nyarn dev\n```\n\n(Repeat for npm, pnpm, and bun with respective commands.)\n\n> Add NODE_OPTIONS='--no-warnings' to suppress the JSON import warnings that happen as part of the Vuetify import mapping. If you are on Node [v21.3.0](https://nodejs.org/en/blog/release/v21.3.0) or higher, you can change this to NODE_OPTIONS='--disable-warning=5401'. If you don't mind the warning, you can remove this from your package.json dev script.\n\n### Building for Production\n\nTo build your project for production, use:\n\n```bash\nyarn build\n```\n\n(Repeat for npm, pnpm, and bun with respective commands.)\n\nOnce the build process is completed, your application will be ready for deployment in a production environment.\n\n## 💪 Support Vuetify Development\n\nThis project is built with [Vuetify](https://vuetifyjs.com/en/), a UI Library with a comprehensive collection of Vue components. Vuetify is an MIT licensed Open Source project that has been made possible due to the generous contributions by our [sponsors and backers](https://vuetifyjs.com/introduction/sponsors-and-backers/). If you are interested in supporting this project, please consider:\n\n- [Requesting Enterprise Support](https://support.vuetifyjs.com/)\n- [Sponsoring John on Github](https://github.com/users/johnleider/sponsorship)\n- [Sponsoring Kael on Github](https://github.com/users/kaelwd/sponsorship)\n- [Supporting the team on Open Collective](https://opencollective.com/vuetify)\n- [Becoming a sponsor on Patreon](https://www.patreon.com/vuetify)\n- [Becoming a subscriber on Tidelift](https://tidelift.com/subscription/npm/vuetify)\n- [Making a one-time donation with Paypal](https://paypal.me/vuetify)\n\n## 📑 License\n[MIT](http://opensource.org/licenses/MIT)\n\nCopyright (c) 2016-present Vuetify, LLC\n",
    "thumbnail": "/images/vuetify-project.jpeg"
  },
  "wndgur2": {
    "id": "wndgur2",
    "category": "project",
    "title": "wndgur2",
    "description": "",
    "tags": [],
    "date_started": "2023.03.28",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/wndgur2",
    "content": "### 이중혁 1999.11.8 ~  \n### 한경대학교 컴퓨터공학과 HKNU Computer engineering 2018 ~ 2024\n\n[![Solved.ac\n프로필](http://mazassumnida.wtf/api/mini/generate_badge?boj=wndgur2)](https://solved.ac/wndgur2)\n## 프로젝트들 Projects\n\n- 🦸🏻 [이중혁 wndgur2.github.io](https://github.com/wndgur2/wndgur2.github.io) : Github 연동 개인 블로그\n- 🐱 [고양이 체스 Cat Chess](https://github.com/wndgur2/CatChess) : 실시간 3D 웹 대전 게임\n- 🧀 [치즈 한장 Cheese](https://github.com/wndgur2/cheese) : 모바일 웹을 활용한 야외 포토 부스 서비스\n- 🦎 [렙토피아 Reptopia](https://github.com/wndgur2/Reptopia) : 파충류 매니아를 위한 커뮤니티\n- 📝 [메모허브 MemoHub](https://github.com/wndgur2/memohub) : 세상에서 가장 자유로운 메모장\n",
    "thumbnail": "/images/wndgur2.jpeg"
  },
  "wndgur2.github.io": {
    "id": "wndgur2.github.io",
    "category": "project",
    "title": "wndgur2.github.io",
    "description": "Algorithms",
    "tags": [
      "algorithm",
      "c",
      "cpp",
      "python"
    ],
    "date_started": "2024.05.05",
    "date_finished": "",
    "head_count": "",
    "role": "",
    "github": "https://github.com/wndgur2/wndgur2.github.io",
    "content": "# [leejunghyeok](https://wndgur2.github.io/)\n\n개발자로서의 이중혁을 담은 개인 블로그\n\n<img width=\"1440\" alt=\"Screenshot 2024-12-15 at 13 20 18\" src=\"https://github.com/user-attachments/assets/6dccf12f-022c-47b8-9b0f-622027850828\" />\n\n## 목표\n\n1. 흥미로운 개발자 블로그\n\n2. 데이터베이스 통합\n\n<br>\n\n## 1\\. 흥미로운 개발자 블로그\n\n- Interactive/dynamic elements\n\n  - 마우스 이벤트 애니메이션 ✅\n  - 스크롤 이벤트 애니메이션\n  - 다양한 clickable elements\n\n- 굉장한 UX\n\n  - CSS의 media query, flex를 이용한 반응형 웹 ✅\n  - ReactJs로 SPA 구현 -> routing 속도 개선 ✅\n  - Light/Dark theme 제공 ✅\n  - Data Fetch 비동기 처리 ✅\n  - Performance\n\n    - Binary Search로 log(N)에 posts 날짜 내림차순 삽입 연산 ✅\n    - useCallback() hook으로 리랜더링 시 중복 선언 방지 ✅\n\n- 기능\n\n  - 검색\n\n    - 필터링\n\n      - 태그 ✅\n      - 카테고리 ✅\n      - 내용 ✅\n\n    - 정렬\n\n      - 날짜 오름/내림차순 ✅\n\n- 좋은 글\n\n  - 각 프로젝트의 MD파일 작성 (목적, 해결 과정, 사진)\n  - 공부한 내용 뿐만 아니라, 그때 느낀 인상, 아이디어 기록. 나중에 잘 와닿을 수 있도록.\n  - 컴퓨터 지식을 공부하며 인터넷에서 찾을 수 없었던 혹은 찾기 힘들었던 자료, 인사이트 공유.\n\n<br>\n\n## 2\\. 데이터베이스 통합을 위해\n\n- Github 데이터베이스에 `Post` 저장 ✅\n- <https://raw.githubusercontent.com> 로부터 data fetch ✅\n- `Shell script`와 `Github action`으로 `Post` metadata 관리 자동화 (목록과 urls) ✅\n- Post의 metadata 정의하고, 각 MD 파일에 헤더 주석으로 작성\n\n> [깃허브 프로필](https://github.com/wndgur2)\n\n> [백준](https://www.acmicpc.net/user/wndgur2)\n\n> [SWExpertAcademy](https://swexpertacademy.com/main/userpage/home/userHome.do?userId=AY9bT9Ma97cDFAS1)\n",
    "thumbnail": "/images/wndgur2.github.io.jpeg"
  }
}